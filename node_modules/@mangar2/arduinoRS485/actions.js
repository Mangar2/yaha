/**
/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */

'use strict'

const retry = new (require('retry'))()
const ONE_SECOND = 1000

module.exports = {
    /**
     * blinks an amount of times
     * Blinks reverse, if the device is currently on (off/on instead of on/off)
     * The device will be at the inital state after blinking
     * @param {string} topic topic of the message
     * @param {number} amount amount of blink cycles (if < 1 it will blink exactly once)
     * @param {string} state current state of the element to blink ("on" or "off")
     * @param {function} switchFunction function(newState) switching the device
     * @private
     */
    blink: (topic, amount, state, switchFunction) => {
        const retryCnt = amount > 0 ? amount * 2 : 2
        let newState = state

        if (typeof (switchFunction) === 'function') {
            retry.topicRetry(topic, retryCnt, 3 * ONE_SECOND, cnt => {
                newState = newState === 'on' ? 'off' : 'on'
                switchFunction(newState)
            })
        }
    },

    /**
     * Sets switches on temporarily
     * Enables a switch for some time and switch it of automatically
     * @param {string} topic topic of the message
     * @param {string} state current state of the element ("on" or "off")
     * @param {function} switchFunction function(newState) switching the device
     * @private
     */
    temporary: (topic, state, switchFunction) => {
        const STANDARD_DELAY_IN_SECONDS = 20 * 60
        const retryCnt = state !== 'off' ? 2 : 1
        let newState = state === 'on' || state === 'off' ? state : 'on'
        const delayTimeInSeconds = isNaN(state) ? STANDARD_DELAY_IN_SECONDS : state

        if (typeof (switchFunction) === 'function') {
            retry.topicRetry(topic, retryCnt, delayTimeInSeconds * ONE_SECOND, cnt => {
                switchFunction(newState)
                newState = newState === 'on' ? 'off' : 'on'
            })
        }
    },

    /**
     * Switches on directly. Terminates all other loops like blink or temporarly.
     * Example: A switch is set ot on temporarly for 10 minutes. After 5 minutes the switch is
     * "set" to on. Then the automatic switch off of the temporary call is disabled
     * @param {string} topic topic of the message
     * @param {function} switchFunction function(newState) switching the device
     */
    set: (topic, switchFunction) => {
        const retryCnt = 1
        if (typeof (switchFunction) === 'function') {
            retry.topicRetry(topic, retryCnt, 3 * ONE_SECOND, cnt => {
                switchFunction()
            })
        }
    }
}
