/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */

'use strict'

const { Callbacks } = require('@mangar2/utils')
const SerialConnection = require('./serialconnection')
const ReadMessages = require('./readmessages')

/**
 * @param {Object} options configuration options
 * @param {string} options.serialPortName name of the port to use
 * @param {integer} options.baudrate baud rate to be used
 */
class ArduinoRS485 {
    constructor (options) {
        this._serial = new SerialConnection()
        this._callbacks = new Callbacks(['publish'])
        this._read = new ReadMessages()
        this._serial.on('data', (byteArray) => { })
        this.init(options.serialPortName, options.baudrate)
    }

    /**
     * Sets a callback.
     * @param {string} event event name (not case sensitive) for the callback (supported: 'publish')
     * @param {function} callback function(...parameter)
     * @throws {Error} if the event is not supported
     * @throws {Error} if the callback is not 'function'
     */
    on (event, callback) {
        this._callbacks.on(event, callback)
    }

    /**
     * Initializes the serial connection
     * @param {string} portName name of the port to use
     * @param {integer} baudrate baud rate to be used
     * @private
     */
    async _init (portName, baudrate) {
        await this._serial.open(portName, baudrate)
    }

    /**
     * Processes a mqtt message
     * @param {Message} message mqtt message
     */
    processMessage (message) {
        const serialMessage = mqttMessageToSerialMessage(message)
        this._rs485Master.sendSerialMessage(serialMessage)
    }
}

module.exports = ArduinoRS485
