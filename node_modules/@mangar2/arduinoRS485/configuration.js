/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */

'use strict'

const types = require('@mangar2/types')
const sanitize = require('@mangar2/configuration')
const errorLog = require('@mangar2/errorlog')
const CheckInput = require('@mangar2/checkinput')

/**
 * JSON schema to check configuration input
 * @private
 */
const ArduinoOptionsJSONSchema = {
    title: 'Arduino RS485 service configuration',
    type: 'object',
    properties: {
        serialPortName: {
            description: 'name of the serial port to use for serial communication',
            type: 'string'
        },
        baudrate: {
            description: 'Baudrate to use for serial communication',
            type: 'integer'
        },
        myAddress: {
            description: 'RS485 address of this device',
            type: 'integer',
            min: 1,
            max: 127
        },
        maxVersion: {
            description: 'Maximal supported RS485 interface version',
            enum: [0, 1, 2]
        },
        tickDelay: {
            description: 'delay between two ticks for the inner clock managing the token',
            type: 'integer'
        },
        qos: {
            description: 'quality of service used to send messages to the broker',
            enum: [0, 1, 2]
        },
        topics: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    command: {
                        description: 'command character',
                        type: 'string',
                        minLength: '1',
                        maxLength: '1'
                    },
                    value: {
                        description: 'value of the serial message',
                        type: 'integer',
                        min: 0,
                        max: 65535
                    },
                    address: {
                        description: 'address the message is sent to',
                        type: 'integer',
                        min: 1,
                        max: 127
                    }
                },
                required: ['command', 'value', 'address']
            }
        },
        settings: {
            type: 'object',
            additionalProperties: {
                type: 'string',
                propertyNames: { maxLength: 1 }
            }
        },
        status: {
            type: 'object',
            additionalProperties: {
                type: 'string',
                propertyNames: { maxLength: 1 }
            }
        },
        adresses: {
            type: 'object',
            additionalProperties: {
                type: 'integer',
                min: 1,
                max: 127
            }
        }
    },
    additionalProperties: false,
    required: ['serialPortName', 'baudrate', 'myAddress', 'maxVersion', 'tickDelay', 'qos']
}

const checkConfiguration = new CheckInput(ArduinoOptionsJSONSchema)

/**
 * Default values
 * @private
 */
const defaultConfiguration = {
    persist: {
        keepFiles: 5,
        directory: '.',
        filename: 'messages',
        interval: 60000
    },
    server: {
        port: 8203,
        path: 'sensor'
    },
    tree: {
        maxHistoryLength: 50,
        historyHysterese: 10,
        maxValuesPerHistoryEntry: 256,
        lengthForFurtherCompression: 5,
        upperBoundFactor: 1.2,
        upperBoundAddInMilliseconds: 1000,
        lowerBoundFactor: 0.8,
        lowerBoundSubInMilliseconds: 1000
    }
}

/**
 * @private
 * @description
 * Gets the configuration, fills default values and sanitizes it
 * @param {string} filename name of the configuration file
 * @returns {Object} configuration
 */
function sanitizeConfiguration (config) {
    if (!types.isObject(config)) {
        errorLog('The active configuration is not an object, program stopped')
        process.exit(1)
    }
    config = sanitize(config, defaultConfiguration, checkConfiguration)
    return config
}

module.exports = sanitizeConfiguration
