/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */

'use strict'

const { types } = require('@mangar2/utils')
const sanitize = require('@mangar2/configuration')
const errorLog = require('@mangar2/errorlog')
const CheckInput = require('@mangar2/checkinput')

/**
 * JSON schema to check configuration input
 * @private
 */
const ArduinoOptionsJSONSchema = {
    title: 'Arduino RS485 service configuration',
    type: 'object',
    properties: {
        serialPortName: {
            description: 'name of the serial port to use for serial communication',
            type: 'string'
        },
        baudrate: {
            description: 'Baudrate to use for serial communication',
            type: 'integer'
        },
        myAddress: {
            description: 'RS485 address of this device',
            type: 'integer',
            min: 1,
            max: 127
        },
        maxVersion: {
            description: 'Maximal supported RS485 interface version',
            enum: [0, 1, 2]
        },
        tickDelay: {
            description: 'delay between two ticks for the inner clock managing the token',
            type: 'integer'
        },
        qos: {
            description: 'quality of service used to send messages to the broker',
            enum: [0, 1, 2]
        },
        topics: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    description: { type: 'string' },
                    command: {
                        description: 'command character',
                        type: 'string',
                        minLength: '1',
                        maxLength: '1'
                    },
                    value: {
                        description: 'value of the serial message',
                        type: 'integer',
                        min: 0,
                        max: 65535
                    },
                    address: {
                        description: 'address the message is sent to',
                        type: 'integer',
                        min: 1,
                        max: 127
                    }
                },
                required: ['command', 'value', 'address']
            }
        },
        interfaces: {
            description: 'List of interfaces supporting command strings instead of values. The command strings are mapped to values based on this interface defintion',
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    description: { type: 'string' },
                    usedby: {
                        description: 'List of command characters supporting this interface',
                        type: 'array',
                        items: {
                            type: 'string',
                            minLength: '1',
                            maxLength: '1'
                        }
                    },
                    map: {
                        description: 'maps strings to interger values',
                        type: 'object',
                        additionalProperties: {
                            type: 'integer'
                        }
                    }
                },
                required: ['usedby', 'map'],
                additionalProperties: false
            }

        },
        settings: {
            type: 'object',
            additionalProperties: {
                type: 'string',
                propertyNames: { maxLength: 1 }
            }
        },
        status: {
            type: 'object',
            additionalProperties: {
                type: 'string',
                propertyNames: { maxLength: 1 }
            }
        },
        addresses: {
            type: 'object',
            additionalProperties: {
                type: 'integer',
                min: 1,
                max: 127
            }
        }
    },
    additionalProperties: false,
    required: ['serialPortName', 'baudrate', 'myAddress', 'maxVersion', 'tickDelay', 'qos', 'interfaces', 'settings', 'status', 'addresses']
}

const checkConfiguration = new CheckInput(ArduinoOptionsJSONSchema)

/**
 * Default values
 * @private
 */
const defaultConfiguration = {
    baudrate: 57600,
    myAddress: 1,
    maxVersion: 1,
    tickDelay: 100,
    qos: 1,
    interfaces: {
        LightOnOff: {
            description: 'Switches light on/off by setting the light on time in seconds',
            usedby: ['V'],
            map: {
                on: 3600,
                off: 0
            }
        }
    },
    settings: {
        A: 'Arduino base settings/device address',
        B: 'Light/light activation brightness',
        D: 'Light/evening brightness',
        G: 'Arduino base settings/reporting delay in seconds',
        H: 'Light/light full on voltage',
        I: 'Light/day brightness',
        J: 'Light/light full on brightness sensor value',
        K: 'Light/initial light on time in seconds',
        L: 'Light/increase light on time in seconds',
        M: 'Light/max light on time in seconds',
        N: 'Light/night brightness',
        O: 'Light/light start voltage',
        P: 'Light/dimming delay in milliseconds',
        Q: 'Light/run light adjustment',
        R: 'Roller shutter/Roller shutter key',
        S: 'Arduino base settings/router address',
        T: 'Roller shutter/Time to close roller',
        V: 'Light/light on time',
        W: 'Light/light false off time adjustment',
        X: 'switch/status',
        Z: 'Arduino base settings/software version'
    },
    status: {
        a: 'Arduino Status Information/internal communication state',
        b: 'Brightness Sensor/brightness in percent',
        c: 'Arduino clock/time of day in minutes',
        d: 'Arduino Status Information/debug information',
        e: 'Arduino Status Information/received error',
        h: 'Temperature and Humidity Sensor/humidity in percent',
        l: 'Light/light on time',
        m: 'Motion Sensor/detection state',
        n: 'Motion Sensor/detection state',
        o: 'window/detection state',
        p: 'Air pressure/air pressure in millibar',
        r: 'Temperature and Humidity Sensor/read error code',
        s: 'Arduino Status Information/internal temperature in celsius',
        t: 'Temperature and Humidity Sensor/temperature in celsius',
        v: 'Light/light voltage',
        w: 'Water leakage/detection state',
        y: 'Arduino Status Information/move controller state',
        z: 'Arduino Status Information/memory left in bytes'
    }
}

/**
 * @private
 * @description
 * Sanitizes the configuraiton options. Adds default values and checks the result against a JSON schema
 * @param {object} config configuration object to sanitize
 * @returns {Object} configuration
 */
function sanitizeConfiguration (config) {
    if (!types.isObject(config)) {
        errorLog('The active configuration is not an object, program stopped')
        process.exit(1)
    }
    config = sanitize(config, defaultConfiguration, checkConfiguration)
    return config
}

module.exports = sanitizeConfiguration
