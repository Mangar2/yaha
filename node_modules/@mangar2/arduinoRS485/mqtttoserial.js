/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */

'use strict'

const SerialMessage = require('./serialmessage')

/**
 * Converts mqtt messages to serial messages
 * @param {Object} options matching options
 * @param {Object} options.settings setting commands
 * @param {Object} options.status status commands
 * @param {Object} options.switches switching details
 * @param {Object} options.adresses location addresses
 * @param {integer} options.senderAddress sender address
 * @param {0|1} options.interfaceVersion version of the serial interface
 */
class MqttToSerial {
    constructor (options) {
        this._options = options
    }

    /**
     * Updates the receiver address of the message
     * @param {string} topic mqtt topic
     * @param {SerialMessage} serialMessage serial message to update
     * @private
     */
    _getReceiver (topic) {
        let result
        for (const address in this._options.adresses) {
            if (topic.startsWith(this._options.address[address])) {
                result = address
                break
            }
        }
        return result
    }

    /**
     * Updates the command of the message
     * @param {string} topic mqtt topic
     * @param {SerialMessage} serialMessage serial message to update
     * @private
     */
    _getCommand (topic, serialMessage) {
        let result
        for (const setting in this._options.settings) {
            if (topic.endsWith(this._options.settings[setting])) {
                result = setting
                break
            }
        }
        return result
    }

    toSerialMessage (mqttMessage) {
        const serialMessage = new SerialMessage()
        serialMessage.sender = this._options.senderAddress
        serialMessage.receiver = this._getReceiver(mqttMessage.topic)
        serialMessage.command = this._getCommand(mqttMessage.topic)
        serialMessage.value = mqttMessage.value
        serialMessage.version = this._options.interfaceVersion
        return serialMessage
    }
}

module.exports = MqttToSerial
