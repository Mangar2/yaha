/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */

'use strict'

const { types } = require('@mangar2/utils')
const { toHexString } = require('./hexstring')
const SerialMessage = require('./serialmessage')
const {
    MAX_ADDRESS
} = require('./constants')

class ReadMessage {
    constructor () {
        this._startIndex = 0
        this._byteArray = null
        this._result = []
    }

    /**
     * Detects noise (usually received '0') and skips it
     * @private
     */
    _skipNoise () {
        // The RS485 USB Adapter gets zeros from time to time, if nobody is sending.
        // Messages coming in starts with the sender address that may neither be zero nor > MAX_ADDRESS
        while (this._byteArray.length > this._startIndex &&
            (this._byteArray[this._startIndex] === 0 || this._byteArray[this._startIndex] > MAX_ADDRESS)) {
            this._startIndex++
        }
    }

    /**
     * Sets the package content from an array of bytes
     * @returns {SerialMessage|null} message read or null
     * @private
     */
    _readMessage () {
        this._clearError()
        this._skipNoise(this._byteArray)
        let messageRead = false
        try {
            if (types.isArray(this._byteArray) && this._byteArray.length > this._startIndex) {
                const message = new SerialMessage()
                message.setFromByteArray(this._byteArray, this._startIndex)
                const hex = toHexString(this._byteArray, this._startIndex, message.length)
                this._startIndex += message.length
                messageRead = true
                this._result.push({ message, hex, error: '' })
            }
        } catch (err) {
            const hex = toHexString(this._byteArray, this._startIndex, this._byteArray.length - this._startIndex)
            const error = err.message
            this._result.push({ message: null, hex, error })
        }
        return messageRead
    }

    /**
     * Reads messages from a serial stream and stores it to a message tree
     * @param that pointer to the class object
     * @param {Array} byteArray array of received bytes
     * @returns {SerialMessage[]} array of serial messages
     */
    readMessages (byteArray) {
        this._startIndex = 0
        this._byteArray = byteArray

        while (this._readMessage()) {
            // Nothing to do, read message stores the result in a list
        }

        return this._result
    }
}

module.exports = ReadMessage
