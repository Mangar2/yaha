/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */

'use strict'

const TestRun = require('@mangar2/testrun')
const ArdunioDNS = require('../arduinodns')
const Message = require('@mangar2/message')

const VERBOSE = true
const testrun = new TestRun(VERBOSE)

const options = {
    settings: {
        A: 'Arduino base settings/device address',
        B: 'Light/light activation brightness',
        D: 'Light/evening brightness',
        G: 'Arduino base settings/reporting delay in seconds',
        H: 'Light/light full on voltage',
        I: 'Light/day brightness',
        J: 'Light/light full on brightness sensor value',
        K: 'Light/initial light on time in seconds',
        L: 'Light/increase light on time in seconds',
        M: 'Light/max light on time in seconds',
        N: 'Light/night brightness',
        O: 'Light/light start voltage',
        P: 'Light/dimming delay in milliseconds',
        Q: 'Light/run light adjustment',
        R: 'Roller shutter/Roller shutter key',
        S: 'Arduino base settings/router address',
        T: 'Roller shutter/Time to close roller',
        V: 'Light/light on time',
        W: 'Light/light false off time adjustment',
        X: 'switch/status',
        Z: 'Arduino base settings/software version'
    },
    status: {
        a: 'Arduino Status Information/internal communication state',
        b: 'Brightness Sensor/brightness in percent',
        c: 'Arduino clock/time of day in minutes',
        d: 'Arduino Status Information/debug information',
        e: 'Arduino Status Information/received error',
        h: 'Temperature and Humidity Sensor/humidity in percent',
        l: 'Light/light on time',
        m: 'Motion Sensor/detection state',
        n: 'Motion Sensor/detection state',
        o: 'window/detection state',
        p: 'Air pressure/air pressure in millibar',
        r: 'Temperature and Humidity Sensor/read error code',
        s: 'Arduino Status Information/internal temperature in celsius',
        t: 'Temperature and Humidity Sensor/temperature in celsius',
        v: 'Light/light voltage',
        w: 'Water leakage/detection state',
        y: 'Arduino Status Information/move controller state',
        z: 'Arduino Status Information/memory left in bytes'
    },
    switches: {
        1: 'level/room/device/type1',
        2: 'level/room/device/type2',
        4: 'level/room/device/type3',
        8: 'level/room/device/type4',
        16: 'level/room/device/type5'
    },
    addresses: {
        11: 'level1/room1/device1/',
        12: 'level1/room1/device2/',
        13: 'level1/room2/device1/',
        14: 'level2/room1/device1/'
    },
    senderAddress: 1,
    interfaceVersion: 1
}

testrun.on('prepare', testcase => {
    const arduinoDNS = new ArdunioDNS(options)
    return arduinoDNS
})

const runTest = (test, arduinoDNS) => {
    const { topic, value } = test.message
    const message = new Message(topic, value)
    const result = arduinoDNS.toSerialMessage(message)
    return result
}

testrun.on('run', runTest)

testrun.on('break', (test, arduinoDNS) => {
    runTest(test, arduinoDNS)
})

testrun.on('validate', (test, message, path) => {
    let validate = true
    for (const property in test.expected) {
        const expectedValue = message[property]
        if (!testrun.unitTest.assertEqual(expectedValue, message[property], path + '/' + property)) {
            validate = false
        }
    }
    if (!validate) {
        console.log(message)
        testrun.runAgain()
    }
})

testrun.asyncRun(
    [
        'arduinodns/toserial'
    ],
    __dirname,
    6
)
