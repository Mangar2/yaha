/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */
'use strict'

const Message = require('@mangar2/message')
const EventHistory = require('../eventHistory')

module.exports = (unitTest) => {
    const eventHistory = new EventHistory()
    const now = new Date()
    const passed1 = new Date()
    passed1.setSeconds(passed1.getSeconds() - 4)
    const passed2 = new Date()
    passed2.setSeconds(passed2.getSeconds() - 10)

    const motion1 = new Message('/room1/motion', 1, 'motion detected', now)
    const motion2 = new Message('/room2/motion', 1, 'motion detected', now)
    const motion3 = new Message('/room1/motion', 1, 'motion detected', now)
    const motion4 = new Message('/room1/motion', 1, 'motion detected', new Date(0))
    const motion5 = new Message('/room3/motion', 1, 'motion detected', passed1)
    const motion6 = new Message('/room4/motion', 1, 'motion detected', passed2)
    eventHistory.addEvent(motion4)
    eventHistory.addEvent(motion5)
    eventHistory.addEvent(motion6)
    eventHistory.addEvent(motion1)
    eventHistory.addEvent(motion2)
    eventHistory.addEvent(motion3)

    const result = eventHistory.getLatestEvents()
    unitTest.assertEqual(Object.keys(result.motions).length, 3, 'motion history 1')
    unitTest.assertEqual(result.motions['/room1/motion'], now.getTime(), 'motion history 2')
    unitTest.assertEqual(result.motions['/room2/motion'], now.getTime(), 'motion history 3')
    unitTest.assertEqual(result.motions['/room3/motion'], passed1.getTime(), 'motion history 4')
    for (let i = 0; i < 10000; i++) {
        eventHistory.addEvent(new Message('/room1/motion' + i, 1, 'motion detected', new Date()))
    }
    const longList = eventHistory.getLatestEvents()
    unitTest.assertTrue(Object.keys(longList.motions).length <= 100)
}
