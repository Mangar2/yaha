/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */

'use strict'

const Rules = require('../rules')

module.exports = (unitTest) => {
    const rules = new Rules({
        rules: {
            noValue: {
                topic: 'room1/device1/set'
            },
            noTopicAndValue: {
            },
            checkString: {
                topic: 'a',
                value: 1,
                check: 'a'
            }
        }
    })
    unitTest.assertEqual(rules.invalidRules.length, 3, '')
    unitTest.assertEqual(rules.invalidRules[0].name, 'noValue')
    unitTest.assertEqual(rules.invalidRules[1].name, 'noTopicAndValue')
    unitTest.assertEqual(rules.invalidRules[2].name, 'checkString')
    unitTest.assertTrue(rules.invalidRules[0].messages.value, rules.invalidRules[0].messages.value)
    unitTest.assertTrue(rules.invalidRules[1].messages.topic, rules.invalidRules[1].messages.topic)
    unitTest.assertTrue(rules.invalidRules[1].messages.topic, rules.invalidRules[2].messages.check)
    for (const ruleInfo of rules.invalidRules) {
        unitTest.log('Error in rule ' + ruleInfo.name)
        for (const location in ruleInfo.messages) {
            unitTest.log('Error in ' + location + ': ' + ruleInfo.messages[location])
        }
        unitTest.log('')
    }
}
