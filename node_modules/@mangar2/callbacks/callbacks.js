/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 * @description
 * 2 Helper class to manage callbacks and safely call them.
 * @example
 * callbacks = new Callbacks(['publish'])
 * // register a callback
 * callbacks.on('publish', (param) => { console.log('called publish with ' + param) })
 * // invoke a callback
 * callbacks.invokeCallback('publish', 'a parameter')
 * ---------------------------------------------------------------------------------------------------
 */

'use strict'

module.exports = class Callbacks {
    /**
     * Creates a callback manager
     * @param {[string]} supportedEvents names of supported callbacks (if undefined or null, all
     * events are allowed).
     */
    constructor (supportedEvents) {
        this._supportedEvents = supportedEvents
        this._callbacks = {}
    }

    /**
     * Sets a callback.
     * @param {string} event event name (not case sensitive) for the callback
     * @param {function} callback(parameter)
     * @throws {Error} if the event is not supported
     * @throws {Error} if the callback is not 'function'
     */
    on (event, callback) {
        const eventLowerCase = event.toLowerCase()
        if (Array.isArray(this._supportedEvents) && !this._supportedEvents.includes(event)) {
            throw Error('event not supported: ' + event)
        }
        if (typeof (callback) === 'function') {
            this._callbacks[eventLowerCase] = callback
        } else {
            throw Error('tried to register a callback that is not a function: ' + event)
        }
    }

    /**
     * Callcs a callback stored to an event, if registered
     * @param {string} event event name (not case sensitive) for callback
     * @param  {...any} param parameters to pass to the callback
     * @throws {Error} if the event is not registered with "on"
     * @returns {any} the result of the callback or null, if the callback is not defined
     */
    invokeCallback (event, ...param) {
        const eventLowerCase = event.toLowerCase()
        if (this._callbacks[eventLowerCase] !== undefined) {
            return this._callbacks[eventLowerCase](...param)
        } else {
            // it is supported to call not registered callbacks
            return null
        }
    }

    /**
     * Callcs a callback stored to an event, if registered. It is the async version
     * @param {string} event event name (not case sensitive) for callback
     * @param  {...any} param parameters to pass to the callback
     * @throws {Error} if the event is not registered with "on"
     * @returns {any} the result of the callback or null, if the callback is not defined
     */
    async invokeCallbackAsync (event, ...param) {
        const eventLowerCase = event.toLowerCase()
        let result
        if (this._callbacks[eventLowerCase] !== undefined) {
            result = await this._callbacks[eventLowerCase](...param)
        } else {
            // it is supported to call not registered callbacks
            result = null
        }
        return result
    }
}
