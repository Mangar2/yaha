export = CheckInput;
/**
 * Creates a new JSON Schema validation class to validate a data object according to a JSON Schema.
 * Many thanks to epoberezkin/JSON-Schema-Test-Suite for providing a cool test suite.
 * I use it to check my implementation
 * This is not (yet) a complete implementation. The following tests are not running yet:
 * - remote-refs (neither local nor remote)
 * - unicode-code-points (EmacsScript length is used to get the lengt of  a string)
 * definitions
 * @param {Any} definition JSON schema definition
 * @param {Object} options schema validation options
 * @param {boolean} [options.deepUnique=true] if true, the content is checked deeply. For example different objects with the same
 * @param {boolean} [options.stringToNumber=false] if true, strings containing numbers are automatically  converted
 * @example
 * check = new CheckInput({
 *   type: 'object',
 *   properties: {
 *       topic: { type: 'string' },
 *       value: { type: 'string' },
 *   },
 *   required: ['topic', 'value']
 * })
 * // returns true, as the parameter fits to the descriptions
 * check.validate({ topic: '/a/b', value: 'on' })
 *
 * // returns false and fills the error message
 * // check.message is { topic: 'missing property topic', value: 'missing property value' }
 * check.validate ( {} )
 *
 * // Throws an Error, as the validation does not fits to the description
 * check.throwOnValidationError({ topic: '/a/b' })
 *
 * // Prints the error message
 * console.log(check.messages)
 */
declare class CheckInput {
    constructor(definition: any, options?: {});
    definition: any;
    set messages(arg: any);
    /**
     * @description Gets the list of error messages
     * @type {Object|string} error message tree
     */
    get messages(): any;

    /**
     * @description Checks an object against a swagger defintion
     * @param {Object} data data to check against definition
     * @returns {boolean} true, if the data matches to the definition else false
     */
    validate(data: any): boolean;
    /**
     * @description Validates the input and throws a message on error
     * @param {Object} data data to check against definition
     * @param {string} [message=''] starting string of the error message
     */
    throwOnValidationError(data: any, message?: string): void;
}
