/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */

'use scrict'

const CheckResult = require('./checkresult')

/**
 * @private
 * @description Checks a string format
 * @param {string} format string format description
 * @param {string} variable variable to check
 * @returns {CheckResult} result of the check
 */
function checkStringFormat (format, variable) {
    const result = new CheckResult(true)
    switch (format) {
    case 'date': result.check = variable.match(/^\d{4}-\d{2}-\d{2}$/) !== null; break
    case 'date-time': result.check = variable.match(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(.\d{3})?(Z|[+-]\d{2}:\d{2})$/) !== null; break
    }
    if (result.check === false) {
        result.invalidate("'" + variable + "' is not a " + format)
    }
    return result
}

/**
 * @private
 * @description Checks a string variable against a defintion
 * @param {Object} definition string definition
 * @param {string} variable input data
 * @returns {CheckResult} result of the check
 */
function checkString (definition, variable) {
    let result = new CheckResult(true)
    if (definition.minLength !== undefined && variable.length < definition.minLength) {
        result.invalidate("'" + variable + "' minimum length " + definition.minLength + ' not reached')
    } else if (definition.maxLength !== undefined && variable.length > definition.maxLength) {
        result.invalidate("'" + variable + "'  maximum length " + definition.maxLength + ' exceeded')
    } else if (definition.pattern !== undefined) {
        const regExp = new RegExp(definition.pattern)
        if (!regExp.test(variable)) {
            result.invalidate("'" + variable + "' does not match the pattern: '" + definition.pattern + "'")
        }
    } else if (definition.format !== undefined) {
        result = checkStringFormat(definition.format, variable)
    }
    return result
}

module.exports = checkString
