/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */

'use scrict'

/**
 * @private
 * Gets a schema definition by id
 * @param {string} id id to find
 * @param {Object} definitions subschema definitions ("definition part of the schema")
 */
function getSchemaById (id, definitions) {
    let result
    for (const property in definitions) {
        const definition = definitions[property]
        if (definition.$id === id) {
            result = definition
        }
    }
    return result
}

/**
 * @private
 * Retriefs a schema providing a local JSON path
 * @param {string} path path to the schema definition
 * @param {Object} definition Schema definition
 */
function getSchemaByPath (path, definition) {
    const pathChunks = path.split('/')
    pathChunks.shift()
    let result = definition
    for (let chunk of pathChunks) {
        const zeroSplit = chunk.split('~0')
        chunk = zeroSplit.join('~')
        const slashSplit = chunk.split('~1')
        chunk = slashSplit.join('/')
        chunk = unescape(chunk)
        if (result === undefined) {
            break
        }
        result = result[chunk]
    }
    return result
}

/**
 * @private
 * Resolves a ref string returning the right reference
 * @param {string} id id or path into the schema definition
 * @param {any} definitionRoot full schema definition
 * @returns {any} referenced part of the definition
 */
function resolveRef (id, definitionRoot) {
    const isLocal = id.charAt(0) === '#'
    const isPath = (id === '#' || id.charAt(1) === '/')
    let result

    if (isLocal && isPath) {
        result = getSchemaByPath(id, definitionRoot)
    } else if (isLocal) {
        const definitions = definitionRoot.$defs === undefined ? definitionRoot.definitions : definitionRoot.$defs
        result = getSchemaById(id, definitions)
    }

    return result
}

module.exports = resolveRef
