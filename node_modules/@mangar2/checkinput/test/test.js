/**
 * ---------------------------------------------------------------------------------------------------
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * File:      test.js
 *
 * Author:      Volker Böhm
 * Copyright:   Volker Böhm
 * ---------------------------------------------------------------------------------------------------
 */

'use scrict'

const CheckInput = require('@mangar2/checkInput')
const UnitTest = require('@mangar2/unittest')
let check

const unitTest = new UnitTest(false)

// Number
check = new CheckInput({ type: 'number', minimum: 0, maximum: 50 })
unitTest.assertTrue(check.validate(0))
unitTest.assertTrue(check.validate(5))
unitTest.assertTrue(check.validate(0x10))
unitTest.assertTrue(check.validate(50))
unitTest.assertFalse(check.validate(-1))
unitTest.assertFalse(check.validate(51))
unitTest.assertFalse(check.validate(50.001))
unitTest.assertFalse(check.validate(1234567890))
unitTest.assertFalse(check.validate('hello'))
unitTest.assertTrue(check.validate('5'), 'Numbers in strings')

// String
check = new CheckInput({ type: 'string', minLength: 0, maxLength: 10 })
unitTest.assertTrue(check.validate(''), 'empty string 1')
unitTest.assertTrue(check.validate(''), 'empty string 2')
unitTest.assertTrue(check.validate('hello'), 'hello')
unitTest.assertTrue(check.validate('1234567890'), 'ten digit string')
unitTest.assertFalse(check.validate('12345678901'))

// Date
check = new CheckInput({ type: 'string', format: 'date-time' })
unitTest.assertTrue(check.validate('2019-10-06T07:52:11.881Z'), ' check date format')
unitTest.assertFalse(check.validate('2019-10-06'), ' check date format')
unitTest.assertFalse(check.validate('.881'), ' check date format')
unitTest.assertFalse(check.validate('Z'), ' check date format')

// Object
check = new CheckInput({
    type: 'object',
    properties: {
        topic: { type: 'string' },
        value: { type: 'string' },
        reason: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    message: { type: 'string' },
                    timestamp: { type: 'string', format: 'date-time' }
                },
                required: ['message']
            }
        }
    },
    required: ['topic', 'value']
})

/**
 * Checks the structure of a subscribe and unsubscribe
 */
const check2 = new CheckInput({
    type: 'object',
    properties: {
        clientId: { type: 'string' },
        topics: { type: 'object' },
        subscribe: {
            type: 'object',
            properties: {
                QoS: { type: 'number', minimum: 0, maximum: 2 },
                topics: {
                    anyOf: [
                        { type: 'string' },
                        {
                            type: 'array',
                            items: { type: 'string' }
                        }
                    ]
                }
            }
        }
    },
    required: ['clientId']
})

// missing property
unitTest.assertFalse(check.validate({ reason: [{ message: 'hello', timestamp: '2019-10-05T07:52:11Z' }] }))

// Array expected
unitTest.assertFalse(check.validate({ topic: '/a/b', value: 'on', reason: { message: 'hello', timestamp: '2019-10-05T07:52:11Z' } }))

// Object expected
unitTest.assertFalse(check.validate({ topic: '/a/b', value: 'on', reason: ['hello'] }))

// false second element
unitTest.assertFalse(check.validate({ topic: '/a/b', value: 'on', reason: [{ message: 'hello', timestamp: '2019-10-05T07:52:11Z' }, { timestamp: 'hello' }] }))

// correct
var result = check.validate({ topic: '/a/b', value: 'on', reason: [{ message: 'hello', timestamp: '2019-10-05T07:52:11Z' }] })
unitTest.assertTrue(result, 'check1 ' + JSON.stringify(check.messages))

// correct
result = check2.validate({ clientId: '/a/b', subscribe: { QoS: 1, topics: ['topic1', 'topic2', 'topic32'] } })
unitTest.assertEqual(result, true, 'check2: ' + JSON.stringify(check2.messages))

// not correct
result = check2.validate({ clientId: '/a/b', subscribe: { QoS: 1, topics: [5, 'topic1', 'topic2', 'topic32'] } })
unitTest.assertEqual(result, false, 'check2: ' + JSON.stringify(check2.messages))

unitTest.showResult(26)
