/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */

/**
 * @private
 */
const fs = require('fs')
const types = require('@mangar2/types')

/**
 * @description
 * Gets the command line parameters as object (Key/value)
 * @param {Array} whiteList list of supported arguments
 * @returns {Object} object with key/value
 */
function getCommandLineParameters (whiteList = ['env']) {
    const result = {}
    const args = [...process.argv]
    let argName
    // remove executable and file
    args.shift()
    args.shift()
    if (types.isString(args[0]) && !args[0].startsWith('--')) {
        result.configFileName = args.shift()
    }
    for (const argument of args) {
        if (argument.startsWith('--')) {
            argName = argument.substring(2)
            result[argName] = ''
        } else if (types.isString(argName) && whiteList.includes(argName)) {
            result[argName] = argument
        }
    }
    return result
}

/**
 * @private
 * Searches a file in the current directory and then up the path to the root directory
 * with maximal 5 steps up
 * @param {string} name name of the file (without directory)
 */
function findFile (name) {
    const MAX_LEVEL = 5
    let result
    if (fs.existsSync('./' + name)) {
        result = './' + name
    } else {
        let dir = ''
        for (let level = 1; level < MAX_LEVEL; level++) {
            dir = dir + '../'
            if (fs.existsSync(dir + name)) {
                result = dir + name
                break
            }
        }
    }
    return result
}

/**
 * @private
 * Reads a configuration file and returns the content.
 * If "filePathAndName" is specified and the file exists, it will read this file
 * Else it will search for the file with "defaultName" in the current directory and then
 * 5 levels in parent directories.
 * @param {string} defaultName default configuration file name
 * @param {string} [filePathAndName] filename including path to the configuration file name
 */
function readConfigFile (defaultName, filePathAndName) {
    if (!types.isString(filePathAndName)) {
        filePathAndName = findFile(defaultName)
    }
    if (!types.isString(filePathAndName)) {
        throw Error('Configuration file ' + defaultName + ' not found')
    }
    if (!fs.existsSync(filePathAndName)) {
        throw Error('Configuration file ' + filePathAndName + ' does not exist')
    }
    const configBuffer = fs.readFileSync(filePathAndName)
    const result = JSON.parse(configBuffer)
    return result
}

/**
 * @description Gets the current environment name
 * 1. if --env or --environment is specified as parameter it takes the parameter value
 * 2. Else if NODE_ENV is specified it takes the os environment variable value
 * 3. Else the default 'development' is selected
 * @param {Array} [whiteList] provides a white list of supported environments.
 * @returns environment name. The environment name is limited to a white list.
 */
function getEnvironment (whiteList = ['development', 'production', 'test', 'staging']) {
    let environment
    const parameters = getCommandLineParameters()
    if (types.isString(parameters.env)) {
        environment = parameters.env
    } else if (types.isString(parameters.environment)) {
        environment = parameters.environment
    } else if (types.isString(process.env.NODE_ENV)) {
        environment = process.env.NODE_ENV
    } else {
        environment = 'development'
    }
    if (!whiteList.includes(environment)) {
        environment = 'production'
    }
    return environment
}

/**
 * Select the right configuration from a configuration object based on the current environment setting
 * @param {Object} configuration configuration object for different environments
 */
function selectConfiguration (configuration) {
    const environment = getEnvironment()
    if (!types.isObject(configuration[environment])) {
        throw Error('Configuration file does not include an environment of name: ' + environment)
    }
    return configuration[environment]
}

/**
 * Reads the current configuration from a file
 * If the file name is specified as command line parameter (first parameter) this file is read
 * If the file name is not specified, it will read the default file from the current directory or
 * up to 5 levels in parent directories
 * Then it returns the active configuration, default is 'development' from the configuration file
 * The active configuration is either specified by parameter ('--env' or '--environment') or set in
 * 'NODE_ENV'
 * @param {string} defaultName default configuration file name
 */
function readConfiguration (defaultName) {
    const parameters = getCommandLineParameters()
    const filePathAndName = parameters.configFileName
    const configuration = readConfigFile(defaultName, filePathAndName)
    return selectConfiguration(configuration)
}

module.exports = { readConfiguration, selectConfiguration, getEnvironment, getCommandLineParameters }
