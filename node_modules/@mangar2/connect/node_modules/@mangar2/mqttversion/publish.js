/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */

'use strict'

/**
 * @private
 * @description Standard header components for application/json messages
 */
var standardHeaderJSON = {
    'content-type': 'application/json; charset=UTF-8',
    accept: 'application/json,text/plain',
    'accept-charset': 'UTF-8'
}

/**
 * @private
 * @description Publishes to a client
 * @param {string} token connection token
 * @param {Object} message
 * @param {number} qos quality of service (0,1,2)
 * @param {number} dup duplicate flag 1 (true) or 0 (false). Identifies duplicate packages
 * @param {number} retain flag 1 (true) or 0 (false). Requrests to retain the message
 * @param {number} packetid unique id of the package
 * @returns {Object} {headers, payload, resultCheck(result)}
 */
const publish = {
    '0.0': (token, message, qos, dup, retain, packetid) => {
        const payload = message
        const headers = { ...standardHeaderJSON, qos, version: '0.0' }
        if (packetid !== undefined) {
            headers.id = packetid
        }

        const resultCheck = (result) => {
            return Number(qos) === 0 || (
                result.statusCode === 200 &&
                    result.headers['content-type'].startsWith('text/plain') &&
                    result.payload === 'puback' &&
                    Number(result.headers.id) === packetid
            )
        }

        return { headers, payload, resultCheck }
    },

    '1.0': (token, message, qos, dup, retain, packetid) => {
        const payload = { token, message }
        const headers = { ...standardHeaderJSON, qos, dup, retain, version: '1.0' }
        if (packetid !== undefined) {
            headers.packetid = packetid
        }

        const resultCheck = (result) => {
            let success
            const statusOk = result.statusCode === 204
            const packetIdMatches = Number(result.headers.packetid) === packetid
            const packet = result.headers.packet
            switch (qos) {
            case 0: success = true; break
            case 1: success = statusOk && packet === 'puback' && packetIdMatches; break
            case 2: success = statusOk && packet === 'pubrec' && packetIdMatches; break
            default: success = true // invalid qos, should not happen
            }
            return success
        }
        return { headers, payload, resultCheck }
    }
}

/**
 * @private
 * @description creates the return types for a receive message
 * @param {Object} headers input headers
 * @returns {Object} {headers, payload, statusCode, packetid}
 */
const onPublish = {
    '0.0':
        headers => {
            const version = '0.0'
            const result = {
                headers: { 'content-type': 'text/plain; charset=UTF-8', version },
                payload: 'puback',
                statusCode: 200,
                packetid: headers.id
            }
            if (headers.id !== undefined) {
                result.headers.id = headers.id
            }
            return result
        },
    '1.0':
        headers => {
            const version = '1.0'
            const qos = Number(headers.qos)
            const result = {
                headers: { 'content-type': 'application/json; charset=UTF-8', version },
                payload: '',
                statusCode: 204,
                packetid: headers.packetid
            }
            if (qos === 1) { result.headers.packet = 'puback' }
            if (qos === 2) { result.headers.packet = 'pubrec' }
            if (headers.packetid !== undefined) {
                result.headers.packetid = headers.packetid
            }
            return result
        }
}

module.exports = { publish, onPublish }
