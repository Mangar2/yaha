/**
 * ---------------------------------------------------------------------------------------------------
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * File:        test.js
 * Purpouse:    test file for httpclient
 *
 * Author:      Volker Böhm
 * Copyright:   Volker Böhm
 * Version:     1.0
 * ---------------------------------------------------------------------------------------------------
 */

 'use strict'

 const Connect = require("@mangar2/connect");
 const UnitTest = require("@mangar2/unittest");
 const Broker = require("@mangar2/broker");

var unitTest = new UnitTest(true);

const brokerConfig =  {       
    development: {
        broker : {
            "port": 9001,
            persistInterval: 0
        },
        connections: {
            inFlightWindow: 1,
            timeoutInMilliseconds: 10000,
            maxRetryCount: 10,
            maxQueueSize: 1000,
            directory: ".",
            fileName: "broker",
            log: [
                {
                    module: "received",
                    topic: "/system/broker/#"
                }
            ]
        }
    }
}

let broker = new Broker(brokerConfig);


(async function test() {    
    let result;
    broker.run();
    const CLEAN = true;
    // Test connect
    let connect = new Connect("/connect/test", "127.0.0.1", 9001, 9002);
    result = await connect.connect(CLEAN).catch(reason => console.log(reason));
    unitTest.assertTrue(connect.isConnected, "successful connected");
    unitTest.assertEqual(result.present, 0, "No connection present");
    // Test disconnect
    await connect.disconnect().catch(reason => console.log(reason));
    unitTest.assertTrue(!connect.isConnected, "disconnected");
    // Test having an old connection (clean = false)
    await connect.connect(!CLEAN).catch(reason => console.log(reason));
    await connect.disconnect().catch(reason => console.log(reason));
    result = await connect.connect(!CLEAN).catch(reason => console.log(reason));
    unitTest.assertEqual(result.present, 1, "Connection is present");
    // Test subscribe
    result = await connect.subscribe({"/a/a": 0, "/a/1": 1, "/a/2": 2, "b/b": 1});
    unitTest.assertEqual(JSON.stringify(result), '{"QoS":[0,1,2,1]}', "subscribe with the right QoS" );
    // Test unsubscribe
    result = await connect.unsubscribe(["/a/a", "/a/1", "/a/2", "b/b"]);
    broker.close();
    unitTest.showResult(5);
})();

