/**
 * ---------------------------------------------------------------------------------------------------
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * File:        MessageQueueEntry.js
 * Purpouse:    Slot of a queue holding a message to transmit
 *
 * Author:      Volker Böhm
 * Copyright:   Volker Böhm
 * Version:     1.0
 * ---------------------------------------------------------------------------------------------------
 */

'use strict'

module.exports = class MessageQueueEntry {
    /**
     *
     * @param {Number} QoS quality of service (0, 1 or 2)
     * @param {any} payload
     */
    constructor (qos = 0, payload = {}) {
        // Quality of service to transmit the payload
        this.qos = qos
        // Any payload
        this.payload = payload
        // Unique packetid to identify the entry (optional)
        this.packetid = undefined
        // Timestamp the payload was transmitted
        this.transmitTimestamp = 0
        // Status of the entry
        this.status = 'new'
        // Amount of retries to transmit the playload
        this.retryCount = 0
    }

    /**
     * @returns {object} the payload of the message
     */
    get payload () { return this._payload }

    /**
     * @returns {number} positive integer, packet packetidentifier
     */
    get packetid () { return this._packetid }

    /**
     * @returns {number} 0,1 or 2: mqtt quality of service
     */
    get qos () { return this._qos }

    /**
     * @returns {0|1} 1 signals that it is a duplicate (has been send before)
     */
    get dup () { return this.retryCount > 1 ? 1 : 0 }

    /**
     * @returns {string} id of the client
     */
    get clientId () { return this._clientId }

    /**
     * @returns {string} status of the entry {new, duplicate, pubrel}
     */
    get status () { return this._status }

    /**
     * @param {object} payload payload of the entry
     */
    set payload (payload) { this._payload = payload }

    /**
     * @param {string} packetid id of the transfer packet
     */
    set packetid (packetid) { this._packetid = packetid }

    /**
     * @param {string|number} qos quality of service (0, 1, 2)
     */
    set qos (qos) {
        this._qos = Number(qos)
        if (this._qos !== 1 && this._qos !== 2) {
            this._qos = 0
        }
    }

    /**
     * @param {boolean|string|number} dup duplicate flag (true/false or 1/0 or '1'/'0')
     */
    set dup (dup) {
        this._dup = dup === true || dup === 'true' || dup === 1 || dup === '1' ? 1 : 0
    }

    /**
     * @param {string} clientId id of the client
     */
    set clientId (clientId) { this._clientId = clientId }

    /**
     * @param {string} status new status {new, sent, duplicate, pubrel}
     */
    set status (status) { this._status = status }

    /**
     * Gets the interface version of the entry
     */
    get version () { return this._version }

    /**
     * @param {string} version of the interface to use 'major.minor'
     */
    set version (version) { this._version = version }

    /**
     * Restore the object by setting all properties (usually from a file)
     * @param {object} properties object with all needed properties of this class.
     */
    restoreFromObject (properties) {
        for (const property in properties) {
            this[property] = properties[property]
        }
    }

    /**
     * Sets infos of the client
     * @param {string} clientId id of the client
     * @param {string} host host name of the client
     * @param {number} port port number of the client
     * @param {string} version client interface version
     * @param {string} token token clients may check receiving published messages
     */
    setClientInfo (clientId, host, port, version, token) {
        this.clientId = clientId
        this.host = host
        this.port = port
        this.version = version
        this.token = token
    }

    /**
     * Sets the status to pubrel
     */
    setStatusToPubrel () {
        this.status = 'pubrel'
        this.retryCount = 0
    }

    /**
     * increases the retry counter and stores the actual timestamp
     */
    setTransmissionTimestamp () {
        const now = (new Date()).getTime()
        this.transmitTimestamp = now
        this.retryCount++
    }

    /**
     * Checks, if the status is pubrel
     * @returns {boolean}
     */
    isStatusPubrel () {
        return this.status === 'pubrel'
    }

    /**
     * Gets the link to send the message to (/publish or /pubrel)
     * @returns {string} link
     */
    get link () {
        if (this.status === 'pubrel') {
            return '/pubrel'
        } else {
            return '/publish'
        }
    }
}
