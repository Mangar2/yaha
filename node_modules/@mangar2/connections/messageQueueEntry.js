/**
 * ---------------------------------------------------------------------------------------------------
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * File:        MessageQueueEntry.js
 * Purpouse:    Slot of a queue holding a message to transmit
 *
 * Author:      Volker BÃ¶hm
 * Copyright:   Volker BÃ¶hm
 * Version:     1.0
 * ---------------------------------------------------------------------------------------------------
 */

'use strict'
const assert = require("assert");

module.exports = class MessageQueueEntry {
    /**
     * 
     * @param {Number} QoS quality of service (0, 1 or 2)
     * @param {any} payload
     */
    constructor(qos = 0, payload = {}) {
        assert((qos >= 0 && qos <= 2), "qos must be a number 0,1 or 2");
        // Quality of service to transmit the payload
        this.qos = qos;
        // Any payload
        this.payload = payload;
        // Unique packetid to identify the entry (optional)
        this.packetid = undefined;
        // Timestamp the payload was transmitted
        this.transmitTimestamp = 0;
        // Status of the entry
        this.status = "new";
        // Amount of retries to transmit the playload
        this.retryCount = 0;
    }

    /**
     * Restore the object by setting all properties (usually from a file)
     * @param {object} properties object with all needed properties of this class.
     */
    restoreFromObject(properties) {
        for (let property in properties) {
            this[property] = properties[property];
        } 
    }

    /**
     * Sets infos of the client
     * @param {string} host host name of the client
     * @param {number} port port number of the client
     * @param {string} version client interface version
     * @param {string} token token clients may check receiving published messages
     */
    setClientInfo(clientId, host, port, version, token) {
        this.clientId = clientId;
        this.host = host;
        this.port = port;
        this.version = version;
        this.token = token;
    }

    /**
     * Sets the status of the message
     * @param {string} status new status
     */
    setStatus(status) {
        this.status = status;
    }

    /**
     * Sets the identifier for the entry
     * @param {Number} packetid unique entry identifier
     */
    setId(packetid) {
        this.packetid = packetid;
    }

    /**
     * Sets the status to pubrel
     */
    setPubrel() {
        this.status = "pubrel";
        this.retryCount = 0;
    }

    /**
     * increases the retry counter and stores the actual timestamp
     */
    setTransmissionTimestamp() {
        let now = (new Date()).getTime();
        this.transmitTimestamp = now;
        this.retryCount++;
    }

    /**
     * Gets the payload to be transmitted
     * @returns {object}
     */
    getPayload() { return this.payload; }
    
    /**
     * Gets the packetid
     * @returns {number} positive integer, packet packetidentifier
     */
    getPacketid() { return this.packetid; }

    /**
     * Gets the quality of service
     * @returns {0|1|2} mqtt quality of service
     */
    getQoS() { return this.qos; }
    
    /**
     * Gets the duplicate flag
     * @returns {0|1} 1 signals that it has been send before
     */
    getDup() { return this.retryCount > 1 ? 1 : 0; }

    /**
     * Checks, if the status is pubrel
     * @returns {boolean}
     */
    isPubrel() {
        return this.status === "pubrel";
    }

    /**
     * Gets the link to send the message to (/publish or /pubrel)
     * @returns {string} link 
     */
    getLink() {
        if (this.status === "pubrel") {
            return "/pubrel";
        } else {
            return "/publish";
        }
    }

}