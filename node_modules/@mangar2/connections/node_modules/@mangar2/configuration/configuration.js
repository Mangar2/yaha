/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 * @overview Provides a function to sanitize configuration file input and to provide default values
 */

'use strict'

const types = require('@mangar2/types')

/**
 * @private
 * @description
 * Merge properties from 'merge', if not allready provided in 'target'
 * It only merges the properties of objects and not for example of arrays
 * @param {Object} target Object to merge properties to
 * @param {Object} merge Object with properties to merge
 */
function deepMergeRec (target, merge) {
    const mergeIsObject = types.isObject(merge)
    if (types.isUndefined(target) && mergeIsObject) {
        target = {}
    }
    if (types.isObject(target) && mergeIsObject) {
        for (const mergeProperty in merge) {
            const defaultValue = merge[mergeProperty]
            const targetValue = target[mergeProperty]
            if (types.isObject(defaultValue)) {
                target[mergeProperty] = deepMergeRec(targetValue, defaultValue)
            } else if (types.isUndefined(targetValue)) {
                target[mergeProperty] = defaultValue
            }
        }
    }
    return target
}

/**
 * Sanitizes configuration input and merges it with default values, if not provided in configuration
 * @param {Object} configuration provided configuration (from configuration file), the function
 * changes this object directly, you may ignore the return value
 * @param {Object} defaultValues configuration subset with default values
 * @param {CheckInput} checkInput check function to sanitize the configuration.
 * Please set all attributes as mandatory, they get optional by providing default values
 * @returns {Object} merged configuration in provided configuration object
 * @example
 * const configuration = { one: 'one', two: 'not two' }
 * const defaultValues = { two: 'two', three: 3 }
 * const checkInput = new CheckInput({
 *     type: 'object',
 *     properties: {
 *         one: { type: 'string' },
 *         two: { type: 'string' },
 *         three: { type: 'number' }
 *     },
 *     required: ['one', 'two', 'trhee']
 * })
 * configuration = sanitize(configuration, defaultValues, checkInput)
 * // configuration is now { one: 'one', two: 'not two', three: 3 }
 */

function sanitize (configuration, defaultValues, checkInput) {
    const result = deepMergeRec(configuration, defaultValues)
    checkInput.throwOnValidationError(result, 'Error in configuration parameter: ')
    return result
}

module.exports = sanitize
