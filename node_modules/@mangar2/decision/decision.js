/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */

'use strict'

const types = require('@mangar2/types')
const Callbacks = require('@mangar2/callbacks')

/**
 * Creates a result object
 * @property {Date|string|number|boolean} value evaluation value
 * @property {string} reason value reason in human readable form
 */
class EvalResult {
    constructor (value, reason = '') {
        this.value = value
        this.reason = reason
        this.variables = {}
    }

    /**
     * Gets the value
     * @returns {Date|string|number|boolean}
     */
    get value () { return this._value }

    /**
     * Sets the value
     * @param {Date|string|number|boolean}  value
     */
    set value (value) { this._value = value }

    /**
     * Gets the reason
     * @returns {string}
     */
    get reason () { return this._reason }

    /**
     * Sets the reason
     * @param {string} reason
     */
    set reason (reason) { this._reason = reason }

    /**
     * Gets a list of missing variables found
     * @returns {string[]} array of missing variables
     */
    get variables () { return this._variables }

    /**
     * Sets the list of missing variables found
     * @param {stirng[]} variables list of variables missing
     */
    set variables (variables) { this._variables = variables }

    /**
     * Adds the result of an And node evaluation
     * @param {EvalResult} nodeResult result of a node evaluation
     */
    addAnd (nodeResult) {
        this.value = this.value && nodeResult.value
        if (this.value) {
            this.reason = this.reason === '' ? nodeResult.reason : this.reason + ' and ' + nodeResult.reason
        } else {
            this.reason = nodeResult.reason
        }
    }

    /**
     * Adds the result of an Or node evaluation
     * @param {EvalResult} nodeResult result of a node evaluation
     */
    addOr (nodeResult) {
        this.value = this.value || nodeResult.value
        if (this.value) {
            this.reason = nodeResult.reason
        } else {
            this.reason = this.reason === '' ? nodeResult.reason : this.reason + ' or ' + nodeResult.reason
        }
    }
}

/**
 * Creates a value class providing the ability to evalutate a json based value. Additionally it explains the
 * value in a juman readable string. Supported operations are
 * {or: []}
 * {and: []}
 * {operator, variable, value} with operators '>', '<', '>=', '<=', '!=', '='
 * {variable}
 * {variable ...[map]} where map is an array of variable value maps. Example ['a':1, 'b':2] maps a to 1 and b to 2
 * {function, parameter: []} where function is registrated by a call to 'on'
 * The value tree supports:
 * @param {Object} [variables={}] list of known variables and values
 * @throws {Error} if variables are not an object
 * @example
 * const variables = {
 *    'a/b': 1,
 *    'b/c': 2,
 *    'system/presence': 'awake'
 * }
 * const value = new Decision(variables)
 * const result = value.decide(
 *      [
 *           'and',
 *           ['or', ['below', 'a/b', 10], ['below', 'b/c', 2]],
 *           ['or', ['above or equal', 'a/b', 10], ['above or equal', 'b/c', 2]]
 *       ]
 * )
 * // returns result.value = true and result.reason = 'a/b (1) is below 10 and b/c (2) is above or equal 2'
 */
class Decision {
    constructor (variables = {}) {
        if (!types.isObject(variables)) {
            throw Error('variables parameter must be of type object')
        }
        this._callbacks = new Callbacks()
        this.variables = variables
        this._usedVariables = {}
    }

    /**
     * @private
     * Set the environment variables
     * @param {Object} variables list of known variables and values
     */
    set variables (variables) {
        this._variables = {}
        for (const variable in variables) {
            this._variables[variable.toLowerCase()] = variables[variable]
        }
    }

    /**
     * Sets a callback.
     * @param {string} event event name (not case sensitive) for the callback
     * @param {function} callback(parameter)
     * @throws {Error} if the callback is not 'function'
     */
    on (event, callback) {
        this._callbacks.on(event, callback)
    }

    /**
     * Generates a string containing all undefined variables
     * @returns {string} empty string, if no variable is undefined, else string listing all undefined variables
     */
    _genUndefinedVariablesString () {
        let result = ''
        let spacer = 'false, undefined variables: '
        for (const name in this._usedVariables) {
            if (this._usedVariables[name] === undefined) {
                result = result + spacer + name
                spacer = ', '
            }
        }
        return result
    }

    /**
     * Calculates a value based on a json based json tree
     * @param {Object} jsonTree json structured boolean logic
     * @throws {Error} on any error in the jsonTree
     * @returns {EvalResult} result of the evaluation
     */
    eval (jsonTree) {
        if (!types.isObject(jsonTree) && !types.isArray(jsonTree)) {
            throw Error('check parameter must be an object ' + types.getType() + ' provided')
        }
        this._usedVariables = {}
        const result = this._evalNodeRec(jsonTree)
        const undefinedVariablesString = this._genUndefinedVariablesString()
        if (undefinedVariablesString !== '') {
            result.value = false
            result.reason = undefinedVariablesString
        }
        result.variables = this._usedVariables
        return result
    }

    /**
     * @private
     * Evaluates a json tree recursively
     * @param {Object} jsonNode node in a json tree
     * @throws {Error} on any error in the jsonNode
     * @returns {EvalResult} result of the evaluation
     */
    _evalNodeRec (jsonNode) {
        let result = new EvalResult(false, 'error')
        if (types.isArray(jsonNode)) {
            if (jsonNode.length === 0) {
                throw Error('empty arrays are not allowed')
            }
            if (jsonNode.length === 1) {
                result.value = jsonNode[0]
                result.result = jsonNode[0]
            } else {
                const copyNode = [...jsonNode]
                const operator = copyNode.shift()
                switch (operator) {
                case 'and': result = this._evalAnd(copyNode); break
                case 'or': result = this._evalOr(copyNode); break
                case 'switch': result = this._evalSwitch(copyNode); break
                case 'call': result = this._evalFunction(copyNode); break
                case '-':
                case '+': result = this._evalOperator(operator, copyNode); break
                default: result = this._evalCompOperator(operator, copyNode)
                }
            }
        } else if (types.isNumber(jsonNode)) {
            result = new EvalResult(jsonNode, jsonNode)
        } else if (types.isString(jsonNode)) {
            result = this._evalVariable(jsonNode)
        } else if (jsonNode === true) {
            result.value = true
            result.reason = 'constant true'
        } else if (jsonNode === false) {
            result.value = false
            result.reason = 'constant false'
        } else {
            throw Error('Array, Number, Boolean or String expected: ' + JSON.stringify(jsonNode))
        }
        return result
    }

    /**
     * @private
     * Evaluates function node
     * @param {Object} jsonNode variable node of the json tree
     * @throws {Error} on any error in the jsonNode
     * @returns {EvalResult} result of the evaluation
     */
    _evalFunction (jsonNode) {
        const result = new EvalResult(false)
        const name = jsonNode[0]
        jsonNode.shift()
        if (!types.isString(name)) {
            throw Error('Called function names must be of type string: ' + JSON.stringify(name))
        }
        if (!this._callbacks.hasCallback(name)) {
            throw Error('Called unknown function: ' + name)
        }
        result.value = this._callbacks.invokeCallback(name, ...jsonNode)
        result.reason = name + '(' + jsonNode.join(', ') + ') returned ' + result.value
        if (!types.isBoolean(result.value)) {
            result.value = false
        }
        return result
    }

    /**
     * @private
     * Evaluates a node containing a variable - either boolean or number
     * @param {string} variable variable name
     * @returns {EvalResult} variable value
     */
    _evalVariable (variable) {
        const result = new EvalResult(variable, variable)
        // Variables must include a '/' (else it is not a variable but only a string)
        if (variable.includes('/')) {
            let value = this._variables[variable.toLowerCase()]
            // Do not modify the variable itself in the calculation
            if (types.getType(value) === 'Date') {
                value = new Date(value)
            }
            result.value = (value !== undefined ? value : false)
            this._reportVariable(value, variable)
            if (types.getType(value) === 'Date') {
                value = value.toLocaleTimeString()
            }
            result.reason = variable + ' (' + value + ')'
        }
        return result
    }

    /**
     * @private
     * Evaluates a node containing a compare operator
     * @param {string} operator operator string
     * @param {Array} jsonNode operands
     * @throws {Error} on any error in the jsonNode
     * @returns {EvalResult} result of the evaluation
     */
    _evalCompOperator (operator, jsonNode) {
        let result = new EvalResult(false)
        if (jsonNode.length !== 2) {
            throw Error('term array needs three elements' + JSON.stringify([operator, ...jsonNode]))
        }
        const first = this._evalNodeRec(jsonNode[0])
        const second = this._evalNodeRec(jsonNode[1])
        result = this._compareValue(operator, first, second)

        return result
    }

    /**
     * Adds or subtracts two numbers or a number (minutes) from a date
     * @param {string} operator operator symbol '+' or '-'
     * @param {number|date} operand1 first operand
     * @param {number} operand2 second operand
     * @returns {EvalResult} result of the calculation
     */
    _calculate (operator, operand1, operand2) {
        const result = new EvalResult(operand1.value)
        let valueStr = ''
        if (types.getType(operand1.value) === 'Date') {
            if (operator === '-') {
                result.value.setMinutes(result.value.getMinutes() - operand2.value)
            } else if (operator === '+') {
                result.value.setMinutes(result.value.getMinutes() + operand2.value)
            }
            valueStr = result.value.toLocaleTimeString()
        } else if (types.isNumber(operand1.value)) {
            if (operator === '-') {
                result.value -= operand2.value
            } else if (operator === '+') {
                result.value += operand2.value
            }
            valueStr = result.value
        }
        result.reason = valueStr + ' (' + operand1.reason + ' ' + operator + ' ' + operand2.reason + ')'
        return result
    }

    /**
     * @private
     * Evaluates a node containing an operator (+/-)
     * @param {string} operator operator string
     * @param {Array} jsonNode operands
     * @throws {Error} on any error in the jsonNode
     * @returns {EvalResult} result of the evaluation
     */
    _evalOperator (operator, jsonNode) {
        if (jsonNode.length !== 2) {
            throw Error('operator array needs exactly three elements' + JSON.stringify(jsonNode))
        }
        const operand1 = this._evalNodeRec(jsonNode[0])
        const operand2 = this._evalNodeRec(jsonNode[1])
        if (!types.isNumber(Number(operand2.value))) {
            throw Error(operand2.value + ' is not a number (' + JSON.stringify(jsonNode) + ')')
        }
        if (!types.isNumber(operand1.value) && !types.getType(operand1.value) === 'Date') {
            throw Error(operand1.value + ' is not a number or a date (' + JSON.stringify(jsonNode) + ')')
        }
        const result = this._calculate(operator, operand1, operand2)

        return result
    }

    /**
     * @private
     * calulates an and operation
     * @param {Object} jsonNode And node of the json tree
     * @returns {EvalResult} result of the evaluation
     */
    _evalAnd (jsonNode) {
        const result = new EvalResult(true)
        for (const element of jsonNode) {
            const nodeResult = this._evalNodeRec(element)
            if (result.value) {
                result.addAnd(nodeResult)
            }
        }
        return result
    }

    /**
     * @private
     * calulates an or operation
     * @param {Object} jsonNode node of the json tree
     * @returns {EvalResult} result of the evaluation
     */
    _evalOr (jsonNode) {
        const result = new EvalResult(false)
        for (const element of jsonNode) {
            const nodeResult = this._evalNodeRec(element)
            if (!result.value) {
                result.addOr(nodeResult)
            }
        }
        return result
    }

    /**
     * @private
     * calulates a case expression
     * @param {Object} jsonNode node of the json tree
     * @throws {Error} on any error in the jsonNode
     * @returns {EvalResult} result of the evaluation
     */
    _evalSwitch (jsonNode) {
        if (jsonNode.length !== 2) {
            throw Error('case construct needs exactly three elements' + JSON.stringify(jsonNode))
        }
        const result = new EvalResult(false)
        const map = jsonNode[1]
        const expression = this._evalNodeRec(jsonNode[0])
        let mapped = map[expression.value]
        if (mapped === undefined && map.default) {
            mapped = map.default
        }
        result.value = mapped
        result.reason = expression.reason + ' mapped to ' + mapped
        return result
    }

    /**
     * @private
     * Reports missing variables and once the variable is found
     * @param {any} variableValue value of the variable
     * @param {string} variableName name of the variable
     */
    _reportVariable (variableValue, variableName) {
        this._usedVariables[variableName] = variableValue
    }

    /**
     * @private
     * checks, that variable and compare are numbers
     * @param {any} variable variable
     * @param {any} compare value to compare
     * @throws {Error} if variable or compare is not a number or a date
     */
    _checkForNumber (variable, compare) {
        if (isNaN(variable) && types.getType(variable) !== 'Date') {
            throw Error('first operand value "' + variable + '" is not a number')
        }
        if (isNaN(compare) && types.getType(compare) !== 'Date') {
            throw Error('second operand value "' + compare + '" is not a number')
        }
    }

    /**
     * @private
     * Compares to values according an operator
     * @param {string} operator compare operator ("<", ">", "above", "below", "greaterOrEqual", "lessOrEqual", "equal")
     * @param {Object} operand1 {value, variable} first element to compare with
     * @param {Object} operand2 {value, variable} second element to compare with
     * @throws {Error} on any error in operator or operands
     * @returns {EvalResult} result of the operation
     */
    _compareValue (operator, operand1, operand2) {
        const operand1Value = operand1.value
        const operand2Value = operand2.value
        const result = new EvalResult(false, operand1.reason)
        if (!types.isString(operator)) {
            throw Error('operator must be of type string "' + operator + '" provided')
        }
        if (operand1Value !== undefined && operand2Value !== undefined) {
            switch (operator.toLowerCase().trim()) {
            case '=':
            case 'equal':
            case 'equals':
                result.value = operand1Value === operand2Value
                result.reason += result.value ? ' is equal to ' : ' is different to '
                result.reason += operand2.reason
                break
            case '!=':
            case '<>':
            case 'not equal':
            case 'not equals':
                result.value = operand1Value !== operand2Value
                result.reason += result.value ? ' is not equal to ' : ' is not different to '
                result.reason += operand2.reason
                break
            case '<':
            case 'below':
            case 'less':
                this._checkForNumber(operand1Value, operand2Value)
                result.value = operand1Value < operand2Value
                result.reason += result.value ? ' is below ' : ' is not below '
                result.reason += operand2.reason
                break
            case '>':
            case 'above':
            case 'greater':
                this._checkForNumber(operand1Value, operand2Value)
                result.value = operand1Value > operand2Value
                result.reason += result.value ? ' is above ' : ' is not above '
                result.reason += operand2.reason
                break
            case '<=':
            case 'below or equal':
            case 'less or equal':
                this._checkForNumber(operand1Value, operand2Value)
                result.value = operand1Value <= operand2Value
                result.reason += result.value ? ' is below or equal ' : ' is not below or equal '
                result.reason += operand2.reason
                break
            case '>=':
            case 'above or equal':
            case 'greater or equal':
                this._checkForNumber(operand1Value, operand2Value)
                result.value = operand1Value >= operand2Value
                result.reason += result.value ? ' is above or equal ' : ' is not above or equal '
                result.reason += operand2.reason
                break
            default:
                throw Error('unknown operator ' + operator)
            }
        }
        return result
    }
}

module.exports = Decision
