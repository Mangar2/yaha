/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */

'use strict'

const types = require('@mangar2/types')
const Callbacks = require('@mangar2/callbacks')

/**
 * Creates a decision result object
 * @property {boolean} decision boolean decision
 * @property {string} reason decision reason in human readable form
 */
class DecisionResult {
    constructor (decision, reason = '') {
        this.decision = decision
        this.reason = reason
        this.variables = {}
    }

    /**
     * Gets the decision (true/false)
     * @returns {boolean}
     */
    get decision () { return this._decision }

    /**
     * Sets the decision (true/false)
     * @param {boolean} decision
     */
    set decision (decision) { this._decision = decision }

    /**
     * Gets the reason
     * @returns {string}
     */
    get reason () { return this._reason }

    /**
     * Sets the reason
     * @param {string} reason
     */
    set reason (reason) { this._reason = reason }

    /**
     * Gets a list of missing variables found
     * @returns {string[]} array of missing variables
     */
    get variables () { return this._variables }

    /**
     * Sets the list of missing variables found
     * @param {stirng[]} variables list of variables missing
     */
    set variables (variables) { this._variables = variables }

    /**
     * Adds the result of an And node evaluation
     * @param {DecisionResult} nodeResult result of a node evaluation
     */
    addAnd (nodeResult) {
        this.decision = this.decision && nodeResult.decision
        if (this.decision) {
            this.reason = this.reason === '' ? nodeResult.reason : this.reason + ' and ' + nodeResult.reason
        } else {
            this.reason = nodeResult.reason
        }
    }

    /**
     * Adds the result of an Or node evaluation
     * @param {DecisionResult} nodeResult result of a node evaluation
     */
    addOr (nodeResult) {
        this.decision = this.decision || nodeResult.decision
        if (this.decision) {
            this.reason = nodeResult.reason
        } else {
            this.reason = this.reason === '' ? nodeResult.reason : this.reason + ' or ' + nodeResult.reason
        }
    }
}

/**
 * Creates a decision class providing the ability to evalutate a json based decision. Additionally it explains the
 * decision in a juman readable string. Supported operations are
 * {or: []}
 * {and: []}
 * {operator, variable, value} with operators '>', '<', '>=', '<=', '!=', '='
 * {variable}
 * {variable ...[map]} where map is an array of variable value maps. Example ['a':1, 'b':2] maps a to 1 and b to 2
 * {function, parameter: []} where function is registrated by a call to 'on'
 * The decision tree supports:
 * @param {Object} variables list of known variables and values
 * @example
 * const variables = {
 *    'a/b': 1,
 *   'b/c': 2,
 *   'system/presence': 'awake'
 * }
 * const decision = new Decision(variables)
 * const result = decision.decide({
 *       and: [{
 *           operator: 'below',
 *           operands: ['a/b', 16]
 *       },
 *       {
 *           operator: 'above',
 *           operands: [
 *               'b/c'
 *               value: {
 *                   variable: 'system/presence',
 *                   map: {
 *                       absent: 1,
 *                       awake: 2,
 *                       sleeping: 3
 *                   }
 *              }
 *           ]
 *       }]
 * })
 * // returns result.decision = false and result.reason = 'b/c (2) is not above 2'
 */
class Decision {
    constructor (variables) {
        if (!types.isObject(variables)) {
            throw 'variables not defined'
        }
        this._callbacks = new Callbacks()
        this.variables = variables
        this._usedVariables = {}

    }

    /**
     * @private
     * Set the environment variables to calculate decision
     * @param {Object} variables list of known variables and values
     */
    set variables (variables) {
        this._variables = {}
        for (const variable in variables) {
            this._variables[variable.toLowerCase()] = variables[variable]
        }
    }

    /**
     * Sets a callback.
     * @param {string} event event name (not case sensitive) for the callback
     * @param {function} callback(parameter)
     * @throws {Error} if the callback is not 'function'
     */
    on (event, callback) {
        this._callbacks.on(event, callback)
    }

    /**
     * Calculates a decision based on a json based decision tree
     * @param {Object} jsonTree json structured boolean logic
     * @returns {DecisionResult} result of the decision
     */
    decide (jsonTree) {
        if (!types.isObject(jsonTree) && !types.isArray(jsonTree)) {
            throw Error('check parameter must be an object ' + types.getType() + ' provided')
        }
        this._usedVariables = {}
        const result = this._evalNodeRec(jsonTree)
        result.variables = this._usedVariables
        return result
    }

    /**
     * @private
     * Evaluates a decision tree recursively
     * @param {Object} jsonNode node in a decision tree
     * @returns {DecisionResult} result of the decision
     */
    _evalNodeRec (jsonNode) {
        let ruleAmount = 0
        let result = new DecisionResult(false, 'error')
        if (types.isArray(jsonNode)) {
            const operator = jsonNode[0]
            switch (operator) {
            case 'and': result = this._evalAnd(jsonNode); break
            case 'or': result = this._evalOr(jsonNode); break
            default: result = this._evalOperator(jsonNode)
            }
        } else {
            if (jsonNode.variable !== undefined) {
                ruleAmount++
                result = this._evalVariable(jsonNode)
            }
            if (jsonNode.function !== undefined) {
                ruleAmount++
                result = this._evalFunction(jsonNode)
            }
            if (ruleAmount === 0) {
                result.reason = 'no rules to check'
            }
            if (ruleAmount > 1) {
                throw Error('multiple operations in a node ' + JSON.stringify(jsonNode))
            }
        }
        return result
    }

    /**
     * @private
     * Evaluates function node
     * @param {Object} jsonNode variable node of the decision tree
     * @returns {DecisionResult} result of the decision
     */
    _evalFunction (jsonNode) {
        const result = new DecisionResult(false)
        const { function: name, parameter } = jsonNode
        if (types.isString(name)) {
            if (!types.isArray(parameter)) {
                throw Error('functions require a parameter property with an array of parameters ' + JSON.stringify(jsonNode))
            }
            result.decision = this._callbacks.invokeCallback(name, ...parameter)
            result.reason = name + '(' + parameter.join(', ') + ') returned ' + result.decision
            if (!types.isBoolean(result.decision)) {
                result.decision = false
            }
        }
        return result
    }

    /**
     * @private
     * Evaluates a node containing a variable - either boolean or number
     * @param {Object} jsonNode variable node of the decision tree
     * @returns {DecisionResult} variable value
     */
    _evalVariable (jsonNode) {
        const result = new DecisionResult(false)
        const variable = jsonNode.variable
        const variableValue = this._variables[variable.toLowerCase()]
        this._reportVariable(variableValue, variable)
        result.decision =
            (types.isBoolean(variableValue) && variableValue === true) ||
            (types.isNumber(variableValue) && variableValue !== 0)
        result.reason = variable + ' is ' + result.decision ? 'true' : 'false'
        return result
    }

    /**
     * @private
     * Evaluates a node containing an operator
     * @param {Object} jsonNode operator node of the decision tree
     * @returns {DecisionResult} result of the decision
     */
    _evalOperator (jsonNode) {
        let result = new DecisionResult(false)
        const operator = jsonNode[0]
        if (jsonNode.length !== 3) {
            throw Error('term array needs exactly three elements' + JSON.stringify(jsonNode))
        }
        const first = this._getValue(jsonNode[1])
        const second = this._getValue(jsonNode[2])
        result = this._compareValue(operator, first, second)

        return result
    }

    /**
     * @private
     * calulates an and operation
     * @param {Object} jsonNode And node of the decision tree
     * @returns {DecisionResult} result of the decision
     */
    _evalAnd (jsonNode) {
        const result = new DecisionResult(true)
        const elements = [...jsonNode]
        elements.shift()
        for (const element of elements) {
            const nodeResult = this._evalNodeRec(element)
            if (result.decision) {
                result.addAnd(nodeResult)
            }
        }
        return result
    }

    /**
     * @private
     * calulates an or operation
     * @param {Object} jsonNode node of the decision tree
     * @returns {DecisionResult} result of the decision
     */
    _evalOr (jsonNode) {
        const result = new DecisionResult(false)
        const elements = [...jsonNode]
        elements.shift()
        for (const element of elements) {
            const nodeResult = this._evalNodeRec(element)
            if (!result.decision) {
                result.addOr(nodeResult)
            }
        }
        return result
    }

    /**
     * @private
     * Reports missing variables and once the variable is found
     * @param {any} variableValue value of the variable
     * @param {string} variableName name of the variable
     */
    _reportVariable (variableValue, variableName) {
        this._usedVariables[variableName] = variableValue
    }

    /**
     * Gets the value from a variable
     * @param {string} variableName name of the variable to get value from
     * @returns {string|number} value of the variable
     */
    _getValueFromVariable (variableName) {
        const result = this._variables[variableName.toLowerCase()]
        this._reportVariable(result, variableName)
        return result
    }

    /**
     * Gets the result of a simple expression. It is only supports Date-Variable +/- valueInMinutes
     * @param {string} expr expresion to evaluate
     * @returns {string|number} value of the expression
     */
    _evalExpression (expr) {
        const token = expr.split(/(-|\+)/)
            .map(s => s.trim())
            .filter(s => s !== '')
        const value = this._getValueFromVariable(token[0])
        if (types.getType(value) === 'Date' && token.length === 3) {
            const operand2 = Number(token[2])
            if (types.isNumber(operand2)) {
                if (token[1] === '-') {
                    value.setMinutes(value.getMinutes() - operand2)
                } else if (token[1] === '+') {
                    value.setMinutes(value.getMinutes() + operand2)
                }
            }
        }
        return value
    }

    /**
     * @private
     * Gets a value (stored in the value property) from an element
     * @param {Object} element object with "value" property containing a value
     * @throws {Error} if variable is undefined or not availabe
     * @returns {Object} object with two elements: value and - if available variable (name of the variable)
     */
    _getValue (element) {
        const result = { value: undefined, variable: undefined }
        if (element === undefined) {
            throw Error('missing value ' + JSON.stringify(element))
        }
        const valueObject = element.value ? element.value : element
        if (types.isObject(valueObject)) {
            result.variable = valueObject.variable
            if (result.variable === undefined) {
                throw Error('value object without variable property ' + JSON.stringify(element))
            }
            result.value = this._evalExpression(result.variable)
            if (valueObject.map !== undefined && result.value !== undefined) {
                const map = valueObject.map[result.value]
                if (map === undefined) {
                    throw Error('error mapping variable: ' + result.variable + ' map[' + result.value + '] is undefined')
                }
                result.value = map
            }
        } else {
            result.value = valueObject
            if (types.isString(result.value)) {
                result.variable = result.value
                result.value = this._evalExpression(result.variable)
            }
        }
        if (!types.isString(result.value) && !types.isNumber(result.value) && !types.isBoolean(result.value) && !types.getType() === 'Date') {
            throw Error('value must be of type string, number or boolean (' + types.getType() + ') ' + result.value)
        }
        return result
    }

    /**
     * @private
     * checks, that variable and compare are numbers
     * @param {any} variable variable
     * @param {any} compare value to compare
     * @throws {error}
     */
    _checkForNumber (variable, compare) {
        if (isNaN(variable) && types.getType(variable) !== 'Date') {
            throw Error('first operand value "' + variable + '" is not a number')
        }
        if (isNaN(compare) && types.getType(compare) !== 'Date') {
            throw Error('second operand value "' + compare + '" is not a number')
        }
    }

    /**
     * Creates a string describing a value
     * @param {string|number|Date} value value of the variable
     * @param {string} [variableName] name of the variable to describe
     * @returns {string} description of the value
     */
    _describeValue (value, variableName) {
        if (types.getType(value) === 'Date') {
            value = value.toLocaleTimeString()
        }
        const result = variableName ? variableName + ' (' + value + ')' : value
        return result
    }

    /**
     * @private
     * Compares to values according an operator
     * @param {string} operator compare operator ("<", ">", "above", "below", "greaterOrEqual", "lessOrEqual", "equal")
     * @param {Object} operand1 {value, variable} first element to compare with
     * @param {Object} operand2 {value, variable} second element to compare with
     * @returns {DecisionResult} result of the operation
     */
    _compareValue (operator, operand1, operand2) {
        const operand1Value = operand1.value
        const operand2Value = operand2.value
        const operand1String = this._describeValue(operand1.value, operand1.variable)
        const operand2String = this._describeValue(operand2.value, operand2.variable)
        const result = new DecisionResult(false, operand1String)
        if (!types.isString(operator)) {
            throw Error('operator must be of type string "' + operator + '" provided')
        }
        if (operand1Value !== undefined && operand2Value !== undefined) {
            switch (operator.toLowerCase().trim()) {
            case '=':
            case 'equal':
            case 'equals':
                result.decision = operand1Value === operand2Value
                result.reason += result.decision ? ' is equal to ' : ' is different to '
                result.reason += operand2String
                break
            case '!=':
            case '<>':
            case 'not equal':
            case 'not equals':
                result.decision = operand1Value !== operand2Value
                result.reason += result.decision ? ' is not equal to ' : ' is not different to '
                result.reason += operand2String
                break
            case '<':
            case 'below':
            case 'less':
                this._checkForNumber(operand1Value, operand2Value)
                result.decision = operand1Value < operand2Value
                result.reason += result.decision ? ' is below ' : ' is not below '
                result.reason += operand2String
                break
            case '>':
            case 'above':
            case 'greater':
                this._checkForNumber(operand1Value, operand2Value)
                result.decision = operand1Value > operand2Value
                result.reason += result.decision ? ' is above ' : ' is not above '
                result.reason += operand2String
                break
            case '<=':
            case 'below or equal':
            case 'less or equal':
                this._checkForNumber(operand1Value, operand2Value)
                result.decision = operand1Value <= operand2Value
                result.reason += result.decision ? ' is below or equal ' : ' is not below or equal '
                result.reason += operand2String
                break
            case '>=':
            case 'above or equal':
            case 'greater or equal':
                this._checkForNumber(operand1Value, operand2Value)
                result.decision = operand1Value >= operand2Value
                result.reason += result.decision ? ' is above or equal ' : ' is not above or equal '
                result.reason += operand2String
                break
            default:
                throw Error('unknown operator ' + operator)
            }
        }
        return result
    }
}

module.exports = Decision
