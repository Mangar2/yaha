/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */

'use strict'

const types = require('@mangar2/types')
const Callbacks = require('@mangar2/callbacks')

/**
 * Creates a decision result object
 * @property {boolean} decision boolean decision
 * @property {string} reason decision reason in human readable form
 */
class DecisionResult {
    constructor (decision, reason = '') {
        this.decision = decision
        this.reason = reason
    }

    /**
     * Gets the decision (true/false)
     * @returns {boolean}
     */
    get decision () { return this._decision }

    /**
     * Sets the decision (true/false)
     * @param {boolean} decision
     */
    set decision (decision) { this._decision = decision }

    /**
     * Gets the reason
     * @returns {string}
     */
    get reason () { return this._reason }

    /**
     * Sets the reason
     * @param {string} reason
     */
    set reason (reason) { this._reason = reason }

    /**
     * Adds the result of an And node evaluation
     * @param {DecisionResult} nodeResult result of a node evaluation
     */
    addAnd (nodeResult) {
        this.decision = this.decision && nodeResult.decision
        if (this.decision) {
            this.reason = this.reason === '' ? nodeResult.reason : this.reason + ' and ' + nodeResult.reason
        } else {
            this.reason = nodeResult.reason
        }
    }

    /**
     * Adds the result of an Or node evaluation
     * @param {DecisionResult} nodeResult result of a node evaluation
     */
    addOr (nodeResult) {
        this.decision = this.decision || nodeResult.decision
        if (this.decision) {
            this.reason = nodeResult.reason
        } else {
            this.reason = this.reason === '' ? nodeResult.reason : this.reason + ' or ' + nodeResult.reason
        }
    }
}

/**
 * Creates a decision class providing the ability to evalutate a json based decision. Additionally it explains the
 * decision in a juman readable string. Supported operations are
 * {or: []}
 * {and: []}
 * {operator, variable, value} with operators '>', '<', '>=', '<=', '!=', '='
 * {variable}
 * {variable ...[map]} where map is an array of variable value maps. Example ['a':1, 'b':2] maps a to 1 and b to 2
 * {function, parameter: []} where function is registrated by a call to 'on'
 * The decision tree supports:
 * @param {Object} variables list of known variables and values
 * @example
 * const variables = {
 *    'a/b': 1,
 *   'b/c': 2,
 *   'system/presence': 'awake'
 * }
 * const decision = new Decision(variables)
 * const result = decision.decide({
 *       and: [{
 *           variable: 'a/b',
 *           operator: 'below',
 *           value: 16
 *       },
 *       {
 *           variable: 'b/c',
 *           operator: 'above',
 *           value: {
 *               variable: 'system/presence',
 *               absent: 1,
 *               awake: 2,
 *               sleeping: 3
 *           }
 *       }]
 * })
 * // returns result.decision = false and result.reason = 'b/c (2) is not above 2'
 */
class Decision {
    constructor (variables) {
        if (!types.isObject(variables)) {
            throw 'variables not defined'
        }
        this._reportedVariables = {}
        this._callbacks = new Callbacks()
        this._variables = variables
    }

    /**
     * Sets a callback.
     * @param {string} event event name (not case sensitive) for the callback
     * @param {function} callback(parameter)
     * @throws {Error} if the callback is not 'function'
     */
    on (event, callback) {
        this._callbacks.on(event, callback)
    }

    /**
     * Calculates a decision based on a json based decision tree
     * @param {Object} jsonTree json structured boolean logic
     * @returns {DecisionResult} result of the decision
     */
    decide (jsonTree) {
        if (!types.isObject(jsonTree)) {
            throw Error('jsonTree must be defined')
        }
        const result = this._evalNodeRec(jsonTree)
        if (types.isString(result.reason)) {
            result.reason = 'Reason: ' + result.reason
        }
        return result
    }

    /**
     * @private
     * Evaluates a decision tree recursively
     * @param {Object} jsonNode node in a decision tree
     * @returns {DecisionResult} result of the decision
     */
    _evalNodeRec (jsonNode) {
        let ruleAmount = 0
        let result = new DecisionResult(false, 'error')
        if (jsonNode.and !== undefined) {
            ruleAmount++
            result = this._evalAnd(jsonNode.and)
        }
        if (jsonNode.or !== undefined) {
            ruleAmount++
            result = this._evalOr(jsonNode.or)
        }
        if (jsonNode.operator !== undefined) {
            ruleAmount++
            result = this._evalOperator(jsonNode)
        } else if (jsonNode.variable !== undefined) {
            ruleAmount++
            result = this._evalVariable(jsonNode)
        }
        if (jsonNode.function !== undefined) {
            ruleAmount++
            result = this._evalFunction(jsonNode)
        }
        if (ruleAmount === 0) {
            result.reason = 'no rules to check'
        }
        if (ruleAmount > 1) {
            throw Error('multiple operations in a node ' + JSON.stringify(jsonNode))
        }
        return result
    }

    /**
     * @private
     * Evaluates function node
     * @param {Object} jsonNode variable node of the decision tree
     * @returns {DecisionResult} result of the decision
     */
    _evalFunction (jsonNode) {
        const result = new DecisionResult(false)
        const { function: name, parameter } = jsonNode
        if (types.isString(name)) {
            if (!types.isArray(parameter)) {
                throw Error('functions require a parameter property with an array of parameters ' + JSON.stringify(jsonNode))
            }
            result.decision = this._callbacks.invokeCallback(name, ...parameter)
            result.reason = name + '(' + parameter.join(', ') + ') returned ' + result.decision
            if (!types.isBoolean(result.decision)) {
                result.decision = false
            }
        }
        return result
    }

    /**
     * @private
     * Evaluates a node containing a variable - either boolean or number
     * @param {Object} jsonNode variable node of the decision tree
     * @returns {DecisionResult} variable value
     */
    _evalVariable (jsonNode) {
        const result = new DecisionResult(false)
        const variable = jsonNode.variable
        const variableValue = this._variables[variable]
        this._reportVariable(variableValue, variable)
        result.decision =
            (types.isBoolean(variableValue) && variableValue === true) ||
            (types.isNumber(variableValue) && variableValue !== 0)
        result.reason = variable + ' is ' + result.decision ? 'true' : 'false'
        return result
    }

    /**
     * @private
     * Evaluates a node containing an operator
     * @param {Object} jsonNode operator node of the decision tree
     * @returns {DecisionResult} result of the decision
     */
    _evalOperator (jsonNode) {
        let result = new DecisionResult(false)
        const { variable, operator } = jsonNode
        if (variable !== undefined) {
            const variableValue = this._variables[variable]
            const compareValue = this._getValue(jsonNode)
            this._reportVariable(variableValue, variable)
            result = this._compareValue(operator, variable, variableValue, compareValue)
        }

        return result
    }

    /**
     * @private
     * calulates an and operation
     * @param {Object} jsonNode And node of the decision tree
     * @returns {DecisionResult} result of the decision
     */
    _evalAnd (jsonNode) {
        let result = new DecisionResult(true)

        if (!types.isArray(jsonNode)) {
            result = this._evalNodeRec(jsonNode)
        } else {
            for (const element of jsonNode) {
                const nodeResult = this._evalNodeRec(element)
                result.addAnd(nodeResult)
                if (!result.decision) {
                    break
                }
            }
        }
        return result
    }

    /**
     * @private
     * calulates an or operation
     * @param {Object} jsonNode node of the decision tree
     * @returns {DecisionResult} result of the decision
     */
    _evalOr (jsonNode) {
        let result = new DecisionResult(false)

        if (!types.isArray(jsonNode)) {
            result = this._evalNodeRec(jsonNode)
        } else {
            for (const element of jsonNode) {
                const nodeResult = this._evalNodeRec(element)
                result.addOr(nodeResult)
                if (result.decision) {
                    break
                }
            }
        }
        return result
    }

    /**
     * @private
     * Reports missing variables and once the variable is found
     * @param {any} variableValue value of the variable
     * @param {string} variableName name of the variable
     */
    _reportVariable (variableValue, variableName) {
        if (variableValue !== undefined) {
            if (this._reportedVariables[variableName] !== undefined) {
                this._reportedVariables[variableName] = undefined
                console.log('%s variable %s is now availabe, value %s', (new Date()).toLocaleString(), variableName, variableValue)
            }
        } else {
            // report missing variable only once
            if (this._reportedVariables[variableName] === undefined) {
                this._reportedVariables[variableName] = 'error'
                console.log('%s variable %s is undefined', (new Date()).toLocaleString(), variableName)
            }
        }
    }

    /**
     * @private
     * Gets a value (stored in the value property) from an element
     * @param {Object} element object with "value" property containing a value
     * @returns {Object|string|number} value value of the element
     */
    _getValue (element) {
        let value
        if (element.value === undefined) {
            throw Error('missing value to compare ' + JSON.stringify(element))
        }
        if (types.isObject(element.value)) {
            const variable = element.value.variable
            if (variable === undefined) {
                throw Error('value object without variable property ' + JSON.stringify(element.value))
            }
            const variableValue = this._variables[variable]
            if (variableValue === undefined) {
                throw Error('unknown variable ' + variable)
            }
            value = element.value[variableValue]
            if (value === undefined) {
                throw Error(' variable value ' + variableValue + ' not found in ' + JSON.stringify(element.value))
            }
        } else {
            value = element.value
        }
        if (!types.isString(value) && !types.isNumber(value) && !types.isBoolean(value)) {
            throw Error('value must be of type string, number or boolean ' + value)
        }
        return value
    }

    /**
     * @private
     * checks, that variable and compare are numbers
     * @param {any} variable variable
     * @param {any} compare value to compare
     * @throws {error}
     */
    _checkForNumber (variable, compare) {
        if (isNaN(variable)) {
            throw Error('variable value is not a number ' + variable)
        }
        if (isNaN(compare)) {
            throw Error('compare value is not a number' + compare)
        }
    }

    /**
     * @private
     * Compares to values according an operator
     * @param {string} operator compare operator ("<", ">", "above", "below", "greaterOrEqual", "lessOrEqual", "equal")
     * @param {number} variableName name of the variable
     * @param {number} variableValue value of the variable
     * @param {number} compareValue value to compare to
     * @returns {DecisionResult} result of the operation
     */
    _compareValue (operator, variableName, variableValue, compareValue) {
        const result = new DecisionResult(false, variableName + ' (' + variableValue + ')')
        const variable = types.isString(variableValue) ? Number(variableValue) : variableValue
        const compare = types.isString(compareValue) ? Number(compareValue) : compareValue

        switch (operator.toLowerCase().trim()) {
        case '=':
        case 'equal':
        case 'equals':
            result.decision = variable === compare
            result.reason += result.decision ? ' is equal to ' : ' is different to '
            result.reason += compareValue
            break
        case '!=':
        case '<>':
        case 'not equal':
        case 'not equals':
            result.decision = variable !== compare
            result.reason += result.decision ? ' is not equal to ' : ' is not different to '
            result.reason += compareValue
            break
        case '<':
        case 'below':
        case 'less':
            this._checkForNumber(variable, compare)
            result.decision = variable < compare
            result.reason += result.decision ? ' is below ' : ' is not below '
            result.reason += compareValue
            break
        case '>':
        case 'above':
        case 'greater':
            this._checkForNumber(variable, compare)
            result.decision = variable > compare
            result.reason += result.decision ? ' is above ' : ' is not above '
            result.reason += compareValue
            break
        case '<=':
        case 'below or equal':
        case 'less or equal':
            this._checkForNumber(variable, compare)
            result.decision = variable <= compare
            result.reason += result.decision ? ' is below or equal ' : ' is not below or equal '
            result.reason += compareValue
            break
        case '>=':
        case 'above or equal':
        case 'greater or equal':
            this._checkForNumber(variable, compare)
            result.decision = variable >= compare
            result.reason += result.decision ? ' is above or equal ' : ' is not above or equal '
            result.reason += compareValue
            break
        default:
            throw Error('unknown operator ' + operator)
        }
        return result
    }
}

module.exports = Decision
