/**
 * ---------------------------------------------------------------------------------------------------
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * File:      devices.js
 *
 * Author:      Volker Böhm
 * Copyright:   Volker Böhm
 * ---------------------------------------------------------------------------------------------------
 */

'use strict'

/**
  * Gets a object of devices by "attributeName"
  * @param {object} devices list of devices
  * @param {string} attributeName name of the attribute to use as index
  * @param {string} link link to current device node
  * @returns {object} devices indexed by the attribute "attributeName"
  */
function getDevicesByAttribute (devices, attributeName, link) {
    var results = {}
    if (typeof devices === 'object') {
        for (const key in devices) {
            const device = devices[key]
            const curAttribute = device[attributeName]
            if (curAttribute !== undefined) {
                device.link = link
                results[curAttribute] = device
            }
        }
    }
    return results
}

/**
 * processes all devices of a tree recursively
 * @param {object} curNode current device node
 * @param {string} attributeName name of the attribute to use as index
 * @param {string} link link to current device node
 */
function getDevicesRec (curNode, attributeName, link) {
    var resultRec = {}
    if (typeof curNode === 'object') {
        for (const key in curNode) {
            if (key === 'devices') {
                const devices = getDevicesByAttribute(curNode.devices, attributeName, link)
                resultRec = { ...resultRec, ...devices }
            } else {
                const childNode = curNode[key]
                const childLink = link + '/' + key
                const devices = getDevicesRec(childNode, attributeName, childLink)
                resultRec = { ...resultRec, ...devices }
            }
        }
    }
    return resultRec
}

class Devices {
    constructor (config) {
        this._config = config
        this._cache = {}
    }

    /**
     * @callback iterateCallback
     * @param {string} element attribute value
     * @param {object} device device data
     */

    /**
     * Iterates through all configured devices
     * @param {string} attributeName name of the attribute to look for
     * @param {iterateCallback} callback function called for each topic
     */
    iterate (attributeName, callback) {
        if (this._cache[attributeName] === undefined) {
            this._cache[attributeName] = getDevicesRec(this._config, attributeName, '')
        }
        for (const element in this._cache[attributeName]) {
            const device = this._cache[attributeName][element]
            callback(element, device)
        }
    }

    /**
     * Maps a topic to a device
     * @param {string} topic topic to search for
     * @returns {object} device info object
     */
    topicToDevice (topic) {
        return this.attributeToDevice('topic', topic)
    }

    /**
     * Maps an attribute to a device
     * @param {string} attributeName name of the attribute to look foor
     * @param {string} attributeValue value of the attribute
     * @returns {object} device info object
     */
    attributeToDevice (attributeName, attributeValue) {
        if (this._cache[attributeName] === undefined) {
            this._cache[attributeName] = getDevicesRec(this._config, attributeName, '')
        }
        const map = this._cache[attributeName]
        if (Object.entries(map).length === 0) {
            throw Error('unknwon attribute name ')
        }
        const result = map[attributeValue]
        if (result === undefined) {
            throw Error('unknwon attribute ' + attributeValue)
        }
        return result
    }
}

module.exports = Devices
