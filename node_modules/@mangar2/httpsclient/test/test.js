/**
 * ---------------------------------------------------------------------------------------------------
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * File:        test.js
 * Purpouse:    test file for httpclient
 *
 * Author:      Volker Böhm
 * Copyright:   Volker Böhm
 * Version:     1.0
 * ---------------------------------------------------------------------------------------------------
 */

 'use strict'

 const HttpClient = require("@mangar2/httpsclient");
 const HttpServer = require('@mangar2/httpsserver');
 const errorLog = require('@mangar2/errorlog');
 const shutdown = require("@mangar2/shutdown");
 
 let client = new HttpClient("127.0.0.1", 9001);


let server = new HttpServer(9001);

server.on('put', (payload, headers, path, res) => {
    console.log('put received');
    console.log(payload);
    console.log(headers);
    console.log(path);
    res.writeHead(200, {'Content-Type': 'text/plain'});
    res.end("put");
});

server.on('get', (payload, headers, path, res) => {
    console.log('get received');
    console.log(payload);
    console.log(headers);
    console.log(path);
    res.writeHead(200, {'Content-Type': 'text/plain'});
    res.end("get");
});

server.on('post', (payload, headers, path, res) => {
    console.log('post received');
    console.log(payload);
    console.log(headers);
    console.log(path);
    res.writeHead(200, {'Content-Type': 'text/plain'});
    res.end("post");
});

server.on('delete', (payload, headers, path, res) => {
    console.log('put received');
    console.log(payload);
    console.log(headers);
    console.log(path);
    res.writeHead(200, {'Content-Type': 'text/plain'});
    res.end("delete");
});

server.on('patch', (payload, headers, path, res) => {
    console.log('patch received');
    console.log(payload);
    console.log(headers);
    console.log(path);
    res.writeHead(200, {'Content-Type': 'text/plain'});
    res.end("put");
});

server.listen();


 // Success, if http server is started too
(async () => {
    let header = {'Content-Type': 'application/json', packetId: 1, mqttpacket: "publish"};
    let result = await client.send("/clients", "GET", "test", header).catch(err => {
        errorLog(err);
        process.exit(1);
    });
    console.log(result);
    console.log("success");
    process.exit(0);
})();

shutdown(async () => {
    await client.close();
    await client2.close();
    await server.close();
    process.exit(0);
});