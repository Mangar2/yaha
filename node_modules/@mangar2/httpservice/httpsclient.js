
/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */

'use strict'

const http = require('https')
const Client = require('./client')

/**
 * @description
 * Class simplifying access to the node http service for http clients
 * @param {string} host host name or ip address
 * @param {string|number} port port number
 * @example
 * const client = new HTTPSClient('myhost', 10000);
 * client.send('info/getdata/1', 'GET', {}, {'Content-Type': 'text/plain'})
 */
class HTTPSClient {
    constructor (host, port) {
        this._client = new Client(host, port)
    }

    /**
     * Sets host name and port number
     * @param {string} host host name
     * @param {string} port port number
     */
    setConnection (host, port) {
        this._client.setConnection(host, port)
    }

    /**
     * Sends data. A payload of type "object" is automatically stringified, a string is not
     * @param {string} path http path
     * @param {string} method http send method PUT, GET, ...
     * @param {string|object} payload payload to send
     * @param {object} [headers={}] header to send
     * @returns {object} Promise; resolve = {statusCode, headers, payload}
     */
    send (path, method, payload, headers = {}) {
        return this._client.send(path, method, payload, headers, http)
    }
    /**
     * Sends a post request
     * @param {string} path http path
     * @param {string|object} payload payload to send
     * @param {object} [headers={}] header to send
     * @returns {object} Promise; resolve = {statusCode, headers, payload}
     */
    post(path, payload, headers = {}) {
        return this.send(path, 'POST', payload, headers)
    }
    /**
     * Sends a put request
     * @param {string} path http path
     * @param {string|object} payload payload to send
     * @param {object} [headers={}] header to send
     * @returns {object} Promise; resolve = {statusCode, headers, payload}
     */    
    put(path, payload, headers = {}) {
        return this.send(path, 'PUT', payload, headers)
    }
    /**
     * Sends a get request
     * @param {string} path http path
     * @param {object} [headers={}] header to send
     * @returns {object} Promise; resolve = {statusCode, headers, payload}
     */
    getRequest(path, headers = {}) {
        return this.send(path, 'GET', '', headers)
    }

    /**
     * Aborts all open requests
     * @returns {promise} resolved once all connections are closed
     */
    close () {
        return this._client.close()
    }
}

module.exports = HTTPSClient
