/**
 * ---------------------------------------------------------------------------------------------------
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * File:      httpsclient.js
 *
 * Author:      Volker Böhm
 * Copyright:   Volker Böhm
 * ---------------------------------------------------------------------------------------------------
 */

'use strict'

const http = require('https')

module.exports = class HttpsClient {
    constructor (host, port) {
        this.setConnection(host, port)
        this.requests = {}
        this.nextRequestId = 0
    }

    /**
     * Sets host name and port number
     * @param {string} host host name
     * @param {string} port port number
     */
    setConnection (host, port) {
        if (host === undefined) {
            throw Error('No host specified')
        }
        if (port === undefined) {
            throw Error('No port specified')
        }

        this.host = host
        this.port = port
    }

    /**
     * Sends data. A payload of type "object" is automatically stringified, a string is not
     * @param {string} path http path
     * @param {string} method http send method PUT, GET, ...
     * @param {string|object} payload payload to send
     * @param {object} headers header to send
     * @returns {object} Promise; resolve = {statusCode, headers, payload}
     */
    send (path, method, payload, headers) {
        const stringPayload = typeof (payload) === 'string' ? payload : JSON.stringify(payload)
        headers['content-length'] = stringPayload.length

        const options = {
            host: this.host,
            port: this.port,
            path,
            method,
            headers
        }
        const result = new Promise((resolve, reject) => {
            const requestId = this.nextRequestId
            this.nextRequestId++
            const request = http.request(options, res => {
                let payload = ''
                res.setEncoding('utf8')
                res.on('data', chunk => { payload += chunk })

                res.on('end', () => {
                    const headers = res.headers
                    const statusCode = res.statusCode
                    resolve({ statusCode, headers, payload })
                    delete this.requests[requestId]
                })
            })
            this.requests[requestId] = request
            request.write(stringPayload)
            request.end()
            request.on('error', err => {
                if (this.requests[requestId] !== undefined) {
                    delete this.requests[requestId]
                }
                reject(err)
            })
        })

        return result
    };

    /**
     * Aborts all open requests
     */
    close () {
        const result = new Promise((resolve, reject) => {
            for (const requestId in this.requests) {
                this.requests[requestId].abort()
            }
            resolve()
        })
        return result
    }
}
