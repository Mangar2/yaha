/**
 * ---------------------------------------------------------------------------------------------------
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 *
 * Author:      Volker Böhm
 * Copyright:   Volker Böhm
 * Version:     1.0
 * ---------------------------------------------------------------------------------------------------
 */

'use strict'

const HttpClient = require('@mangar2/httpservice').HttpClient
const HttpServer = require('@mangar2/httpservice').HttpServer
const HttpsClient = require('@mangar2/httpservice').HttpsClient
const HttpsServer = require('@mangar2/httpservice').HttpsServer
const UnitTest = require('@mangar2/unittest')
const shutdown = require('@mangar2/shutdown')
const fs = require('fs')

const httpClient = new HttpClient('127.0.0.1', 9101)
const httpServer = new HttpServer(9101)

const httpsClient = new HttpsClient('127.0.0.1', 9102)
const httpsServer = new HttpsServer(9102)

const unitTest = new UnitTest(false)

process.env.NODE_TLS_REJECT_UNAUTHORIZED = 0

async function testTimeout () {
    const httpClient = new HttpClient('192.168.0.4', 9200)
    await httpClient.send('get', 'GET', 'test', {})
}

function listen (server, options) {
    server.on('put', (payload, headers, path, res) => {
        res.writeHead(200, { 'Content-Type': 'text/plain' })
        res.end('put')
    })

    server.on('get', (payload, headers, path, res) => {
        res.writeHead(200, { 'Content-Type': 'text/plain' })
        res.end('get')
    })

    server.on('post', (payload, headers, path, res) => {
        res.writeHead(200, { 'Content-Type': 'text/plain' })
        res.end('post')
    })

    server.on('delete', (payload, headers, path, res) => {
        res.writeHead(200, { 'Content-Type': 'text/plain' })
        res.end('delete')
    })

    server.on('patch', (payload, headers, path, res) => {
        res.writeHead(200, { 'Content-Type': 'text/plain' })
        res.end('patch')
    })

    server.listen(options)
}

const options = {
    key: fs.readFileSync('key.pem'),
    cert: fs.readFileSync('cert.pem')
}

listen(httpServer)
console.log('you need to provide a key.pem and a cert.pem file for the test')
listen(httpsServer, options);
// ich moechte gerne https benutzen
// Success, if http httpServer is started too
(async () => {
    const header = { 'Content-Type': 'application/json', packetid: 1, packet: 'publish' }
    for (const method of ['GET', 'PUT', 'POST', 'DELETE', 'PATCH']) {
        let result = await httpClient.send('/clients', method, 'test', header).catch(err => {
            unitTest.fail(err)
        })
        unitTest.assertEqual(result.statusCode, 200, method + ' statusCode')
        unitTest.assertEqual(result.payload, method.toLowerCase(), method + ' payload')

        result = await httpsClient.send('/clients', method, 'https test', header).catch(err => {
            unitTest.fail(err)
        })
        if (result !== undefined) {
            unitTest.assertEqual(result.statusCode, 200)
            unitTest.assertEqual(result.payload, method.toLowerCase())
        }
    }
    try {
        console.log('test timeout, please wait...')
        await testTimeout()
    } catch (error) {
        console.log(error)
        unitTest.success('timeout')
    }

    unitTest.showResult(21)
    process.exit(0)
})()

shutdown(async () => {
    await httpClient.close()
    await httpServer.close()
    await httpsClient.close()
    await httpsServer.close()
    process.exit(0)
})
