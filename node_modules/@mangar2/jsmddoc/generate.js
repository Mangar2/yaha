/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */

'use strict'

const types = require('@mangar2/types')

const Template = {
    head: [
        { text: '<!-- This file is generated by jsmddoc version 0.1 -->\n\n' },
        { text: '# Abstract\n' },
        { tag: 'overview', text: '\n@overview\n' }
    ],
    contents: [
        { text: '\n## Contents\n\n' },
        { tag: 'license', text: '- [License](#License)\n' },
        {
            tag: 'class',
            details: [
                { text: '- [class @class](#class-@class)\n' },
                {
                    tag: 'details',
                    details: [
                        { tag: 'method', text: '  - [@method](#@method)\n' }
                    ]
                }
            ]
        }
    ],
    body: [
        { tag: 'license', text: '\n## License\n\n@license\n' },
        { tag: 'author', text: '\n**Author** @author\n' },
        { tag: 'copyright', text: '\n**Copyright** @copyright\n' },
        {
            tag: 'class',
            details: [
                { text: '\n## class @class\n\n' },
                {
                    tag: 'param',
                    text: '`new @class(',
                    details: [
                        { text: '@name, ' }
                    ]
                },
                { tag: 'param', text: ')`\n\n' },
                { text: '@description\n' },
                {
                    tag: 'param',
                    text: '\n### Parameters\n\n| Name | Type | Description |\n| ---- | ---- | ----------- |\n',
                    details: [
                        { text: '| `@name` | `@types` | @description |\n' }
                    ]
                },
                {
                    tag: 'details',
                    details: [
                        { text: '\n### @method\n\n@description\n' },
                        {
                            tag: 'param',
                            text: '\n#### Parameters\n\n| Name | Type | Description |\n| ---- | ---- | ----------- |\n',
                            details: [
                                { text: '| `@name` | `@types` | @description |\n' }
                            ]
                        },
                        {
                            tag: 'returns',
                            text: '\n#### Returns\n\n| Type | Description |\n| ---- | ----------- |\n| `@types` | @description |\n'
                        }
                    ]
                }
            ]
        }
    ]
}

/**
 * Creates a generator to generate descriptions from a parsed file content in json format
 */
class Generate {
    constructor () {
        this._content = undefined
    }

    /**
     * Replaces all occurences of search by replacement in str
     * @param {string} str string to replace substrings
     * @param {string} search string to replace
     * @param {string} replacement replacement
     */
    _replaceAll (str, search, replacement) {
        while (str.includes(search)) {
            str = str.replace(search, replacement)
        }
        return str
    }

    /**
     * @private
     * @description
     * Replaces tags beginning with @ in text by info-values
     * @param {string} text text with elements to replace
     * @param {Object} info replacement infos (key, value)
     */
    _replaceTags (text, info) {
        let result = ''
        if (text !== undefined) {
            result = String(text)
            for (const property in info) {
                const replacement = info[property]
                if (types.isString(replacement)) {
                    const search = '@' + property
                    result = this._replaceAll(result, search, replacement)
                }
            }
        }
        return result
    }

    _generateDetails (jsonData, template) {
        let result = ''
        if (jsonData !== undefined && template !== undefined) {
            for (const element of jsonData) {
                result += this._generateByTemplate(element, template)
            }
        }
        return result
    }

    /**
     * Generates a text from a template line having a single data element
     * @param {Object} jsonData content extracted from a file formatted in JSON
     * @param {Object} line single line of a generator template
     */
    _generateByTemplateLineSingle (jsonData, line) {
        let result = ''
        const tag = line.tag
        const lineIsActive = (tag === undefined || jsonData[tag] !== undefined)
        if (lineIsActive) {
            result += this._replaceTags(line.text, jsonData)
            if (tag !== undefined) {
                result += this._generateDetails(jsonData[tag].details, line.details)
            }
        }
        return result
    }

    /**
     * Generates a text from a template line having a single data element
     * @param {Object} jsonData content extracted from a file formatted in JSON
     * @param {Object} line single line of a generator template
     */
    _generateByTemplateLineSeveral (jsonData, line) {
        let result = ''
        const tag = line.tag
        const lineIsActive = (tag !== undefined && jsonData[tag] !== undefined)
        if (lineIsActive) {
            for (const jsonDataElement of jsonData[tag]) {
                result += this._generateByTemplate(jsonDataElement, line.details)
            }
        }
        return result
    }

    /**
     * @private
     * @description
     * Generates output by appliying content to a template
     * @param {Object} jsonData content extracted from a file formatted in JSON
     * @param {Object[]} template generator template
     */
    _generateByTemplate (jsonData, template) {
        let result = ''
        if (jsonData.private === undefined) {
            for (const line of template) {
                if (line.text !== undefined) {
                    result += this._generateByTemplateLineSingle(jsonData, line)
                }
                if (line.details !== undefined) {
                    result += this._generateByTemplateLineSeveral(jsonData, line)
                }
            }
        }
        return result
    }

    /**
     * @description
     * Generates output by appliying json formatted file description to a list of templates
     * @param {Object} jsonData content of the file as JSON
     * @param {Object} options generation options
     * @param {boolean} [options.includePrivate=false]
     */
    generate (jsonData, options = { includePrivate: false }) {
        let result = this._generateByTemplate(jsonData, Template.head)
        result += this._generateByTemplate(jsonData, Template.contents)
        result += this._generateByTemplate(jsonData, Template.body)
        return result
    }
}

module.exports = Generate
