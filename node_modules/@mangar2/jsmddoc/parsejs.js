/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */
'use strict'

/**
 * @private
 * @description
 * Parses a class tag
 * @param {Tokenizer} tokenizier class providing tokens
 */
function _parseClass (tokenizer) {
    const className = tokenizer.nextToken()
    return className
}

/**
 * @private
 * @description
 * Parses a function tag
 * @param {Tokenizer} tokenizier class providing tokens
 */
function _parseFunction (tokenizer) {
    const functionName = tokenizer.nextToken()
    return functionName
}

/**
 * @private
 * @description
 * Parses a method tag
 * @param {Tokenizer} tokenizier class providing tokens
 */
function _parseMethod (tokenizer) {
    const result = { method: '' }
    if (tokenizer.token === 'async') {
        result.async = 'async'
        tokenizer.nextToken()
    }
    result.method = tokenizer.token
    return result
}

/**
 * @private
 * @description
 * Parses a member tag
 * @param {Tokenizer} tokenizier class providing tokens
 */
function _parseMember (tokenizer) {
    tokenizer.nextToken()
    return this._parseMethod()
}

/**
 * @private
 * @description
 * Parses the JavaScript elements of a file to document
 * @param {Tokenizer} tokenizier class providing tokens
 * @param {boolean} inClass true, if we are inside a class definition
 */
function parseJS (tokenizer, inClass) {
    let result = {}
    let tk = tokenizer.token
    while (tk === '\n') {
        tk = tokenizer.nextToken()
    }
    switch (tk) {
    case 'class': result.class = _parseClass(tokenizer); break
    case 'function': result.function = _parseFunction(tokenizer); break
    case 'set': result.set = _parseMember(tokenizer); break
    case 'get': result.get = _parseMember(tokenizer); break
    default:
        if (inClass) {
            result = { ...result, ..._parseMethod(tokenizer) }; break
        }
    }

    return result
}

module.exports = parseJS
