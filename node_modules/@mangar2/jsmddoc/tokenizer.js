/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */
'use strict'

const fs = require('fs')
const path = require('path')

/**
 * @description
 * Creates a tokenizer class providing the content of a file token by token
 * @param {string} fileName name of the file
 */
class Tokenizer {
    constructor (fileName) {
        const pathAndName = path.join(__dirname, fileName)
        this._content = fs.readFileSync(pathAndName, 'utf-8')
        this._pos = 0
        this._token = ''
        this._spaces = [' ', '\r']
        this._specialToken = ['\n']
        this._lineNo = 1
    }

    /**
     * Gets the current token
     * @returns {string}
     */
    get token () { return this._token }

    /**
     * @private
     * @description
     * Scipts characters of the input file
     * @param {char[]} scipList scipts chars contained in the char array
     */
    _scip (scipList) {
        for (; this._pos < this._content.length; this._pos++) {
            const curCh = this._content[this._pos]
            if (!scipList.includes(curCh)) {
                break
            }
        }
    }

    /**
     * @private
     * @description
     * Scipts spaces
     */
    _scipSpaces () { this._scip(this._spaces) }

    /**
     * Gets the next token
     * @returns {string} token
     */
    nextToken () {
        this._token = ''
        this._scipSpaces()
        for (; this._pos < this._content.length; this._pos++) {
            const curCh = this._content.charAt(this._pos)
            if (this._specialToken.includes(this._token)) {
                break
            }
            if (this._spaces.includes(curCh)) {
                break
            }
            this._token += curCh
        }
        if (this._token === '\n') {
            this._lineNo++
        }
        return this._token
    }

    /**
     * Gets the current token
     * @returns {string} token
     */
    curToken () {
        return this._token
    }

    /**
     * Prints a note, warning or error message
     * @param {string} type type of the message (note, warning, error)
     * @param {string} text text of the message
     */
    printMessage (type, text) {
        console.log('% line: %s, %s', type, this._lineNo, text)
    }
}

module.exports = Tokenizer
