/**
 * ---------------------------------------------------------------------------------------------------
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * File:      logfilter.js
 *
 * Author:      Volker BÃ¶hm
 * Copyright:   Volker BÃ¶hm
 * Version:     1.0
 * ---------------------------------------------------------------------------------------------------
 */

'use strict'

const TopicMatch = require("@mangar2/topicmatch");
const CheckInput = require("@mangar2/checkinput");

const checkTopicList = new CheckInput({
    type: "array",
    items: {
        type: "object",
        properties: {
            topic: {type: "string"},
            module: {type: "string"},
            level: {type: "number", minimum: "0"}
        },
        required: ["topic", "module"]
    }
});

module.exports = class LogFilter {
    constructor() {
        this.moduleFilter = {};
    }

    /**
     * Chenges the log filter patterns, fully deliting the current patterns and replace them with the new patterns
     * @param {[{topic, module, level}]} patternList 
     * @throws error, if the parameter is badly formatted
     */
    changePattern(patternList) {
        this.moduleFilter = {};
        checkTopicList.throwOnValidationError(patternList, "log filter error");
        for (let pattern in patternList) {
            let filter = patternList[pattern];
            let module = filter.module;
            let level = filter.level !== undefined ? filter.level : 0;
            if (this.moduleFilter[module] === undefined) {
                this.moduleFilter[module] = new TopicMatch();
            }
            this.moduleFilter[module].setPattern(filter.topic, level);
        }
    }

    /**
     * Gets the log level
     * @param {string} module name of the module to check for
     * @param {string} topic topic to check
     * @returns {undefined | number} returns a log level or undefine, if logging is false
     */
    getLogLevel(module, topic) {
        let result;
        if (typeof(this.moduleFilter[module]) === 'object') {
            result = this.moduleFilter[module].getBestMatch(topic);
        }
        if (typeof(this.moduleFilter['all']) === 'object') {
            let match = this.moduleFilter['all'].getBestMatch(topic);
            if (result === undefined || match > result) {
                result = match;
            }
        }
        return result;
    }

    
}