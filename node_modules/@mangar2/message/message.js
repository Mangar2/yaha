
/**
 * ---------------------------------------------------------------------------------------------------
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * File:        message.js
 * Purpouse:    Message used in home automation.
 *              Topic: MQTT formatted topic
 *              Value: new value of the topic (example: "on" or "off" or 1 ..)
 *              Reason: Array of reason entries. This is used to store all incidents along the
 *              path of the message through the automation system. As a result we get a full
 *              trace for each action/message from creation reason to the full flow to the devices
 *              and their acknowledges.
 *
 * Author:      Volker Böhm
 * Copyright:   Volker Böhm
 * ---------------------------------------------------------------------------------------------------
 */

const CheckInput = require('@mangar2/checkinput')

const checkMessage = new CheckInput({
    type: 'object',
    properties: {
        topic: { type: 'string' },
        reason: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    message: { type: 'string' },
                    timestamp: { type: 'string' }
                },
                required: ['message']
            }
        }
    },
    required: ['topic', 'value']
})

module.exports = class Message {
    /**
     * creates a new message
     * @param {string} topic topic string
     * @param {string} value value to set topic to
     * @param {string} reason explaining, why the topic will be set to value
     * @param {Date} now current time
     */
    constructor (topic, value, reason, now) {
        this.topic = topic
        this.value = value
        if (reason !== undefined && reason !== null) {
            if (!Array.isArray(reason)) {
                this.addReason(reason, now)
            } else {
                this.reason = reason
            }
        }
        Message.validate(this)
    }

    /**
     * Adds a reason to the reason array
     * @param {string} reason explaining, why the topic will be set to value
     * @param {Date|undefined} now current time. If not provided, it will be calculated.
     *                         usually only passed for debugging reasons.
     */
    addReason (reason, now = new Date()) {
        if (!Array.isArray(this.reason)) {
            this.reason = []
        }
        this.reason.push({
            message: reason,
            timestamp: now.toISOString()
        })
    }

    /**
     * Gets the latest Date of the message by browsing the reasons
     * @returns {Date}
     */
    getDateOfNewestChange () {
        var time
        if (this.reason !== undefined) {
            for (const element of this.reason) {
                const timestamp = element.timestamp
                if (timestamp !== undefined) {
                    time = new Date(timestamp)
                    break
                }
            }
        }
        return time
    }

    /**
     * Checks the consistence of a message object
     * @param {object} object object to check or this
     * @throws {error}
     */
    static validate (object) {
        if (checkMessage.validate(object) !== true) {
            throw 'error: ' + JSON.stringify(checkMessage.messages, null, 2)
        }
        return true
    }
}
