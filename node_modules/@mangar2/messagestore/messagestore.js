/**
 * ---------------------------------------------------------------------------------------------------
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * File:      messagestore.js
 *
 * Author:      Volker Böhm
 * Copyright:   Volker Böhm
 * ---------------------------------------------------------------------------------------------------
 */

'use strict'

const Persist = require('@mangar2/persist')
const MessageTree = require('@mangar2/messagetree')
const HttpServer = require('@mangar2/httpservice').HttpServer

class MessageStore {
    constructor (options) {
        this.options = options
        this.persist = new Persist(options.persist)
        this.persist.readData(options.persist.directory, options.persist.filename)
        this.tree = new MessageTree(options.tree)
        this.httpServer = new HttpServer(options.server.port)
        this.isRunning = false

        this.httpServer.on('GET', (payload, headers, path, res) => {
            const pathArray = path.split('/')
            if (pathArray[1] === 'sensors') {
                const levelAmount = isNaN(headers.levelamount) ? 1 : Number(headers.levelamount)
                const topic = pathArray.slice(2).join('/')
                payload = this.tree.getSection(topic, levelAmount)
                const resultHeaders = {
                    'content-type': 'application/json; charset=UTF-8'
                }
                res.writeHead(200, resultHeaders)
                res.end(JSON.stringify(payload))
            } else {
                throw Error('unknown path ' + path)
            }
        })

    }

    /**
     * Persists the data
     */
    async _persist () {
        while (this.isRunning) {
            await this.tree.persist(this.options.persist.directory, this.options.persist.fileName)
            await this.persist.delay(this.options.persist.interval)
        }
    }

    /**
     * Listens to a configures port
     */
    run () {
        this.httpServer.listen()
        this.isRunning = true
        if (this.options.persist.interval !== 0) {
            this._persist()
        }
    }

    /**
     * Closes the broker, stops listening
     */
    async close () {
        this.isRunning = false
        await this.server.close()
        if (this.options.persistInterval !== 0) {
            await this.mqtt.connections.persist()
        }
    }

    /**
     * Adds a message to the three node matching to the topic path.
     * @param {Message} message {topic, value, reason}
     * @param {string} message.topic topic string
     * @param {object} message.value value of the topic
     * @param {object[]} message.reason list of reasons
     */
    addMessage (message) {
        this.tree.addData(message)
    }

    /**
     * @type {MessageTree} tree of messages
     */
    get messages () { return this._messages }
    set messages (messages) { this._messages = messages }
}

module.exports = MessageStore
