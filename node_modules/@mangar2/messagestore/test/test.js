/**
 * ---------------------------------------------------------------------------------------------------
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * File:      test.js
 *
 * Author:      Volker Böhm
 * Copyright:   Volker Böhm
 * ---------------------------------------------------------------------------------------------------
 */


'use strict'

const MessageStore = require("@mangar2/messagestore");
const UnitTest = require("@mangar2/unittest");
const Message = require("@mangar2/message");
const HISTORY_LENGTH = 120;
const HISTORY_HYSTERESE = 20;

function printMemoryUsage() {
    const used = process.memoryUsage();
    for (let key in used) {
        console.log(`${key} ${Math.round(used[key] / 1024 / 1024 * 100) / 100} MB`);
    }
}

var messageStore = new MessageStore({maxHistoryLength: HISTORY_LENGTH, historyHysterese: HISTORY_HYSTERESE});
var unitTest = new UnitTest(true);
printMemoryUsage();

messageStore.addData(new Message("a/b",  "off", "hello a/b"));
messageStore.addData(new Message("a/b",  "on", "hello a/b"));
messageStore.addData(new Message("a/b",  "on", "hello a/b"));
messageStore.addData(new Message("a/b",  "on", "hello a/b"));
messageStore.addData(new Message("a/b/a",  "on", "hello a/b/a"));
messageStore.addData(new Message("a/c",  "off", "hello a/c"));

// Check node /a/b
let node = messageStore.getNode("a/b");
unitTest.assertEqual(node.value, "on", "a/b 1"); 
unitTest.assertEqual(node.reason[0].message, "hello a/b", "a/b 2");
// Check history
unitTest.assertEqual(node.history.length, 3, "a/b 3");
unitTest.assertEqual(node.history[node.history.length - 1].value, "off", "a/b 4");
unitTest.assertEqual(node.series[0].length, 3, "a/b 5");
unitTest.assertEqual(node.series[0][0][1], "off", "a/b 6");
unitTest.assertEqual(node.series[0][1][1], "on", "a/b 7");
unitTest.assertEqual(node.series[0][2][1], "on", "a/b 8");

// Check node /a/c
node = messageStore.getNode("a/c");
unitTest.assertEqual(node.value, "off", "a/c 1");
unitTest.assertEqual(node.reason[0].message, "hello a/c", "a/c 2");

// Check a leaf with childs
node = messageStore.getNode("/a/b/a");
unitTest.assertEqual(node.reason[0].message, "hello a/b/a", "a/b/a");

// Check long amount of history entries
let amount = HISTORY_LENGTH - HISTORY_HYSTERESE;
for (let i = 0; i <= amount; i++) {
    messageStore.addData(new Message("b/a", i, i.toString()));
}
// Check that a random node is not modified
node = messageStore.getNode("a/b");
unitTest.assertEqual(node.value, "on", "b/a 1");
node = messageStore.getNode("b/a");
unitTest.assertEqual(node.value, amount, "b/a 2");
unitTest.assertEqual(node.history.length, amount, "b/a 3");
unitTest.assertEqual(node.history[0].value, amount - 1, "b/a 4");
unitTest.assertEqual(node.history[amount - 1].value, 0, "b/a 5");

// Check long amount of history entries
amount = 100 * (HISTORY_HYSTERESE) + HISTORY_LENGTH + 2;
for (let i = 0; i <= amount; i++) {
    messageStore.addData(new Message("b/b", i, i.toString()));
}
// Check that a random node is not modified
node = messageStore.getNode("b/b");
unitTest.assertEqual(node.value, amount, "b/b 1");
unitTest.assertEqual(node.history.length, HISTORY_LENGTH - HISTORY_HYSTERESE + 2, "b/b 2");
unitTest.assertEqual(node.history[0].value, amount - 1, "b/b 3");
unitTest.assertEqual(node.history[HISTORY_LENGTH - HISTORY_HYSTERESE - 2].value, amount - HISTORY_LENGTH + HISTORY_HYSTERESE + 1, "/b/b 4");
// Add lots of topics
function addStringsRec(depth, path) {
    if (depth === 0) {
        messageStore.addData(new Message(path, depth, path));
    } else {
        let string = "a";
        let charCode = string.charCodeAt(0);
        for (let letters = 0; letters < 6; letters++) {
            addStringsRec(depth - 1, path + "/" + String.fromCharCode(charCode + letters))
        }
    }
}

addStringsRec(3, "/c");
node = messageStore.getNode("/c/d/e/f");
unitTest.assertEqual(node.reason[0].message, "/c/d/e/f", "addStringsRec 1");

let section = messageStore.getSection("/c/a/a", 1);
unitTest.assertEqual(section.topics.length, 7, "addStringsRec 2");
printMemoryUsage();
unitTest.showResult(22);