/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */
'use strict'

const Persist = require('@mangar2/persist')
const addToHistory = require('./addtohistory.js')
const decompress = require('./decompress.js')
var persist = new Persist()

/**
 * @private
 * Checks, if a function is a string
 * @param {any} x
 */
function isString (x) {
    return Object.prototype.toString.call(x) === '[object String]'
}

/**
 * @private
 * Savely gets a property from an object. Sets the property, if it is not defined
 * @param {Object} theObject to get entry from
 * @param {string} propertyName name of the property to retrieve
 * @param {any} propertyValue value to set to the property, if the property is undefined
 * @returns property of the object or undefined, if the property is not retrievable
 */
function getFromObject (theObject, propertyName, propertyValue) {
    var result
    if (theObject !== undefined && propertyName !== undefined && isString(propertyName)) {
        if (!Object.hasOwnProperty.call(theObject, propertyName) && propertyValue !== undefined) {
            theObject[propertyName] = propertyValue
        }
        result = theObject[propertyName]
    }
    return result
}

/**
 * @typedef {Object} MessageNode
 * @property {number} time timestamp of node creation
 * @property {number} value node value
 * @property {Reason} reason node reason
 * @property {History} history node history
 * @property {Map} childs map of child names to child.
 */

/**
 * Data structure holding a large amount of messages with topic, value and reason in a tree organized according the topic.
 * Each tree node containing data provides a "history" including recent messages.
 * It includes several methods to "compress" the history of messages of each topic
 * @param {Object} options options for the tree
 * @param {number} options.maxHistoryLength maximum amount of entries in the history array
 * @param {number} options.maxValuesLength maximum amount of values per history entry
 * @param {number} options.historyHysterese hysterese to cut history length
 * @param {number} options.upperBoundFactor upper bound to compare time spans (for inteval based compression)
 * @param {number} options.upperBoundAddInMilliseconds upper bound add to compare time spans
 * @param {number} options.lowerBoundFactor, lower bound factor to compare time spans
 * @param {number} options.lowerBoundSubInMilliseconds lower bound sub to compare time spans
 */
class MessageTree {
    constructor (options) {
        this.options = {}
        this.setFromConfiguration('maxHistoryLength', options, 50)
        this.setFromConfiguration('historyHysterese', options, 10)
        this.setFromConfiguration('maxValueLength', options, 1024)
        this.setFromConfiguration('upperBoundFactor', options, 1.2)
        this.setFromConfiguration('upperBoundAddInMilliseconds', options, 1000)
        this.setFromConfiguration('lowerBoundFactor', options, 0.8)
        this.setFromConfiguration('lowerBoundSubInMilliseconds', options, 1000)
        this.tree = { childs: {} }
    }

    /**
     * @private
     * Safely sets a options option, if the option is included in options and it is a number
     * Strings with numbers are converted to integer
     * @param {string} propertyName name of the property to set
     * @param {Object} options Object containing the property
     * @param {number} defaultValue default value of the property
     */
    setFromConfiguration (propertyName, options, defaultValue) {
        this.options[propertyName] = isNaN(options[propertyName]) ? defaultValue : Number(options[propertyName])
    }

    /**
     * Persists all connections
     * @param {string} directory directory of the files
     * @param {string} filenameBasis basis filename, a timestamp is added
     */
    async persist (directory, filenameBasis) {
        await persist.saveObjectToFile(directory, filenameBasis, this.tree)
    }

    /**
     * Reads the tree from a persisted file
     * @param {string} directory directory of the files
     * @param {string} filenameBasis basis filename, a timestamp is added
     */
    readTreeFromPersistedFile (directory, filenameBasis) {
        const newTree = persist.readData(directory, filenameBasis)
        if (newTree !== undefined) {
            this.tree = newTree
            console.log('sucessfully loaded persisted data')
        }
    }

    /**
     * @private
     * Checks if a node is a leaf node
     * @param {Object} node node of the message tree
     * @returns {boolean} true, if the node is a node with data
     */
    static isDataNode (node) {
        return Object.hasOwnProperty.call(node, 'history')
    }

    /**
     * @private
     * Initializes a leaf node
     * @param {Object} node
     */
    static initDataNode (node) {
        if (!MessageTree.isDataNode(node)) {
            node.history = []
        }
    }

    /**
     * @private
     * Gets the payload (time, data and history) of the node
     * @param {Object} node tree node
     * @param {boolean} [addHistory=true] true, if the history property will be added
     * @returns {Object} payload of the node
     */
    static getPayload (node, addHistory = true) {
        const result = {
            topic: node.topic,
            time: new Date(node.time).toISOString(),
            value: node.value,
            reason: node.reason
        }
        if (addHistory) {
            result.history = decompress(node.history)
        }
        for (const property in node) {
            if (result[property] === undefined && property !== 'history' && property !== 'childs') {
                result[property] = node[property]
            }
        }
        return result
    }

    /**
     * Searches a node in the message tree corresponding to the topic.
     * @param {string} topic topic to store the data
     * @returns {Object} data to store
     */
    getNode (topic) {
        const topicChunks = topic.split('/')
        if (topicChunks[0] === '') {
            topicChunks.shift()
        }
        let childNode = this.tree
        for (const topicChunk of topicChunks) {
            childNode = getFromObject(childNode.childs, topicChunk)
            if (childNode === undefined) {
                break
            }
        }
        return childNode
    }

    /**
     * Searches a node in the message tree corresponding to the topic. Creates empty nodes along the topic if
     * the nodes are not yet available.
     * @param {string} topic topic to store the data
     * @returns {Object} node in the tree
     */
    getAndCreateDataNode (topic) {
        const topicChunks = topic.split('/')
        if (topicChunks[0] === '') {
            topicChunks.shift()
        }
        let node = this.tree
        for (const topicChunk of topicChunks) {
            node = getFromObject(node.childs, topicChunk, { childs: {} })
        }
        MessageTree.initDataNode(node)
        return node
    }

    /**
     * Updates the data of a node and stores the old data to a history array.
     * The new history entry is added to the beginning of the queue. If the history length exceeds the
     * maximal length, it will be reduces by "historyHysterese" amount of elements
     * @param {Object} node node to update
     * @param {Object} content new content of the node
     * @param {Object} options options to organize the history
     */
    static updateContent (node, content, options) {
        if (Object.hasOwnProperty.call(node, 'value')) {
            const historyEntry = { time: node.time, value: node.value, reason: node.reason }
            node.history = addToHistory(node.history, historyEntry, options)
        }
        for (const property in content) {
            node[property] = content[property]
        }
    }

    /**
     * Adds data to the three node matching to the topic path.
     * It will store the current time, data and descrition to the node and
     * the former time and data entry is copied to the history array property.
     * @param {Message} message {topic, value, reason}
     * @param {string} message.topic topic string
     * @param {objecObjectt} message.value value of the topic
     * @param {Object[]} message.reason list of reasons
     */
    addData (message) {
        const node = this.getAndCreateDataNode(message.topic)
        const time = new Date().getTime()
        const content = { time, topic: message.topic, value: message.value, reason: message.reason }

        MessageTree.updateContent(node, content, this.options)
    };

    /**
     * @private
     * Gets several levels of child nodes in one flat object structure
     * @param {Object} node node of the message tree
     * @param {string} topic current topic
     * @param {number} levelAmount amount of child levels to include
     * @param {boolean} [addHistory=true] true, if the history property will be added
     * @returns {Object} section of the tree in output format
     */
    static getSectionRec (node, topic, levelAmount, addHistory) {
        let result = { topics: [], payload: {} }

        if (topic === undefined || topic === '' || !isString(topic)) {
            topic = '/'
        }
        result.topics.push(topic)

        if (node !== undefined) {
            if (MessageTree.isDataNode(node)) {
                result.payload[topic] = MessageTree.getPayload(node, addHistory)
            }

            if (levelAmount > 0) {
                for (const childName in node.childs) {
                    const childNode = node.childs[childName]
                    const childTopic = topic === '/' ? '/' + childName : topic + '/' + childName
                    const subChildNodes = this.getSectionRec(childNode, childTopic, levelAmount - 1, addHistory)
                    result = {
                        topics: [...result.topics, ...subChildNodes.topics],
                        payload: { ...result.payload, ...subChildNodes.payload }
                    }
                }
            }
        }
        return result
    }

    /**
     * Gets several levels of child nodes in one flat object structure
     * @param {string} topic start topic of the section
     * @param {number} levelAmount amount of levels to get
     * @param {boolean} [addHistory=true] true, if the history property will be added
     * @returns {{topics: Array, payload: Object}} Object with topics and payloads of all nodes in output format
     * for these (sub)topics
     */
    getSection (topic, levelAmount, addHistory) {
        const node = this.getNode(topic)
        const result = MessageTree.getSectionRec(node, topic, levelAmount, addHistory)
        return result
    }
}

module.exports = MessageTree
