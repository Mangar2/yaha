/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */
'use strict'

const MessageTree = require('@mangar2/messagetree')
const UnitTest = require('@mangar2/unittest')
const Message = require('@mangar2/message')

const CONFIG = {
    maxHistoryLength: 120,
    historyHysterese: 20,
    upperBoundFactor: 1.2,
    upperBoundAddInMilliseconds: 1000,
    lowerBoundFactor: 0.8,
    lowerBoundSubInMilliseconds: 1000
}

function printMemoryUsage () {
    const used = process.memoryUsage()
    for (const key in used) {
        console.log(`${key} ${Math.round(used[key] / 1024 / 1024 * 100) / 100} MB`)
    }
}

const messageTree = new MessageTree(CONFIG)
const unitTest = new UnitTest(true)
printMemoryUsage()

/**
 * Tests adding a single message
 */
function testAddMessage () {
    const timestamp = new Date().getTime()
    messageTree.addData(new Message('a/add message', 'on', 'a'))
    messageTree.addData(new Message('a/a/add message', 2, 'a/a'))
    messageTree.addData(new Message('a/c/add message', 3, 'a/c'))
    messageTree.addData(new Message('a/add message/2', 4, 'a/c'))
    const node = messageTree.getNode('a/add message')
    unitTest.assertEqual(node.value, 1, 'add message 1')
    unitTest.assertEqual(node.reason[0].message, 'a', 'add message 2')
    unitTest.assertTrue(node.time >= timestamp, 'add message 3')
    unitTest.assertTrue(node.time <= timestamp + 10, 'add message 4')
    unitTest.assertEqual(messageTree.getNode('a/a/add message').value, 2, 'add message 5')
    unitTest.assertEqual(messageTree.getNode('a/c/add message').value, 3, 'add message 6')
    unitTest.assertEqual(messageTree.getNode('a/add message/2').value, 4, 'add message 7')
}

function testHistoryOverflow () {
    // Check long amount of history entries
    let amount = CONFIG.maxHistoryLength - CONFIG.historyHysterese
    messageTree.addData(new Message('a/b', 'on', 'on'))
    for (let i = 0; i <= amount; i++) {
        messageTree.addData(new Message('b/a', i, i.toString()))
    }
    // Check that a random node is not modified
    let node = messageTree.getNode('a/b')
    unitTest.assertEqual(node.value, 1, 'b/a 1')
    node = messageTree.getNode('b/a')
    unitTest.assertEqual(node.value, amount, 'b/a 2')
    unitTest.assertEqual(node.history.length, amount, 'b/a 3')
    unitTest.assertEqual(node.history[0].value, amount - 1, 'b/a 4')
    unitTest.assertEqual(node.history[amount - 1].value, 0, 'b/a 5')

    // Check long amount of history entries
    amount = 100 * (CONFIG.historyHysterese) + CONFIG.maxHistoryLength + 2
    for (let i = 0; i <= amount; i++) {
        messageTree.addData(new Message('b/b', i, i.toString()))
    }
    // Check that a random node is not modified
    node = messageTree.getNode('b/b')
    unitTest.assertEqual(node.value, amount, 'b/b 1')
    unitTest.assertEqual(node.history.length, CONFIG.maxHistoryLength - CONFIG.historyHysterese + 2, 'b/b 2')
    unitTest.assertEqual(node.history[0].value, amount - 1, 'b/b 3')
    unitTest.assertEqual(
        node.history[CONFIG.maxHistoryLength - CONFIG.historyHysterese - 2].value,
        amount - CONFIG.maxHistoryLength + CONFIG.historyHysterese + 1, '/b/b 4')
}

/**
 * Tests adding messages with different reason
 */
function testDifferentReason () {
    const timestamp = new Date().getTime()
    messageTree.addData(new Message('a/different', 'start', 'reason 0'))
    const node = messageTree.getNode('a/different')
    unitTest.assertEqual(node.value, 'start', 'different 1')
    for (let index = 1; index < 10; index++) {
        messageTree.addData(new Message('a/different', 'on', 'reason ' + index))
    }
    unitTest.assertEqual(node.value, 1, 'different 2')
    messageTree.addData(new Message('a/different', 'off', 'reason 12'))
    unitTest.assertEqual(node.value, 0, 'different 3')
    unitTest.assertEqual(node.reason[0].message, 'reason 12', 'different 4')
    // Check history
    unitTest.assertEqual(node.history.length, 10, 'different 5')
    unitTest.assertEqual(node.history[node.history.length - 1].value, 'start', 'different 6')
    unitTest.assertEqual(node.history[node.history.length - 2].value, 1, 'different 7')
    unitTest.assertEqual(node.history[0].value, 1, 'different 8')
    unitTest.assertEqual(node.history[1].value, 1, 'different 9')
    unitTest.assertEqual(node.history[node.history.length - 3].reason[0].message, 'reason 2', 'different 10')
    unitTest.assertTrue(node.history[0].time >= timestamp, 'different 11')
    unitTest.assertTrue(node.history[1].time >= timestamp, 'different 12')
}

/**
 * Test adding noded with same reason but different values
 */
function testDifferentValue () {
    const VALUE_INDEX = 1
    const TIME_INDEX = 0
    const timestamp = new Date().getTime()
    for (let index = 0; index < 10; index++) {
        messageTree.addData(new Message('a/ne', index % 2, 'ne'))
        messageTree.addData(new Message('a/ne', index % 2, 'ne'))
        messageTree.addData(new Message('a/ne', index % 2, 'ne'))
    }

    const node = messageTree.getNode('a/ne')
    unitTest.assertEqual(node.value, 1, 'ne 1')
    unitTest.assertEqual(node.reason[0].message, 'ne', 'ne 2')
    // Check history
    unitTest.assertEqual(node.history.length, 1, 'ne 3')
    unitTest.assertEqual(node.history[0].value, undefined, 'ne 4')
    unitTest.assertEqual(node.history[0].time, undefined, 'ne 5')
    unitTest.assertEqual(node.history[0].type, 'timeValue', 'ne 5')
    unitTest.assertEqual(node.history[0].values.length, 29, 'ne 6')
    unitTest.assertEqual(node.history[0].values[0][VALUE_INDEX], 0, 'ne 7')
    unitTest.assertEqual(node.history[0].values[2][VALUE_INDEX], 0, 'ne 8')
    unitTest.assertEqual(node.history[0].values[3][VALUE_INDEX], 1, 'ne 9')
    unitTest.assertEqual(node.history[0].values[28][VALUE_INDEX], 1, 'ne 10')
    unitTest.assertTrue(node.history[0].values[28][TIME_INDEX] >= timestamp, 'ne 11')
    unitTest.assertTrue(node.history[0].values[27][TIME_INDEX] <= timestamp + 50, 'ne 12')

    // One more message, different reason
    messageTree.addData(new Message('a/ne', 0, 'ne 13'))
    unitTest.assertEqual(node.history.length, 1, 'ne 14')
    unitTest.assertEqual(node.history[0].values.length, 30, 'ne 15')
    // One more message, different reason
    messageTree.addData(new Message('a/ne', 0, 'ne 16'))
    unitTest.assertEqual(node.history.length, 2, 'ne 17')
    unitTest.assertEqual(node.history[0].type, 'single', 'ne 18')
    unitTest.assertEqual(node.history[1].values.length, 30, 'ne 19')
}

/**
 * Test adding noded with same reason and same value but different intervals
 */
async function testSameValue () {
    const messageTree = new MessageTree({
        maxHistoryLength: 120,
        historyHysterese: 20,
        upperBoundFactor: 1.0,
        upperBoundAddInMilliseconds: 0,
        lowerBoundFactor: 1.0,
        lowerBoundSubInMilliseconds: 0
    })
    const timestampStart = new Date().getTime()
    for (let index = 0; index < 10; index++) {
        await unitTest.delay(index)
        messageTree.addData(new Message('a/eq', 42, 'eq'))
        messageTree.addData(new Message('a/eq', 42, 'eq'))
        messageTree.addData(new Message('a/eq', 42, 'eq'))
    }
    const timestampEnd = new Date().getTime()

    const node = messageTree.getNode('a/eq')
    unitTest.assertEqual(node.value, 42, 'eq 1')
    // Check history
    unitTest.assertEqual(node.history.length, 1, 'eq 2')
    unitTest.assertEqual(node.history[0].value, 42, 'eq 3')
    unitTest.assertEqual(node.history[0].type, 'time', 'eq 4')
    unitTest.assertEqual(node.history[0].timestamps.length, 29, 'eq 5')
    for (let index = 0; index < 29; index++) {
        unitTest.assertTrue(node.history[0].timestamps[index] >= timestampStart, 'eq 6')
        unitTest.assertTrue(node.history[0].timestamps[index] <= timestampEnd, 'eq 7')
    }

    // One more message, different values
    messageTree.addData(new Message('a/eq', 0, 'eq'))
    unitTest.assertEqual(node.history.length, 1, 'eq 8')
    unitTest.assertEqual(node.history[0].timestamps.length, 30, 'eq 9')
    // One more message, different values
    messageTree.addData(new Message('a/eq', 1, 'eq'))
    unitTest.assertEqual(node.history.length, 2, 'eq 10')
    unitTest.assertEqual(node.history[0].type, 'single', 'eq 11')
    unitTest.assertEqual(node.history[1].timestamps.length, 30, 'eq 12')
}

/**
 * Test adding noded with same reason, same value and same interval
 */
async function testInterval () {
    const messageTree = new MessageTree({
        maxHistoryLength: 120,
        historyHysterese: 20,
        upperBoundFactor: 1.0,
        upperBoundAddInMilliseconds: 50,
        lowerBoundFactor: 1.0,
        lowerBoundSubInMilliseconds: 50
    })
    const timestampStart = new Date().getTime()
    for (let index = 0; index < 10; index++) {
        await unitTest.delay(index)
        messageTree.addData(new Message('a/interval', 11, 'interval'))
        messageTree.addData(new Message('a/interval', 11, 'interval'))
        messageTree.addData(new Message('a/interval', 11, 'interval'))
    }
    const timestampEnd = new Date().getTime()

    const node = messageTree.getNode('a/interval')
    unitTest.assertEqual(node.value, 11, 'interval 1')
    // Check history
    unitTest.assertEqual(node.history.length, 1, 'interval 2')
    unitTest.assertEqual(node.history[0].value, 11, 'interval 3')
    unitTest.assertEqual(node.history[0].type, 'interval', 'interval 4')
    unitTest.assertEqual(node.history[0].amount, 29, 'interval 5')
    unitTest.assertTrue(node.history[0].firstTime >= timestampStart, 'interval 6')
    unitTest.assertTrue(node.history[0].lastTime <= timestampEnd, 'interval 7')

    // One more message, different interval
    await unitTest.delay(80)
    messageTree.addData(new Message('a/interval', 11, 'interval'))
    unitTest.assertEqual(node.history.length, 1, 'interval 8')
    unitTest.assertEqual(node.history[0].amount, 30, 'interval 9')
    await unitTest.delay(80)
    // One more message, different values
    messageTree.addData(new Message('a/interval', 11, 'interval'))
    unitTest.assertEqual(node.history.length, 2, 'interval 10')
    unitTest.assertEqual(node.history[0].type, 'single', 'interval 11')
    unitTest.assertEqual(node.history[1].amount, 30, 'interval 12')
    console.log(JSON.stringify(MessageTree.getPayload(node), null, 2))
}

function testManyNodes () {
    // Add lots of topics
    function addStringsRec (depth, path) {
        if (depth === 0) {
            messageTree.addData(new Message(path, depth, path))
        } else {
            const string = 'a'
            const charCode = string.charCodeAt(0)
            for (let letters = 0; letters < 6; letters++) {
                addStringsRec(depth - 1, path + '/' + String.fromCharCode(charCode + letters))
            }
        }
    }

    addStringsRec(3, '/c')
    const node = messageTree.getNode('/c/d/e/f')
    unitTest.assertEqual(node.reason[0].message, '/c/d/e/f', 'addStringsRec 1')

    const section = messageTree.getSection('/c/a/a', 1)
    unitTest.assertEqual(section.topics.length, 7, 'addStringsRec 2')
    printMemoryUsage()
}

(async () => {
    testAddMessage()
    testHistoryOverflow()
    testManyNodes()
    testDifferentReason()
    testDifferentValue()
    await testSameValue()
    await testInterval()
    printMemoryUsage()
    unitTest.showResult(128)
})().catch((result) => {
    console.log(result)
    console.log('fail')
})
/*

unitTest.showResult(18)
*/
