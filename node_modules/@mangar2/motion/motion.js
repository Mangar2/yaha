/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */
'use strict'

const DEBUG = false

const EventHistory = require('./eventhistory')
const sanitize = require('./configuration.js')
const TopicMatch = require('@mangar2/topicmatch')
const { checkRule, Rules, ProcessRule } = require('@mangar2/rules')
const types = require('@mangar2/types')
const { timeOfDayStringToDate } = require('@mangar2/time')

const errorLog = (err) => { require('@mangar2/errorlog')(err, DEBUG) }

/**
 * Creates a motion class. Motion is a automation rule processor for rules that are based on events
 * especially motions.
 * This class is designed to work togehter with the runservices service to provide event based
 * automations.
 * @param {Object} configuration
 * @param {Array} [configuration.motionTopics] list of topics to subscribe to see all motions
 * @param {string} [configuration.presenceVariable='$SYS/presence'] name of the variable to store the presence flag
 * @param {number} [configuration.subscribeQoS=1] quality of service for message subscription
 * @param {number} configuration.longitued longitude of the place to automate
 * @param {number} configuration.latitude latitude of the place to automate
 */
class Motion {
    constructor (configuration) {
        const sanitizedOptions = sanitize(configuration)
        this._presenceTopic = sanitizedOptions.presenceTopic
        this._subscribeQoS = sanitizedOptions.subscribeQoS
        this._motionTopics = sanitizedOptions.motionTopics
        this._history = new EventHistory()
        this._processRule = new ProcessRule({}, new Date(), configuration.longitude, configuration.latitude)
        this._setVariable(this._presenceTopic, 'initial')
        this._simulation = false
        this._usedVariables = {}
    }

    /**
     * Sets/replaces the rules tree
     * @param {Object} rulesTree tree with 'rules' elements
     */
    setRules (rulesTree) {
        this._rules = new Rules(rulesTree, checkRule)
    }

    /**
     * Sets a single variable (for example from a message)
     * @param {string} name name of the variable
     * @param {string|number} value value of the variable
     * @private
     */
    _setVariable (name, value) { this._processRule.setVariable(name, value) }

    /**
     * Clears the motion history
     * @private
     */
    _clearEventHistory () {
        this._history.clear()
    }

    /**
     * Handles a message in simulation mode
     * @param {Message} message message received in simulation mode
     */
    _handleSimulation (message) {
        const isSimulationTopic = message.topic.indexOf('$SYS/simulation/') !== -1
        if (isSimulationTopic) {
            if (message.topic === '$SYS/simulation/date') {
                const simulationDate = timeOfDayStringToDate(message.value)
                console.log('%s simulation date changed', simulationDate.toLocaleString())
                const result = this.processRules(simulationDate, true)
                for (const message of result.messages) {
                    console.log('%s %s=%s [%s]',
                        simulationDate.toLocaleString(), message.topic, message.value, message.reason[0].message)
                }
            } else if (message.topic === '$SYS/simulation/end') {
                this._simulation = false
                console.log('%s simulation stopped', (new Date()).toLocaleString())
            } else {
                message.topic = message.topic.replace('$SYS/simulation/', '')
                const date = timeOfDayStringToDate(message.reason[0].timestamp)
                message.reason[0].timestamp = date.toISOString()
                console.log('%s %s=%s', message.getDateOfNewestChange().toLocaleString(), message.topic, message.value)

                const topicMatch = new TopicMatch(this._motionTopics)
                if (topicMatch.getFirstMatch(message.topic) !== undefined) {
                    this._history.addEvent(message)
                }
                this._setVariable(message.topic, message.value)
            }
        }
    }

    /**
     * Checks receives messages and adds them to motion and variable lists
     * @param {Message} message received message
     * @returns {Message[]} list of messages as result (always empty)
     */
    processMessage (message) {
        if (message.topic === '$SYS/simulation/date' && !this._simulation) {
            this._simulation = true
            console.log('simulation started')
        }
        if (this._simulation) {
            this._handleSimulation(message)
        } else {
            const topicMatch = new TopicMatch(this._motionTopics)
            if (topicMatch.getFirstMatch(message.topic) !== undefined) {
                this._history.addEvent(message)
            }
            this._setVariable(message.topic, message.value)
        }
        return []
    }

    /**
     * Get all the variables to subscribe to
     * @returns {string[]} array of subscriptions
     */
    getSubscriptions () {
        const variables = this.checkRules()
        const subscriptions = {}
        const qos = this._subscribeQoS
        for (const topic of this._motionTopics) {
            subscriptions[topic] = qos
        }
        const topicMatch = new TopicMatch(this._motionTopics)
        for (const variable in variables) {
            const isNew = topicMatch.getFirstMatch(variable) === undefined
            if (variables[variable] === undefined && isNew) {
                subscriptions[variable] = qos
            }
        }
        subscriptions['$SYS/simulation/#'] = 1
        return subscriptions
    }

    /**
     * Checks all rules for errors, prints errors to console
     * @returns {Object} map of variables (variable name/variable value)
     */
    checkRules () {
        let result = {}
        if (this._rules.rules.length === 0) {
            errorLog('no valid rules')
        }
        for (const errors of this._rules.invalidRules) {
            console.log('Error in rule "' + errors.name + '": ' + JSON.stringify(errors.messages, null, 2))
        }
        for (const rule of this._rules.rules) {
            console.log('Checking rule ' + rule.name)
            try {
                const usedVariables = this._processRule.determineNeededVariables(rule)
                result = { ...result, ...usedVariables }
            } catch (err) {
                this._rules.invalidateRule(rule.name)
                err.message = 'Error in rule "' + rule.name + '": ' + err.message
                errorLog(err)
            }
        }
        return result
    }

    /**
     * Check that the latest movement list actuality fits to the required duration without movement
     * 1. If durationWithoutMovementInMinutes is not provided, the latest move may not be longer ago than one minute
     * 2. Else the latest move must be at least "durationWithoutmovementInMinutes" time ago.
     * @param {number} durationWithoutMovementInMinutes required amount of minutes passed since last move
     * @param {numer} latestMoveTimestamp timestamp of the last move in milliseconds
     * @param {Date} curDate current date
     * @returns {boolean} true, if the last move is long enough ago
     * @private
     */
    _isEventListActual (durationWithoutMovementInMinutes, latestMoveTimestamp, curDate) {
        let result = true
        const noMoveTimespan = curDate.getTime() - latestMoveTimestamp
        const ONE_MINUTE = 60 * 1000
        if (types.isNumber(durationWithoutMovementInMinutes)) {
            result = noMoveTimespan >= durationWithoutMovementInMinutes * ONE_MINUTE
        } else {
            result = noMoveTimespan < ONE_MINUTE
        }
        return result
    }

    /**
     * Sets the internal variable values from messages to send
     * @param {Message[]} messages array of messages to send
     * @private
     */
    _setVariablesFromOwnMessages (messages) {
        for (const message of messages) {
            this._setVariable(message.topic, message.value)
        }
    }

    /**
     * Prints/shows the variable used
     * @param {Object} usedVariables name: value map of varialbes
     */
    _showVariables (usedVariables) {
        for (const variable in usedVariables) {
            const value = usedVariables[variable]
            if (value === undefined && !(variable in this._usedVariables)) {
                console.log('variable %s not defined, ' + variable)
                this._usedVariables[variable] = value
            }
        }
    }

    /**
     * Loops through all rules and processes them
     * @param {Date} [date] current date/time
     * @returns {Message[]} list of messages to process
     */
    processRules (date = new Date(), simulation = false) {
        if (simulation !== this._simulation) return { messages: [] }
        const result = { messages: [], usedVariables: {} }
        this._processRule.date = date
        const recentMotion = this._history.getLatestEvents()
        for (const rule of this._rules.rules) {
            try {
                const motions = this._isEventListActual(rule.durationWithoutMovementInMinutes, recentMotion.timestamp, date)
                    ? recentMotion.motions : {}
                const checkResult = this._processRule.check(rule, motions)
                const messages = checkResult.messages
                if (types.isArray(messages) && (messages.length > 0) && types.isObject(messages[0])) {
                    result.messages = [...result.messages, ...messages]
                }
                result.usedVariables = { ...result.usedVariables, ...checkResult.usedVariables }
            } catch (err) {
                this._rules.invalidateRule(rule.name)
                err.message = 'Error in rule "' + rule.name + '": ' + err.message
                errorLog(err)
            }
        }
        if (result.messages.length > 0) {
            this._setVariablesFromOwnMessages(result.messages)
        }
        this._showVariables(result.usedVariables)
        return result
    }
}

module.exports = Motion
