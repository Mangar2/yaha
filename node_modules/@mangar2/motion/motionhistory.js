/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */
'use strict'

/**
 * Maximal lenght of the motion history list
 */
const MAX_HISTORY_LENGTH = 100

/**
 * Hysterese to delete old motion entries
 */
const HISTORY_LENGTH_HYSTERESE = 20

/**
 * @private
 * Creates a motion history object. It stores motion messages in a list and
 * provides the function to get a list of recent motions.
 */
class MotionList {
    constructor () {
        this._motionList = []
    }

    /**
     * @private
     * Adds a detected motion
     * @param {string} topic topic of the motion
     * @param {number} timestamp timestamp of the motion in milliseconds
     */
    _addMotion (topic, timestamp) {
        this._motionList.push({ topic, timestamp })
        if (this._motionList.length > MAX_HISTORY_LENGTH) {
            this._motionList = this._motionList.slice(HISTORY_LENGTH_HYSTERESE)
        }
    }

    /**
     * Gets a displaystring for the latest movement room list
     * @param {object} motions object with key/value where key is the name of the motion sensor and value the timestamp of last motion
     * @returns {string}
     */
    _latestMotionRoomListToDisplayString (motions) {
        let displayString = ''
        let separator = ''
        for (const roomName in motions) {
            const latestRoomMotionAsLocalTimeString = (new Date(motions[roomName])).toLocaleTimeString()
            displayString = displayString + separator + roomName + ' ' + latestRoomMotionAsLocalTimeString
            separator = ', '
        }
        return displayString
    }

    /**
     * Deletes all motion entries
     */
    clear () {
        this._motionList = []
    }

    /**
     * Checks a message for motions and if a motion is included adds it to the motion list
     * @param {Message} message received message
     */
    addMotion (message) {
        const { topic, value } = message
        if (value !== 0) {
            const timestamp = message.getDateOfNewestChange()
            this._addMotion(topic, timestamp.getTime())
        }
    }

    /**
     * Gets the last motion and all "related" motions. A motion is "related", if it happend nearly at
     * the same time
     * @param {number} [relatedMotionTimespanInSeconds=5] time in seconds when a motion is a related motion
     * @returns {Object} with "timestamp" of the newes motion, motions and a "displayString" to print the motions
     */
    getLatestMotionRoomList (relatedMotionTimespanInSeconds = 5) {
        const ONE_SECOND = 1000
        const relatedMotionTimespanInMilliseconds = relatedMotionTimespanInSeconds * ONE_SECOND
        const result = { timestamp: 0, motions: {}, displayString: '' }
        if (this._motionList.length > 0) {
            const latestMotion = this._motionList[this._motionList.length - 1]
            result.timestamp = latestMotion.timestamp
            const minimumTimestamp = result.timestamp - relatedMotionTimespanInMilliseconds
            for (let index = this._motionList.length - 1; index >= 0; index--) {
                const motion = this._motionList[index]
                if (motion.timestamp >= minimumTimestamp && result.motions[motion.topic] === undefined) {
                    result.motions[motion.topic] = motion.timestamp
                }
            }
            result.displayString = this._latestMotionRoomListToDisplayString(result.motions)
        }
        return result
    }
}

module.exports = MotionList
