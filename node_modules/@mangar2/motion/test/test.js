/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */
'use strict'

const testMotionHistory = require('./testMotionHistory')
const Message = require('@mangar2/message')
const UnitTest = require('@mangar2/unittest')
const unitTest = new UnitTest(true, true)
const Motion = require('@mangar2/motion')

const ruleAllow = {
    motion: {
        rules: {
            sleeping: {
                status: 'awake',
                durationWithoutMovementInMinutes: 15,
                require: [
                    'first/required/motion'
                ],
                allow: [
                    'first/bathroom/main',
                    'first/study/main',
                    'first/dressingroom/main'
                ],
                topic: 'system/state/presence',
                value: 'sleeping'
            }
        }
    }
}

const ruleDeny = {
    motion: {
        rules: {
            sleeping: {
                status: 'sleeping',
                require: [
                    'first/required/motion'
                ],
                deny: [
                    'first/bathroom/main',
                    'first/study/main',
                    'first/dressingroom/main'
                ],
                topic: 'system/state/presence',
                value: 'awake'
            }
        }
    }
}

function testRequiredMotion () {
    const motion = new Motion(ruleAllow)
    const now = new Date()
    now.setMinutes(now.getMinutes() - 16)
    motion.addMotion(new Message('first/required/motion', 1, 'hello world', now))
    const result = motion.processRules()
    unitTest.assertEqual(result.messages.length, 1, 'required motion')
    unitTest.assertEqual(result.messages[0].topic, 'system/state/presence', 'required motion')
    unitTest.assertEqual(result.messages[0].value, 'sleeping', 'required motion')

    now.setMinutes(now.getMinutes() + 2)
    motion.addMotion(new Message('first/required/motion', 1, 'hello world', now))
    unitTest.assertEqual(motion.processRules().messages.length, 0, 'required motion')
}

function testAllowedMotion () {
    const motion = new Motion(ruleAllow)
    const now = new Date()
    now.setMinutes(now.getMinutes() - 16)
    motion.addMotion(new Message('first/required/motion', 1, 'hello world', now))
    motion.addMotion(new Message('first/study/main', 1, 'hello world', now))
    motion.addMotion(new Message('first/bathroom/main', 1, 'hello world', now))
    motion.addMotion(new Message('first/dressingroom/main', 1, 'hello world', now))

    const result = motion.processRules()
    unitTest.assertEqual(result.messages.length, 1, 'allowed motion 1')
    unitTest.assertEqual(result.messages[0].topic, 'system/state/presence', 'allowed motion 2')
    unitTest.assertEqual(result.messages[0].value, 'sleeping', 'allowed motion 3')

    motion.addMotion(new Message('first/hobbycellar/motion', 1, 'hello world', now))
    unitTest.assertEqual(motion.processRules().messages.length, 0, 'not allowed motion')
}

function testDeniedMotion () {
    const motion = new Motion(ruleDeny)
    const now = new Date()
    motion.addMotion(new Message('first/required/motion', 1, 'hello world', now))
    motion.addMotion(new Message('first/hobbycellar/motion', 1, 'hello world', now))

    const result = motion.processRules()
    unitTest.assertEqual(result.messages.length, 1, 'denied motion 1')
    unitTest.assertEqual(result.messages[0].topic, 'system/state/presence', 'denied motion 2')
    unitTest.assertEqual(result.messages[0].value, 'awake', 'denied motion 3')

    motion.addMotion(new Message('first/bathroom/main', 1, 'hello world', now))
    motion.addMotion(new Message('first/dressingroom/main', 1, 'hello world', now))
    unitTest.assertEqual(motion.processRules().messages.length, 0, 'denied motion 4')
}

function testActivationTime () {
    const rule = { ...ruleDeny }
    rule.motion.rules.sleeping.time = '23:00'
    const motion = new Motion(rule)
    const now = new Date()
    motion.addMotion(new Message('first/required/motion', 1, 'hello world', now))

    const late = new Date()
    late.setHours(23, 0, 0)
    const result = motion.processRules(late)
    unitTest.assertEqual(result.messages.length, 1, 'testActivationTime')
    unitTest.assertEqual(result.messages[0].topic, 'system/state/presence', 'testActivationTime')
    unitTest.assertEqual(result.messages[0].value, 'awake', 'testActivationTime')

    const early = new Date()
    early.setHours(22, 0, 0)
    unitTest.assertEqual(motion.processRules(early).messages.length, 0, 'testActivationTime')
}

function testDuration () {
    const rule = { ...ruleDeny }
    rule.time = '23:00'
    rule.motion.rules.sleeping.duration = '3:00'
    const motion = new Motion(rule)
    const now = new Date()
    motion.addMotion(new Message('first/required/motion', 1, 'hello world', now))

    const recent = new Date()
    recent.setHours(25, 0, 0)
    const result = motion.processRules(recent)
    unitTest.assertEqual(result.messages.length, 1, 'testDuration')
    unitTest.assertEqual(result.messages[0].topic, 'system/state/presence', 'testDuration')
    unitTest.assertEqual(result.messages[0].value, 'awake', 'testDuration')

    const late = new Date()
    late.setHours(27, 0, 0)
    unitTest.assertEqual(motion.processRules(late).messages.length, 0, 'testDuration')
}

testMotionHistory(unitTest)
testRequiredMotion()
testAllowedMotion()
testDeniedMotion()
testActivationTime()
testDuration()

unitTest.showResult(24)
