/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */

'use strict'

const DEBUG = false

const testMotionHistory = require('./testMotionHistory')
const Message = require('@mangar2/message')
const UnitTest = require('@mangar2/unittest')
const unitTest = new UnitTest(DEBUG, DEBUG)
const Motion = require('@mangar2/motion')
const { timeOfDayStringToDate } = require('@mangar2/time')

let testNo = 0

/**
 * Adds motions to the automation class
 * @param {Motion} automation automation class
 * @param {Object} motionList list of motions, format topic:timeOfDayString
 */
function setMotions (automation, motionList) {
    for (const motionTopic in motionList) {
        const motionTime = timeOfDayStringToDate(motionList[motionTopic])
        automation.processMessage(new Message(motionTopic, 1, 'test motion', motionTime))
    }
}

/**
 * Sends messages to the automation class to set variables
 * @param {Motion} automation automation class
 * @param {Object} variableList list of variable: value elements to set variables
 */
function sendMessages (automation, variableList) {
    if (variableList !== undefined) {
        for (const variable in variableList) {
            automation.processMessage(new Message(variable, variableList[variable], 'test'))
        }
    }
}

/**
 * Tests the result from the rule processor
 * @param {string} fileName name of the current test file
 * @param {Object} result result of the rule processor
 * @param {Message[]} result.messages messages created
 * @param {Object} test test definition including the expected results
 * @param {Object[]} test.results list of expected results
 */
function checkResult (fileName, result, test) {
    unitTest.assertEqual(result.messages.length, test.results.length, 'testNo:' + testNo + ' file:' + fileName + ' test:' + test.name)
    for (const index in test.results) {
        const expected = test.results[index]
        const message = result.messages[index]
        if (message !== undefined) {
            unitTest.assertEqual(expected.topic, message.topic, 'topic ' + test.name)
            unitTest.assertEqual(expected.value, message.value, 'value ' + test.name)
            unitTest.assertEqual(expected.QoS, message.QoS, 'qos ' + test.name)
        }
    }
}

/**
 * Runs a list of tests define in JSON format
 * @param {string} fileName name of the current test file
 * @param {Object} testcase test case to run
 * @param {Object} testcase.rule definition of rules
 * @param {Object} testcase.subscriptions expected list of subscriptions
 * @param {Object[]} testcase.tests Array of tests
 */
function runTestcase (fileName, testcase) {
    const automation = new Motion(
        { motionTopics: ['+/+/motion', '$SYS/+/set'], subscribeQoS: 2, longitude: 8.247253, latitude: 49.992862 },
        testcase.rule)
    const subscriptions = automation.getSubscriptions()
    unitTest.assertDeepEqual(subscriptions, testcase.subscriptions,
        'found: ' + JSON.stringify(subscriptions, null, 2) + '\n' +
        'expected: ' + JSON.stringify(testcase.subscriptions, null, 2))
    for (const test of testcase.tests) {
        const testTime = timeOfDayStringToDate(test.time)
        sendMessages(automation, test.variables)
        setMotions(automation, test.motions)
        const result = automation.processRules(testTime)
        checkResult(fileName, result, test)
        testNo++
    }
}

testMotionHistory(unitTest)
const files = [
    'leaving'
]
for (const file of files) {
    runTestcase(file, require('./' + file + '.json'))
}

unitTest.showResult(26)
