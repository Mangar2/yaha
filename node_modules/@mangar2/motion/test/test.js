/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */

'use strict'

const testMotionHistory = require('./testMotionHistory')
const Message = require('@mangar2/message')
const UnitTest = require('@mangar2/unittest')
const unitTest = new UnitTest(false)
const Motion = require('@mangar2/motion')

function runTest (testcase) {
    const motion = new Motion({ motionTopics: ['+/+/motion'], subscribeQoS: 2 }, testcase.rule)
    const subscriptions = motion.getSubscriptions()
    unitTest.assertDeepEqual(subscriptions, { '$SYS/+/set': 2, '+/+/motion': 2, 'system/state/presence': 2 })
    for (const test of testcase.tests) {
        for (const variable in test.variables) {
            motion.processMessage(new Message(variable, test.variables[variable], 'test'))
        }
        const checkTime = new Date()
        if (test.time !== undefined) {
            const chunks = test.time.split(':')
            checkTime.setHours(chunks[0], chunks[1])
        }
        const messageTime = new Date(checkTime)
        if (test.minutes !== undefined) {
            messageTime.setMinutes(messageTime.getMinutes() + test.minutes)
        }
        for (const motionTopic of test.motions) {
            motion.processMessage(new Message(motionTopic, 1, 'test motion', messageTime))
        }
        const result = motion.processRules(checkTime)
        unitTest.assertEqual(result.messages.length, test.results.length, test.name)
        if (result.messages.length !== test.results.length) {
            motion.processRules(checkTime)
        }
        for (const index in test.results) {
            const expected = test.results[index]
            const message = result.messages[index]
            if (message !== undefined) {
                unitTest.assertEqual(expected.topic, message.topic, 'topic ' + test.name)
                unitTest.assertEqual(expected.value, message.value, 'value ' + test.name)
                unitTest.assertEqual(expected.QoS, message.QoS, 'qos ' + test.name)
            }
        }
    }
}

testMotionHistory(unitTest)
runTest(require('./allow.json'))
runTest(require('./deny.json'))

unitTest.showResult(41)
