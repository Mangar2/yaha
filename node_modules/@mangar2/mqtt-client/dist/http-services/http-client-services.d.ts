/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 * @overview Provides functionalities to communicate with an mqtt broker over http
 */
import { SubscribeResult, UnsubscribeResult, ConnectResult, topics_t, IMessage } from '@mangar2/mqtt-utils';
import { IMqttClientServices } from '../mqtt-service/imqtt-client-services';
import { BrokerOptions } from '../service/types';
export type version_t = '0.0' | '1.0';
/**
 * @private
 * @description
 * Gets the IP v4 address of the current device
 * @returns {string} IP v4 address
 */
export declare function getIPv4Address(): string;
/**
 * Represents the options for configuring an MQTT client.
 */
export type HttpClientOptions = {
    /**
     * The client ID used to identify the MQTT client.
     */
    clientId: string;
    /**
     * The options for configuring the MQTT broker.
     */
    brokerOptions: BrokerOptions;
    /**
     * The listener port number for the MQTT client.
     */
    listener?: number;
    /**
     * The version of the MQTT protocol to use.
     */
    version?: version_t;
};
export declare class HttpClient implements IMqttClientServices {
    private options;
    private _server;
    private _client;
    private _version;
    private _clientId;
    private nextPacketId;
    constructor(options: HttpClientOptions);
    /**
     * @private
     * @description
     * Provides a packet id for the client
     * @returns {number} packet id
     */
    private providePacketId;
    /**
     * Checks if the MQTT client supports a specific feature.
     * @param feature - The feature to check.
     * @returns True if the client supports the feature, false otherwise.
     */
    supportsFeature(feature: string): boolean;
    /**
     * @private
     * @description
     * Extracts the error message from an error
     * @param {string|Error|any} err
     * @returns {string} error message
     */
    private getMessage;
    /**
     * Connects to the MQTT server.
     *
     * @param clean - A boolean indicating whether to clean the session or not.
     * @returns A Promise that resolves to a ConnectResult object.
     * @throws An error if unable to connect.
     */
    connect(clean: boolean): Promise<ConnectResult>;
    /**
     * Disconnects the MQTT client from the server.
     * @returns A promise that resolves when the client is successfully disconnected.
     * @throws An error if the disconnection fails.
     */
    disconnect(): Promise<void>;
    /**
     * Subscribes to MQTT topics.
     *
     * @param topics - The topics to subscribe to.
     * @returns A promise that resolves to a SubscribeResult object.
     * @throws An error if unable to subscribe.
     */
    subscribe(topics: topics_t): Promise<SubscribeResult>;
    /**
     * Unsubscribes from MQTT topics.
     *
     * @param topics - The topics to unsubscribe from.
     * @returns A promise that resolves to an UnsubscribeResult object.
     * @throws An error if unable to unsubscribe.
     */
    unsubscribe(topics: topics_t): Promise<UnsubscribeResult>;
    /**
     * Sends a ping request to signal the client is alive
     * @returns {boolean} true on success
     */
    pingreq(token: string): Promise<void>;
    publish(token: string, message: IMessage, serviceName: string): Promise<string[]>;
    onPublish(callback: (message: IMessage) => void): void;
    start(): void;
    close(): void;
}
