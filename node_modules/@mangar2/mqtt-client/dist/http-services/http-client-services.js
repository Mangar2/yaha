"use strict";
/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 * @overview Provides functionalities to communicate with an mqtt broker over http
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpClient = void 0;
const index_1 = require("../index");
class HttpClient {
    constructor(options, _logger) {
        this.options = options;
        this._logger = _logger;
        const { clientId, brokerOptions, listener } = options;
        this._server = new index_1.HttpReceiveServices(listener || 0, this._logger);
        this._client = new index_1.HttpSendServices(clientId, brokerOptions, this._logger);
        this.options.version = this.options.version || '1.0';
    }
    supportsFeature(feature) {
        if (feature === 'pingreq') {
            return this.options.version !== '0.0';
        }
        else if (feature in ['connect', 'disconnect', 'subscribe', 'publish']) {
            return true;
        }
        else {
            return false;
        }
    }
    async connect(clientId, clean, version) {
        // Connect sends the client's listening port to the broker
        const port = this._server.port;
        return this._client.connect.connect({ clientId, clean, version, port });
    }
    async disconnect() {
        return this._client.connect.disconnect(this.options.version);
    }
    async subscribe(topics) {
        return this._client.connect.subscribe(this.options.version, topics);
    }
    async pingreq(token) {
        return this._client.connect.pingreq(token);
    }
    async publish(token, message, serviceName) {
        return this._client.publish(token, message, serviceName, this.options.version);
    }
    onPublish(callback) {
        this._server.onPublish.on('publish', callback);
    }
    start() {
        this._server.listen();
    }
    close() {
        this._server.close();
    }
}
exports.HttpClient = HttpClient;
//# sourceMappingURL=http-client-services.js.map