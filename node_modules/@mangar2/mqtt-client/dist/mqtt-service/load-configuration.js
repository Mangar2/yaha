"use strict";
/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadConfiguration = void 0;
const utils_1 = require("@mangar2/utils");
const mqtt_utils_1 = require("@mangar2/mqtt-utils");
const checkinput_1 = __importDefault(require("@mangar2/checkinput"));
const configuration_types_1 = require("./configuration-types");
/**
 * Retrieves the configuration from the specified file.
 * @param filename - The path to the configuration file.
 * @returns The configuration object.
 */
const getConfiguration = (filename) => {
    const checkConfiguration = new checkinput_1.default(configuration_types_1.configurationSchema);
    // path to your configuration file
    const config = (0, utils_1.readConfiguration)(filename);
    if (!utils_1.Types.isObject(config.runservices)) {
        (0, utils_1.errorLog)('The active configuration does not contain a "runservice" section, program stopped');
        process.exit(1);
    }
    config.runservices = (0, mqtt_utils_1.sanitize)(config.runservices, configuration_types_1.defaultConfiguration, checkConfiguration);
    return config;
};
/**
 * Loads and sanitizes the configuration file, using "yahaconfig.json" as default name, if the process
 * parameters do not include a configuration file name
 * @returns {Object} configuration object
 */
const loadConfiguration = () => {
    const config = getConfiguration('yahaconfig.json');
    return config;
};
exports.loadConfiguration = loadConfiguration;
//# sourceMappingURL=load-configuration.js.map