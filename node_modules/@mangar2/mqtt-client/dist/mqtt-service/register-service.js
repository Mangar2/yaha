"use strict";
/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2024 Volker Böhm
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerService = void 0;
const utils_1 = require("@mangar2/utils");
const load_configuration_1 = require("./load-configuration");
const DEBUG = true;
/**
 * Connects the background task functionality of a registered object with the
 * mqttClient handlers
 * @param {MqttServer} mqttClient mqtt object managing the services
 * @param {Object} service object in registration
 * @param {string} serviceName name of the service to start
 */
const registerBackgroundTasks = (mqttClient, service, serviceName) => {
    if (utils_1.Types.isAnyFunction(service.on)) {
        service.on('publish', (message) => mqttClient.publish(message, serviceName));
    }
    if (utils_1.Types.isAnyFunction(service.close)) {
        mqttClient.registerCloseFunction(async () => { if (service.close)
            service.close(); });
    }
    if (utils_1.Types.isAnyFunction(service.run)) {
        service.run();
    }
};
/**
 * Registers subscriptions
 * @param {MqttClient} mqttClient client providing mqtt services
 * @param {Object} service registered service object
 * @param {string} serviceName name of the service to start
 * @param {function} prepare function to call on update message
 */
const registerSubscriptions = async (mqttClient, service, serviceName, prepare) => {
    const updateString = '$SYS/' + serviceName + '/update';
    const subscriptions = utils_1.Types.isAnyFunction(service.getSubscriptions) ? service.getSubscriptions() : {};
    subscriptions[updateString] = 1;
    mqttClient.registerRecipient(serviceName, subscriptions, async (message) => {
        if (message.topic === updateString) {
            const config = (0, load_configuration_1.loadConfiguration)()[serviceName];
            await prepare(config, service);
            const newSubscriptions = service.getSubscriptions ? service.getSubscriptions() : {};
            newSubscriptions[updateString] = 1;
            await mqttClient.subscribe(serviceName, newSubscriptions);
            return [];
        }
        else {
            return service.handleMessage(message);
        }
    });
};
/**
 * Registers a service with the MQTT client.
 *
 * @param mqttClient The MQTT client instance.
 * @param config The service configuration.
 * @param serviceName The name of the service.
 * @param serviceImplementation The implementation module of the service.
 */
const register = async (mqttClient, config, serviceName, serviceImplementation) => {
    try {
        const { prepare } = require(serviceImplementation);
        // watchRules()
        const mqttService = await prepare(config);
        await registerSubscriptions(mqttClient, mqttService, serviceName, prepare);
        if (config.intervalInSeconds && mqttService.processTasks) {
            mqttClient.registerSender(config.intervalInSeconds * 1000, async () => {
                const result = mqttService.processTasks();
                return result.messages;
            });
        }
        registerBackgroundTasks(mqttClient, mqttService, serviceName);
        console.log('started ' + serviceName + ' service');
    }
    catch (err) {
        (0, utils_1.errorLog)(err, DEBUG);
    }
};
/**
 * Registers a service with the MQTT client.
 *
 * @param mqttClient - The MQTT client instance.
 * @param configurations - The service configurations.
 * @param serviceName - The name of the service.
 * @param serviceImplementation - The implementation of the service.
 * @throws Error if no configuration is found for the service.
 */
const registerService = async (mqttClient, configurations, serviceName, serviceImplementation) => {
    const config = configurations[serviceName];
    const isIncluded = configurations.runservices.services.includes(serviceName);
    if (!isIncluded) {
        return;
    }
    if (!config) {
        throw new Error(`no configuration found for service ${serviceName}`);
    }
    await register(mqttClient, config, serviceName, serviceImplementation);
};
exports.registerService = registerService;
//# sourceMappingURL=register-service.js.map