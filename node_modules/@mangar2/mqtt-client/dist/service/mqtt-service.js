"use strict";
/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 * @overview
 * Helping functions to send mqtt data
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MqttService = void 0;
const DEBUG = false;
const utils_1 = require("@mangar2/utils");
const on_connect_1 = require("@mangar2/mqtt-client/src/service/on-connect");
const on_publish_1 = require("@mangar2/mqtt-client/src/service/on-publish");
class MqttService {
    constructor(mqttServer) {
        this.onConnect = new on_connect_1.OnConnect(mqttServer);
        this.onPublish = new on_publish_1.OnPublish();
    }
    /**
     * @description
     * Calls a connection interface
     * @param {string} control name of the mqtt controls to call (connect, disconnect, ...)
     * @param {Object} payload parameters for the interface (see interfaces)
     * @param {Object} headers headers of the http message
     * @returns {httpReturn} http return information
     */
    processRequest(control, payload, headers) {
        let result = { headers: { 'Content-Type': 'text/plain' }, payload: 'request path not found: ' + control, statusCode: 404 };
        try {
            if (control in ['/connect']) {
                this.onConnect.handleHttpRequest(control, headers, payload);
            }
        }
        catch (err) {
            let error = 'Unknown error';
            if (err instanceof Error) {
                error = control + ' ' + err.message;
                (0, utils_1.errorLog)(err, DEBUG);
            }
            else if (typeof (err) === 'string') {
                error = control + ' ' + err;
                (0, utils_1.errorLog)(err, DEBUG);
            }
            // this.publishLogMessage(controls, 'fail', 'client request', payload.clientId)
            result = {
                headers: { 'Content-Type': 'application/json' },
                payload: JSON.stringify({ error }),
                statusCode: 400
            };
        }
        return result;
    }
}
exports.MqttService = MqttService;
//# sourceMappingURL=mqtt-service.js.map