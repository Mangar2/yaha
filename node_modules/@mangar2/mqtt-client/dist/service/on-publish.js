"use strict";
/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2023 Volker Böhm
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.OnPublish = void 0;
const mqtt_utils_1 = require("@mangar2/mqtt-utils");
const utils_1 = require("@mangar2/utils");
/**
 * Calls a callback whenever a publish message arrives. Register the callback with
 * onPublish.on('publish', (message, dup) => {})
 * @param {number} listenerPort - The port on which the listener will be set up.
 * @param {LogSettings} logSettings - Settings for logging.
 * @param {number} [qos2PubrelTimeoutInSeconds=7200] - The timeout for QoS 2 publish release in seconds.
 */
class OnPublish {
    constructor(logSettings, qos2PubrelTimeoutInSeconds = 7200) {
        this._qos2Queue = {};
        this._logFilter = new mqtt_utils_1.LogFilter();
        this._logFilter.changePattern(logSettings);
        this._callbacks = new utils_1.Callbacks(['publish']);
        this._qos2PubrelTimeoutInMilliseconds = qos2PubrelTimeoutInSeconds * 1000;
    }
    /**
     * Handles incoming server requests.
     * @param {string} path - The request path.
     * @param {headers_t} headers - The headers of the request.
     * @param {string} payload - The payload of the request.
     * @param {ServerResponse} res - The response object.
     */
    handleRequest(path, headers, payload) {
        switch (path) {
            case '/publish':
                return this.onPublish(headers, JSON.parse(payload));
            case '/pubrel':
                return this.onPubrel(headers);
            case '/log':
                return this.onLog(JSON.parse(payload));
            default:
                throw new Error('Illegal interface ' + path);
        }
    }
    /**
     * Gets the log filter.
     * @returns {LogFilter} The log filter.
     */
    get logFilter() {
        return this._logFilter;
    }
    /**
     * Registers a callback for a specific event.
     * @param {string} event - The event name.
     * @param {ProcessMessage} callback - The callback to be invoked.
     */
    on(event, callback) {
        this._callbacks.on(event, callback);
    }
    /**
     * Deletes old entries from the QoS 2 message queue.
     */
    deleteOldQos2QueueEntries() {
        const now = new Date().getTime();
        for (const entry in this._qos2Queue) {
            if (this._qos2Queue[entry].time + this._qos2PubrelTimeoutInMilliseconds < now) {
                delete this._qos2Queue[entry];
            }
            else {
                break;
            }
        }
    }
    /**
     * Handles incoming PUBREL requests.
     * @param {headers_t} headers HTTP headers of the request.
     * @param {ServerResponse} res The server response object.
     */
    onPubrel(headers) {
        const result = mqtt_utils_1.Interfaces.onPubrel(headers);
        if (result.packetid) {
            delete this._qos2Queue[result.packetid];
            this.deleteOldQos2QueueEntries();
        }
        return result;
    }
    /**
     * Remembers a message for handling QoS 2.
     * @param {string} topic The topic of the message.
     * @param {string} packetid The packet ID.
     */
    rememberMessage(topic, packetid) {
        this._qos2Queue[packetid] = { time: Date.now(), topic };
    }
    /**
     * Handles incoming publish requests. Calls the publish callback.
     * @param {headers_t} headers HTTP headers of the request.
     * @param {any} payload The payload of the request.
     * @param {ServerResponse} res The server response object.
     */
    onPublish(headers, payload) {
        const message = payload.message ? payload.message : payload;
        const messageClone = mqtt_utils_1.Message.createMessage(message, headers.qos, headers.retain);
        mqtt_utils_1.Message.validate(messageClone);
        const result = mqtt_utils_1.Interfaces.onPublish(headers);
        const dup = headers.dup === '1' || headers.dup === 'true';
        const packetid = result.packetid;
        this.logFilter.condLogMessage('received', messageClone, dup);
        const qos2PacketPublishedBefore = dup && utils_1.Types.isNumber(packetid) && this._qos2Queue[packetid] !== undefined;
        if (!qos2PacketPublishedBefore) {
            if (messageClone.qos === 2 && utils_1.Types.isNumber(packetid)) {
                this.rememberMessage(messageClone.topic, packetid);
            }
            this._callbacks.invokeCallback('publish', messageClone, dup);
        }
        return result;
    }
    /**
     * Handles log pattern changes.
     * @param {LogPattern[]} payload The new log patterns.
     * @param {ServerResponse} res The server response object.
     */
    onLog(payload) {
        this._logFilter.changePattern(payload);
        return { statusCode: 204, headers: { 'Content-Type': 'application/json' }, payload: '' };
    }
}
exports.OnPublish = OnPublish;
//# sourceMappingURL=on-publish.js.map