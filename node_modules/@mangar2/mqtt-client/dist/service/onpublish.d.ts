import { LogFilter } from '@mangar2/mqtt-utils';
type LogSettings = any;
/**
 * @callback ProcessMessage
 * @param message the message received
 * @param qos the quality of service information
 * @param dup flag signaling duplicates
 */
type ProcessMessage = (message: object, dup: boolean) => void;
/**
 * Calls a callback whenever a publish message arrives. Register the callback with
 * onPublish.on('publish', (message, dup) => {})
 * @param {number} listenerPort - The port on which the listener will be set up.
 * @param {LogSettings} logSettings - Settings for logging.
 * @param {number} [qos2PubrelTimeoutInSeconds=7200] - The timeout for QoS 2 publish release in seconds.
 */
export declare class OnPublish {
    _logFilter: LogFilter;
    private _server;
    private _callbacks;
    private _qos2Queue;
    private _qos2PubrelTimeoutInMilliseconds;
    constructor(listenerPort: number, logSettings: LogSettings, qos2PubrelTimeoutInSeconds?: number);
    /**
     * Handles incoming server requests.
     * @param {string} payload - The payload of the request.
     * @param {IncomingHttpHeaders} headers - The headers of the request.
     * @param {string} path - The request path.
     * @param {ServerResponse} res - The response object.
     */
    private handleRequest;
    /**
     * Gets the port number.
     * @returns {number | undefined} The port number if available.
     */
    get port(): number | undefined;
    /**
     * Gets the log filter.
     * @returns {LogFilter} The log filter.
     */
    get logFilter(): LogFilter;
    /**
     * Starts the server to listen for incoming requests.
     */
    listen(): void;
    /**
     * Registers a callback for a specific event.
     * @param {string} event - The event name.
     * @param {ProcessMessage} callback - The callback to be invoked.
     */
    on(event: string, callback: ProcessMessage): void;
    /**
     * Deletes old entries from the QoS 2 message queue.
     */
    private deleteOldQos2QueueEntries;
    /**
     * Handles incoming PUBREL requests.
     * @param {IncomingHttpHeaders} headers HTTP headers of the request.
     * @param {ServerResponse} res The server response object.
     */
    private onPubrel;
    /**
     * Remembers a message for handling QoS 2.
     * @param {string} topic The topic of the message.
     * @param {string} packetid The packet ID.
     */
    private rememberMessage;
    /**
     * Handles incoming publish requests. Calls the publish callback.
     * @param {any} payload The payload of the request.
     * @param {IncomingHttpHeaders} headers HTTP headers of the request.
     * @param {ServerResponse} res The server response object.
     */
    private onPublish;
    /**
     * Handles log pattern changes.
     * @param {LogPattern[]} payload The new log patterns.
     * @param {ServerResponse} res The server response object.
     */
    private onLog;
    /**
     * Closes the server.
     */
    close(): void;
}
export {};
