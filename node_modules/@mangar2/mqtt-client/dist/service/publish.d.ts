/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */
import { IMessage } from '@mangar2/mqtt-utils';
import { headers_t } from '@mangar2/mqtt-client/src/service/types';
export interface IPublishOptions {
    retry?: number;
}
/**
 * @callback PublishMessage
 * @param message the message received
 * @param qos the quality of service information
 * @param dup flag signaling duplicates
 */
export type PublishMessage = (path: string, httpMethod: string, headers: headers_t, payload: string) => void;
export declare class Publish {
    private topicQueues;
    private callbacks;
    private nextPacketId;
    private retry;
    terminate: boolean;
    /**
     * Creates an instance of Publish.
     * @param {Configuration} configuration Configuration for the publisher.
     */
    constructor(options?: IPublishOptions);
    /**
     * Sets a callback.
     * @param {string} event event name (not case sensitive) for the callback
     * @param {function} callback(parameter)
     * @throws {Error} if the event is not supported
     * @throws {Error} if the callback is not 'function'
     */
    on(event: string, callback: PublishMessage): void;
    /**
     * @private
     * @description
     * Sends an object via put as application/json message
     * @param {string} path path for the http PUT
     * @param {Object} payload data to be transported via. PUT
     * @returns {Object} received answer
     */
    private send;
    /**
     * Provides the next packet ID for MQTT messages.
     * @returns {number} The next packet ID.
     */
    private providePacketId;
    /**
     * Attempts to send data to a specified link with retries. If an attempt fails, it retries the operation
     * until the maximum number of retries is reached, with a delay increasing quadratically between attempts.
     *
     * @param {string} link - The URL or endpoint to which the data is sent.
     * @param {RequestDataV2} sendData - An object containing the headers and payload for the request.
     * @returns {Promise<void>} A promise that resolves if the send operation is successful within the
     *                           allotted retries, or rejects with the last error encountered if all retries fail.
     * @throws {Error | any} Throws the error encountered in the last retry attempt. The error could be of any type
     *                       that the `send` method might throw.
     */
    private sendWithRetry;
    /**
     * Sends a message with appropriate retries.
     * @param {RequestDataV2} sendData Data to be sent.
     * @returns {Promise<string>} Result message
     */
    private sendMessage;
    /**
     * Publishes a message to an MQTT topic. For QoS 1 and QoS 2, messages are queued per topic and sent sequentially.
     * QoS 0 messages are sent without confirmation. For QoS 1 and QoS 2, this function manages the message flow,
     * ensuring that messages are sent in order and retried as necessary.
     *
     * @param {string} token Authentication token used for the MQTT connection.
     * @param {Message} message The message object to be published. This includes the topic, payload, and optionally QoS.
     * @param {string} [version='1.0'] The MQTT protocol version to use for the message. Defaults to '1.0'.
     * @returns {Promise<string[]>} A promise that resolves with the result of the publish operation. For QoS 0, it may resolve
     *                          immediately after sending. For QoS 1 and QoS 2, it resolves after the appropriate
     *                          acknowledgment process is completed. It returns a list of success/non success messages
     */
    publish(token: string, message: IMessage, serviceName: string, version?: string): Promise<string[]>;
}
