"use strict";
/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2024 Volker Böhm
 * @overview
 * Provides registration for a test client
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepare = void 0;
const mqtt_utils_1 = require("@mangar2/mqtt-utils");
class TestService {
    constructor(config) {
        this.config = config;
        this.logger = new mqtt_utils_1.Logger();
        this.logger.changePattern([{ module: 'test-module', topic: '#', level: 1 }]);
    }
    handleMessage(message) {
        this.logger.logMessage('test-module', message, false, 'test-client');
        this.logger.printLog();
        this.logger.clearLog();
        return [];
    }
    processTasks() {
        const message = new mqtt_utils_1.Message('test/test-service/eins', 1, 'process tasks', 1);
        this.logger.logMessage('test-module', message, false, 'test-client');
        this.logger.printLog();
        this.logger.clearLog();
        return {
            messages: [
                message
            ]
        };
    }
    getSubscriptions() {
        return this.config.topics;
    }
}
/**
 * Prepares the MQTT service for testing.
 * If a service instance is provided, it is returned as is.
 * Otherwise, a new instance of TestService is created using the provided config.
 * @param config The configuration for the MQTT service.
 * @param service An optional existing instance of IMqttService.
 * @returns The prepared IMqttService instance.
 */
const prepare = (config, service = null) => {
    const result = service || new TestService(config);
    return result;
};
exports.prepare = prepare;
//# sourceMappingURL=test-service.js.map