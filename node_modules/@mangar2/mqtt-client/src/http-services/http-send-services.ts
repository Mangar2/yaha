/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 * @overview Provides functions to connect to the (http based) yaha mqtt broker
 */

import { HttpClient } from '@mangar2/httpservice';
import { IMessage, Logger } from '@mangar2/mqtt-utils';
import { Publish } from '@mangar2/mqtt-client/src/service/publish';
import { Connect } from '@mangar2/mqtt-client/src/service/connect';
import { BrokerOptions } from '@mangar2/mqtt-client/src/service/types';


/**
 * Provides functions to send data to the broker
 */
export class HttpSendServices {
    private _httpClient: HttpClient; 
    private _publish: Publish;
    private _connect: Connect;

    /**
     * Creates a new http service
     * @param port the port on which the server listens
     */
    constructor(senderName:string, brokerOptions: BrokerOptions, logger: Logger) {
        this._httpClient = new HttpClient(brokerOptions.host, brokerOptions.port, 'http');
        this._publish = new Publish();
        this._publish.on('send', (httpMethod, path, headers, payload) => {
            return this._httpClient.sendv2({ path, method: httpMethod, headers, payload });
        })
        this._connect = new Connect(senderName, logger);
        this._connect.on('send', (httpMethod, path, headers, payload ) => {
            return this._httpClient.sendv2({ path, method: httpMethod, headers, payload });
        })
    }

    /**
     * Publishes a message
     */
    public async publish(token: string, message: IMessage, version = '1.0'): Promise<string[]> {
        return this._publish.publish(token, message, version);
    }

    /**
     * Gets the connect object
     */
    get connect(): Connect {
        return this._connect;   
    }

}
