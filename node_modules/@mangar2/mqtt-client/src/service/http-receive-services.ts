/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 * @overview Provides functions to connect to the (http based) yaha mqtt broker
 */

import { HttpServer, HttpClient } from '@mangar2/httpservice';
import { Publish } from '@mangar2/mqtt-client/src/service/publish';
import { Connect } from '@mangar2/mqtt-client/src/service/connect';
import { OnPublish } from '@mangar2/mqtt-client/src/service/on-publish';
import { OnConnect } from '@mangar2/mqtt-client/src/service/on-connect';
import { IMqttServer } from '@mangar2/mqtt-client/src/service/i-mqtt-server';

/**
 * Options for the broker
 */
export type BrokerOptions = {
    port: number;
    host: string;
}

export class HttpService {
    private _httpServer: HttpServer;
    private _httpClient: HttpClient; 
    private _portUsed: number = 0;
    private _onPublish: OnPublish | null = null;
    private _onConnect: OnConnect | null = null;
    private _publish: Publish;

    /**
     * Creates a new http service
     * @param port the port on which the server listens
     */
    constructor(port: number, brokerOptions: BrokerOptions) {
        this._httpServer = new HttpServer(port);
        this._httpClient = new HttpClient(brokerOptions.host, brokerOptions.port, 'http');
        this._publish = new Publish();
        this._publish.on('send', (path, httpMethod, payload, headers) => {
            this._httpClient.sendv2({ path, method: httpMethod, payload, headers });
        })
    }



    /**
     * Enable handling of publish requests
     * @param logPattern the log pattern for the server
     * @param qos2PubrelTimeoutInSeconds the timeout for QoS 2 publish release in seconds
     */
    enablePublish(logPattern: string, qos2PubrelTimeoutInSeconds: number = 7200) {
        this._onPublish = new OnPublish(logPattern, qos2PubrelTimeoutInSeconds);
    }

    /**
     * Enables handling of connect requests
     * @param mqttServer the mqtt server
     * @returns {void}
     * @private
     */
    enableConnect(mqttServer: IMqttServer) {
        this._onConnect = new OnConnect(mqttServer);
    }

    /**
     * Listen for incoming http requests, e.g. from the broker
     * Sets the port used by the server
     */
    listen() {
        this._httpServer.listen();
        this._portUsed = this._httpServer.address?.port || 0;
    }

    /**
     * Registers the post method for the server
     * If the request is a publish request, the request is handled by the onPublish object
     * @private
     * @returns {void}
     */
    private _registerPost() {
        this._httpServer.on('POST', (payload, headers, path, res) => {
            if (this._onPublish !== null && this._onPublish.isPublishRequest(path)) {
                const result = this._onPublish.handleRequest(path, headers, payload);
                res.writeHead(result.statusCode, result.headers);
                res.end(result.payload);
            }
            if (this._onConnect !== null && this._onConnect.isConnectRequest(path)) {
                const result = this._onConnect.handleHttpRequest(path, headers, payload);
                res.writeHead(result.statusCode, result.headers);
                res.end(result.payload);
            }
        });
    }

    /**
     * Gets the port used by the server
     */
    get port(): number {
        return this._portUsed;
    }

    /**
     * Gets the publish object
     */
    get publish(): Publish {
        return this._publish;
    }

}
