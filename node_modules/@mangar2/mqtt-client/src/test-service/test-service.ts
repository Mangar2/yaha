/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2024 Volker Böhm
 * @overview
 * Provides registration for a test client
 */

import { IMessage, Message, topics_t, Logger } from '@mangar2/mqtt-utils'
import { IMqttService } from '../mqtt-service/imqtt-service'

interface ITestConfig {
    topics: topics_t;
}

class TestService implements IMqttService {
    private logger: Logger;
    constructor(private config: ITestConfig) {
        this.logger = new Logger();
        this.logger.changePattern([{ module: 'test-module', topic: '#', level: 1 }]);
    }
    
    handleMessage(message: IMessage): IMessage | IMessage[] {
        this.logger.logMessage('test-module', message, false, 'test-client');
        this.logger.printLog();
        this.logger.clearLog();
        return []
    }

    processTasks(): { messages: IMessage[], [key: string]: any } {
        const message = new Message('test/test-service/eins', 1, 'process tasks', 1)
        this.logger.logMessage('test-module', message, false, 'test-client');
        this.logger.printLog();
        this.logger.clearLog();
        return { 
            messages: [
                message
            ] 
        }
    }

    getSubscriptions () : topics_t {
        return this.config.topics;
    }
}


/**
 * Prepares the MQTT service for testing.
 * If a service instance is provided, it is returned as is.
 * Otherwise, a new instance of TestService is created using the provided config.
 * @param config The configuration for the MQTT service.
 * @param service An optional existing instance of IMqttService.
 * @returns The prepared IMqttService instance.
 */
export const prepare = (config: ITestConfig, service: IMqttService | null = null): IMqttService => {
    const result = service || new TestService(config)
    return result
}
