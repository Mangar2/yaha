/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */

import { Result, RequestData, standardHeaderJSON } from "./interfaces"



/**
 * Type representing the connection options
 */
export interface ConnectOptions {
    clientId: string;
    host: string;
    port: number;
    clean: boolean;
    keepAlive?: number;
}


/**
 * Connection function interface.
 */
interface ConnectionFunction {
    (options: ConnectOptions): RequestData
}

/**
 * Connect functions mapped by their version numbers
 * @private
 */
export const connect: Record<string, ConnectionFunction> = {
    '0.0': (options: ConnectOptions) => {
        const { clientId, host, port, clean } = options;
        const payload = {
            clientId, host, port, clean
        };
        const headers = { ...standardHeaderJSON, version: '0.0' };

        const resultCheck = (result: Result) => {
            return result.statusCode === 200 &&
                result.headers['content-type'].startsWith('text/plain') &&
                result.payload.toLowerCase() === 'connack';
        }

        return { headers, payload, resultCheck };
    },

    '1.0': (options: ConnectOptions) => {
        const { clientId, host, port, clean, keepAlive } = options;
        const payload = {
            clientId, host, port, clean, keepAlive
        };
        const headers = { ...standardHeaderJSON, version: '1.0' };

        const resultCheck = (result: Result) => {
            return result.statusCode === 200 &&
                result.headers['content-type'].startsWith('application/json') &&
                result.headers.packet === 'connack';
        }

        return { headers, payload, resultCheck };
    }
}

/**
 * Connection response interface.
 */
interface ConnectionResponseFunction {
    (payload: ConnectOptions): Result
}

/**
 * OnConnect functions mapped by their version numbers
 * @private
 */
export const onConnect: Record<string, ConnectionResponseFunction> = {
    '0.0': () => {
        return {
            headers: { 'content-type': 'text/plain; charset=UTF-8', version: '0.0' },
            payload: 'connack',
            statusCode: 200
        };
    },

    '1.0': (payload: ConnectOptions) => {
        return {
            headers: { 'content-type': 'application/json; charset=UTF-8', packet: 'connack', version: '1.0' },
            payload: JSON.stringify(payload),
            statusCode: 200
        };
    }
}

