/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */

import { IResult, IResultWithPacketid, RequestData, standardHeaderJSON, topics_t } from "./interfaces"

/** Function type for Subscribe request */
interface SubscribeRequestFunction {
    (topics: topics_t, clientId: string, packetid: number): RequestData
}

/** Function type for Subscribe response */
interface SubscribeResponseFunction {
    (headers: Record<string, string>, qosArray: number[]): IResult;
}

/** Object to define the functions for each protocol version for a subscribe request
 * @private
 * @description Subscribes to a client
 * @param {Object} topics {topic: qos, ...}
 * @param {string} clientId unique client identifier
 * @param {string} packetid unique id of the package (not used on version 0.0)
 * @returns {Object} {headers, payload, resultCheck(result)}
 */
export const subscribe: Record<string, SubscribeRequestFunction> = {
    '0.0': (topics: topics_t, clientId: string): RequestData => {
        const subscribeData = { QoS: 0, topics: [] as string[] }
        for (const topic in topics) {
            subscribeData.QoS = topics[topic];
            subscribeData.topics.push(topic)
        }
        const payload = {
            clientId, subscribe: subscribeData
        }
        const headers = { ...standardHeaderJSON, version: '0.0' }

        const resultCheck = (result: IResult) => {
            return result.statusCode === 200 &&
                result.headers['content-type'].startsWith('text/plain') &&
                result.payload.toLowerCase() === 'suback'
        }

        return { headers, payload, resultCheck }
    },

    '1.0': (topics: topics_t, clientId: string, packetid: number): RequestData => {
        const payload = {
            clientId, topics
        }
        const headers = { ...standardHeaderJSON, packetid: packetid.toString(), version: '1.0' }

        const resultCheck = (result: IResult) => {
            return result.statusCode === 200 &&
                result.headers['content-type'].startsWith('application/json') &&
                result.headers.packet === 'suback' &&
                Number(result.headers.packetid) === packetid
        }
        return { headers, payload, resultCheck }
    }
}

/** Object to define the functions for each protocol version for a subscribe response 
 * @description Creates the subscribe result objects
 * @param {Object} headers input headers
 * @param {Array} qosArray quality of service reply array
 * @returns {Object} {headers, payload, statusCode, packetid}
 */
export const onSubscribe: Record<string, SubscribeResponseFunction> = {
    '0.0': (headers: Record<string, string>): IResultWithPacketid => {
        return {
            headers: { 'content-type': 'text/plain; charset=UTF-8', version: '0.0' },
            payload: 'suback',
            statusCode: 200,
            packetid: Number(headers.id)
        }
    },

    '1.0': (headers: Record<string, string>, qosArray: number[]): IResultWithPacketid => {
        const packetid = headers.packetid

        return {
            headers: { 'content-type': 'application/json; charset=UTF-8', version: '1.0', packet: 'suback', packetid },
            payload: JSON.stringify({ qos: qosArray }),
            statusCode: 200,
            packetid: Number(headers.packetid)
        }
    }
}



