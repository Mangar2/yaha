/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */

'use strict'

import { Result, RequestData, standardHeaderJSON, standardHeaderText } from "./interfaces"

/**
 * @private
 * @description Generates request data for a client unsubscribe operation.
 * @param topics - Array of topic strings
 * @param clientId - Unique client identifier
 * @param packetid - Unique id of the package. Not used for version '0.0'.
 * @returns Request data with headers, payload and a result check function.
 */
const unsubscribe: Record<string, (topics: string[], clientId: string, packetid: number) => RequestData> = {
    '0.0': (topics, clientId) => {
        const payload = { topics, clientId };
        const headers = { ...standardHeaderText, version: '0.0' };

        const resultCheck = (result: Result) => result.statusCode === 200
                && result.headers['content-type'].startsWith('text/plain')
                && result.payload.toLowerCase() === 'unsuback';

        return { headers, payload, resultCheck };
    },

    '1.0': (topics, clientId, packetid): RequestData => {
        const payload = { topics, clientId };
        const headers = { ...standardHeaderJSON, packetid: packetid.toString(), version: '1.0' };

        const resultCheck = (result: Result) => result.statusCode === 204
                && result.headers['content-type'].startsWith('application/json')
                && result.headers.packet === 'unsuback'
                && Number(result.headers.packetid) === packetid;

        return { headers, payload, resultCheck };
    }
}

/**
 * @private
 * @description Generates response data for an unsubscribe request.
 * @param headers - Input headers
 * @returns Response data with headers, payload, status code and packetid.
 */
const onUnsubscribe: Record<string, (headers: Record<string, string>) => Result> = {
    '0.0': headers => ({
        headers: { 'content-type': 'text/plain; charset=UTF-8', version: '0.0' },
        payload: 'unsuback',
        statusCode: 200,
        packetid: Number(headers.id)
    }),

    '1.0': headers => {
        const packetid = headers.packetid;
        return {
            headers: { 'content-type': 'application/json; charset=UTF-8', packet: 'unsuback', version: '1.0', packetid },
            payload: '',
            statusCode: 204,
            packetid: Number(packetid)
        }
    }
}

export { unsubscribe, onUnsubscribe };
