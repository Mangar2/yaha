/**
 * @private
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */

'use scrict'

const types = require('@mangar2/types')
const CheckResult = require('./checkresult')

/**
 * @private
 * @description Checks, if a is a multiple of b
 * @param {number} a
 * @param {number} b
 * @returns {boolean}
 */
function isMultipleOf (a, b) {
    let result = false
    if (b !== 0) {
        const factor = Math.trunc(a / b)
        const multiply = b * factor
        const difference = Math.abs(a - multiply)
        result = difference <= a / 1E12
    }
    return result
}

/**
 * @private
 * @description Checks a boolean variable
 * @param {boolean} variable input data
 * @returns {CheckResult} result of the check
 */
function checkBoolean (variable) {
    const result = new CheckResult(true)
    if (variable !== true && variable !== false) {
        result.invalidate("'" + variable + "' is not boolean")
    }
    return result
}

/**
 * @private
 * @description Checks if a value evaluates to true or false
 * @param {Object} definition true or false
 * @returns {CheckResult} result of the check
 */
function checkTrueFalse (definition) {
    const result = new CheckResult(true)
    if (definition === true) {
        // do nothing true validates to everything
    } else if (definition === false) {
        result.invalidate(' false invalidates everything ')
    }
    return result
}

/**
 * @private
 * @description Checks a number variable against a defintion
 * @param {Object} definition number definition
 * @param {string} variable input data
 * @returns {CheckResult} result of the check
 */
function checkNumber (definition, variable) {
    const result = new CheckResult(true)
    if (definition.minimum !== undefined && variable < definition.minimum) {
        result.invalidate(variable + ' below ' + definition.minimum)
    } else if (definition.maximum !== undefined && variable > definition.maximum) {
        result.invalidate(variable + ' above ' + definition.maximum)
    } else if (definition.exclusiveMinimum !== undefined && variable <= definition.exclusiveMinimum) {
        result.invalidate(variable + ' below or equal to ' + definition.exclusiveMinimum)
    } else if (definition.exclusiveMaximum !== undefined && variable >= definition.exclusiveMaximum) {
        result.invalidate(variable + ' above or equal to ' + definition.exclusiveMaximum)
    } else if (types.isNumber(definition.multipleOf) && !isMultipleOf(variable, definition.multipleOf)) {
        result.invalidate(variable + ' is not a multiple of ' + definition.multipleOf)
    }
    return result
}

module.exports = { checkBoolean, checkTrueFalse, checkNumber }
