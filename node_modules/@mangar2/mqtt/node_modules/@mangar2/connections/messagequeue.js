/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */

'use strict'

const MessageQueueEntry = require('./messageQueueEntry')

/**
 * Creates a message queue that is initially empty
 * @private
 */
class MessageQueue {
    constructor () {
        this.queue = []
    }

    /**
     * Queue of message queue entries
     * @type {MessageQueueEntry[]}
     */
    get queue () { return this._queue }
    set queue (queue) { this._queue = queue }

    /**
     * Recreates the message queue from persistend data
     * @param {Object} data format {topic: queue, topic: queue, ...}
     */
    rebuild (data) {
        this.queue = []
        for (const entry of data._queue) {
            const rebuildEntry = new MessageQueueEntry()
            rebuildEntry.restoreFromObject(entry)
            this.addMessage(rebuildEntry)
        }
    }

    /**
     * Adds a message, cuts the queue to maxQueueSize, if too long
     * @param {MessageQueueEntry} entry entry of the message queue
     * @param {number} maxQueueSize maximal number of entries in queue
     */
    addMessage (entry, maxQueueSize) {
        this.queue.push(entry)
        if (maxQueueSize && this.queue.length > maxQueueSize) {
            this.queue.slice(0, 1)
        }
    }

    /**
     * deletes all entries and returns all deleted entries
     * @returns {MessageQueueEntry[]}
     */
    deleteAllEntries () {
        const result = this.queue
        this.queue = []
        return result
    }
}

module.exports = MessageQueue
