/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */

'use strict'

/**
 * @private
 * @description Standard header components for text/plain messages
 */
const standardHeaderText = {
    'content-type': 'text/plain; charset=UTF-8',
    accept: 'application/json,text/plain',
    'accept-charset': 'UTF-8'
}

/**
 * @private
 * @description Creates the objects for a qos=2 commit message "pubcomp"
 * @param {string} token connection token
 * @param {number} packetid of the packet (must be the same id as send by publish!)
 * @returns {Object} {headers, payload, resultCheck(result)}
 */
const pubrel = {
    '0.0': (token, packetid) => {
        const payload = { token }
        const headers = { ...standardHeaderText, version: '0.0' }
        if (packetid !== undefined) {
            headers.id = packetid
        }

        const resultCheck = (result) => {
            return result.statusCode === 200 &&
                    result.headers['content-type'].startsWith('text/plain') &&
                    result.payload === 'pubcomp' &&
                    Number(result.headers.id) === packetid
        }

        return { headers, payload, resultCheck }
    },

    '1.0': (token, packetid) => {
        const payload = { token }
        const headers = { ...standardHeaderText, version: '1.0' }
        if (packetid !== undefined) {
            headers.packetid = packetid
        }

        const resultCheck = (result) => {
            const statusOk = result.statusCode === 204
            const packetIdMatches = Number(result.headers.packetid) === packetid
            const packetNameOk = result.headers.packet === 'pubcomp'
            return statusOk && packetIdMatches && packetNameOk
        }
        return { headers, payload, resultCheck }
    }
}

/**
 * @private
 * @description creates the return types for a receive pubrel message
 * @param {Object} headers input headers
 * @returns {Object} {headers, payload, statusCode, packetid}
 */
const onPubrel = {
    '0.0':

        headers => {
            const version = '0.0'
            const id = headers.id
            const result = {
                headers: { 'content-type': 'text/plain; charset=UTF-8', version, id },
                payload: 'pubcomp',
                statusCode: 200,
                packetid: id
            }
            return result
        },
    '1.0':
        headers => {
            const version = '1.0'
            const packet = 'pubcomp'
            const packetid = headers.packetid

            const result = {
                headers: { 'content-type': 'text/plain; charset=UTF-8', version, packet, packetid },
                payload: '',
                statusCode: 204,
                packetid
            }
            return result
        }
}

module.exports = { pubrel, onPubrel }
