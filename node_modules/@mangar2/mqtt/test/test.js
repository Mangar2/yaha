const Interface = require("@mangar2/mqtt");
const UnitTest = require("@mangar2/unittest");

var interface = new Interface({directory: ".", fileName: "connections"});

var unitTest = new UnitTest(true);



(async function testInterface() {    
    let result;
    
    result = interface.processRequest("connect", {clientId: "/a/b", host: "host0", port: 9001, clean: true}, {});
    unitTest.assertEqual(result.httpcode, 200, "http code ok");
    unitTest.assertEqual(result.payload.present, 0, "no older session");

    result = interface.processRequest("disconnect", {clientId: "/a/b"});
    unitTest.assertEqual(result.httpcode, 204, "disconnect, http code ok");

    result = interface.processRequest("subscribe",
        {clientId: "/a/b", topics: {topic1: 1, topic2: 0, topic3: 2}},
        {packetid: 1}
        );
    unitTest.assertEqual(result.payload.QoS[0], 0x80, "subscribe without connected");    

    result = interface.processRequest("connect", {clientId: "/a/b", host: "host0", port: 9001, clean: true}, {});
    result = interface.subscribe(
        {clientId: "/a/b", topics: {topic1: 1, topic2: 0, topic3: 2}},
        {packetid: 1}
        );
    unitTest.assertEqual(result.payload.QoS[0], 1, "subscribe");        

    result = interface.processRequest("subscribe", 
        {clientId: "/a/b", subscribe: {QoS:1, topics:["topic1", "topic2", "topic32"]}},
        {packetid: 2}
        );
    unitTest.assertEqual(result.payload.QoS[1], 1, "subscribe");     
    result = interface.processRequest("unsubscribe", {clientId: "/a/b", topics: ["topic1", "topic2", "topic3"]});
    
    result = interface.processRequest("log", [{topic: "b/b", module: "send"}, { topic: "/b/c", module: "all"}]);    

    result = interface.processRequest("subscribe", 
        {clientId: "/a/b", subscribe: {QoS:1, topics:["/b/#"]}},
        {packetid: 3}
        );
    unitTest.assertEqual(result.payload.QoS[0], 1, "subscribe");   

    result = interface.processRequest("publish", 
        {topic: "/b/c", value: "1.0", reason: "test"}, 
        {packetid: 0, qos: 1}
        );
    unitTest.assertEqual(result.headers.packetid, 0, "publish");


    result = interface.processRequest("publish", 
        {topic: "/b/b", value: "1.0", reason: "test"}, 
        {packetid: 1, qos: 1}
        );
    unitTest.assertEqual(result.headers.packetid, 1, "publish");    

    interface.processSendMessage((host, port, message, headers) => {
        unitTest.assertEqual(host, "host0", "host name");
        unitTest.assertEqual(port, 9001, "port number");
        unitTest.assertEqual(headers.qos, 1, "QoS");
        unitTest.assertEqual(message.value, "1.0", "message value");
        return headers.packetId;
    });

    interface.processSendMessage((host, port, message, headers) => {
        unitTest.assertTrue(false, "unexpected message sent");
    })
    unitTest.showResult(17);

})().catch((result) => console.log(result));

