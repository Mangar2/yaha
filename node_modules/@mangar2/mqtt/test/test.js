const Interface = require("@mangar2/mqtt");
const UnitTest = require("@mangar2/unittest");

var interface = new Interface({directory: ".", fileName: "connections", timeoutInMilliseconds: 500});

var unitTest = new UnitTest(true);
const TOKEN = "a/b";


(async function testInterface() {    
    let result;
    
    result = interface.processRequest("connect", {clientId: "/a/b", host: "host0", port: 9001, clean: true}, {version: '1.0'});
    unitTest.assertEqual(result.statusCode, 200, "http code ok");
    unitTest.assertEqual(JSON.parse(result.payload).present, 0, "no older session");

    result = interface.processRequest("disconnect", {clientId: "/a/b"}, {version: '1.0'});
    unitTest.assertEqual(result.statusCode, 204, "disconnect, http code ok");

    result = interface.processRequest("subscribe",
        {clientId: "/a/b", topics: {topic1: 1, topic2: 0, topic3: 2}},
        {packetid: 1, version: "1.0"}
        );
    unitTest.assertEqual(typeof(result.payload), 'string', "subscribe without connected 1");    
    unitTest.assertEqual(JSON.parse(result.payload).qos[0], 0x80, "subscribe without connected 2");    

    result = interface.processRequest("connect", {clientId: "/a/b", host: "host0", port: 9001, clean: true}, {version: '1.0'});
    result = interface.processRequest("subscribe",
        {clientId: "/a/b", topics: {topic1: 1, topic2: 0, topic3: 2}},
        {packetid: 1, version: '1.0'}
        );
    unitTest.assertEqual(JSON.parse(result.payload).qos[0], 1, "subscribe 1");        

    result = interface.processRequest("subscribe", 
        {clientId: "/a/b", subscribe: {QoS:1, topics:["topic1", "topic2", "topic32"]}},
        {packetid: 2, version: '1.0'}
        );
    unitTest.assertEqual(JSON.parse(result.payload).qos[1], 1, "subscribe 2");     
    result = interface.processRequest("unsubscribe", {clientId: "/a/b", topics: ["topic1", "topic2", "topic3"]}, {version: '1.0'});
    
    result = interface.processRequest("log", [{topic: "b/b", module: "send"}, { topic: "/b/c", module: "all"}]);    

    result = interface.processRequest("subscribe", 
        {clientId: "/a/b", topics: {"/b/#": 1}},
        {packetid: 3, version: '1.0'}
        );
    unitTest.assertEqual(JSON.parse(result.payload).qos[0], 1, "subscribe 3");   

    result = interface.processRequest("publish", 
        {token: TOKEN, message: {topic: "/b/c", value: "1.0", reason: "test"} }, 
        {packetid: "0", qos: "1", version: '1.0'}
        );
    unitTest.assertEqual(result.headers.packetid, 0, "publish 1");

    result = interface.processRequest("publish", 
        {token: TOKEN, message: {topic: "/b/b", value: "1.0", reason: "test"} }, 
        {packetid: "1", qos: "1", version: '1.0'}
        );
    unitTest.assertEqual(result.headers.packetid, 1, "publish 2");    

    interface.processSendMessage((host, port, payload, headers) => {
        let {message, token} = payload;
        headers.packet = 'puback';
        unitTest.assertEqual(host, "host0", "host name");
        unitTest.assertEqual(port, 9001, "port number");
        unitTest.assertEqual(headers.qos, 1, "QoS");
        unitTest.assertEqual(message.value, "1.0", "message value");
        console.log(token);
        unitTest.assertEqual(token, "receive/a/b", "token");
        return {statusCode: 204, headers, payload: {}};
    });
    await unitTest.delay(1000);
    interface.processSendMessage((host, port, payload, headers) => {
        headers.packet = 'puback';
        unitTest.assertTrue(false, "unexpected message sent");
        return {statusCode: 204, headers, payload: {}};
    })
    unitTest.showResult(20);
})().catch((result) => {
    console.log(result); 
    console.log("fail");
} );

