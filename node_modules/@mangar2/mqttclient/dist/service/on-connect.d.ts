/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 * @overview
 * Helping functions to send mqtt data
 */
import { IResult, IMessage, topics_t } from '@mangar2/mqtt-utils';
import { IMqttServer } from './i-mqtt-server';
import { headers_t } from './types';
interface IConnectPayload {
    clientId: string;
    host: string;
    port: number;
    clean: boolean;
    keepAlive: number;
    password: string;
    user: string;
    will: IMessage;
}
export declare class OnConnect {
    private server;
    constructor(server: IMqttServer);
    /**
     * Translates http headers to mqtt headers
     * @param headers headers of the call
     * @returns parsed headers
     */
    private headersToMqttHeaders;
    /**
    * @private
    * @description
    * Receives a pubrel packages
    * @param {Object} payload publish payload
    * @param {Object} headers headers parameter {packetid}
    * @returns {Object} {headers, payload, statusCode}
    */
    onPubrel(payload: {
        token: string;
    }, headers: headers_t): void;
    /**
     * @private
     * @description
     * Connects a client to the broker, storing the connection informations
     * @param {Object} payload payload {clientId, host, port, clean, will}
     * @param {string} payload.clientId id of the connecting client
     * @param {string} payload.host host name (or ip) of the client
     * @param {number} payload.port port number
     * @param {boolean} payload.clean true, if the session shall be cleaned
     * @param {number} payload.keepAlive timeout in milliseconds for disconnecting
     * if no message is transmitted
     * @param {string} payload.password connection password
     * @param {string} payload.user connection user name
     * @param {IMessage} payload.will message to be send on connection loss
     * @param {Object} headers received headers
     * @param {string} headers.version interface version
     * @returns {httpReturn} http return information
     */
    onConnect(payload: IConnectPayload, headers: headers_t): IResult;
    /**
     * @private
     * @description
     * disconnects a client from the broker
     * @param {Object} payload
     * @param {string} payload.clientId Id of the client to disconnect
     * @param {Object} headers received headers
     * @param {string} headers.version interface version
     * @returns {httpReturn} http return information
     */
    onDisconnect(payload: {
        clientId: string;
    }, headers: headers_t): IResult;
    /**
     * @private
     * @description
     * Subscribes to topics
     * @param {Object} payload {clientId, topics}
     * @param {Object} headers received headers
     * @param {number} headers.packetid id of the packet
     * @param {string} headers.version interface version
     * @returns {httpReturn} http return information
     */
    onSubscribe(payload: {
        clientId: string;
        topics: topics_t;
        subscribe: topics_t;
    }, headers: headers_t): IResult;
    /**
     * @private
     * @description
     * Unsubscribes to topics
     * @param {Object} payload {clientId, topics}
     * @param {string} payload.clientId id of the connecting client
     * @param {string[]} payload.topics topics to subscribe to
     * @param {Object} headers received headers
     * @param {string} headers.version interface version
     * @returns {httpReturn} http return information
     */
    onUnsubscribe(payload: {
        clientId: string;
        topics: topics_t;
    }, headers: headers_t): IResult;
    /**
     * @private
     * @description
     * Answers to a ping
     * @param {Object} payload http call payload
     * @param {string} payload.token
     * @returns {httpReturn} http return information
     */
    onPingreq(payload: {
        token: string;
    }): IResult;
}
export {};
