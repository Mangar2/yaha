/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2023 Volker Böhm
 */
import { ServerResponse, IncomingHttpHeaders } from '@mangar2/httpservice';
import { LogFilter, LogPattern } from '@mangar2/mqtt-utils';
type LogSettings = any;
/**
 * @callback ProcessMessage
 * @param message the message received
 * @param qos the quality of service information
 * @param dup flag signaling duplicates
 */
type ProcessMessage = (message: object, qos: 0 | 1 | 2, dup: 0 | 1) => void;
export declare class OnPublish {
    private _logFilter;
    private _server;
    private _callbacks;
    private _qos2Queue;
    private _qos2PubrelTimeoutInMilliseconds;
    constructor(listenerPort: number, logSettings: LogSettings, qos2PubrelTimeoutInSeconds?: number);
    get port(): number | undefined;
    get logFilter(): LogFilter;
    listen(): void;
    on(event: string, callback: ProcessMessage): void;
    private deleteOldQos2QueueEntries;
    onPubrel(headers: IncomingHttpHeaders, res: ServerResponse): void;
    private rememberMessage;
    onPublish(payload: any, headers: IncomingHttpHeaders, res: ServerResponse): void;
    onLog(payload: LogPattern[], res: ServerResponse): void;
    close(): void;
}
export {};
