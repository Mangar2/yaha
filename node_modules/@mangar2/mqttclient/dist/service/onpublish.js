"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OnPublish = void 0;
/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2023 Volker Böhm
 */
const httpservice_1 = require("@mangar2/httpservice");
const mqtt_utils_1 = require("@mangar2/mqtt-utils");
const utils_1 = require("@mangar2/utils");
class OnPublish {
    constructor(listenerPort, logSettings, qos2PubrelTimeoutInSeconds = 7200) {
        this._qos2Queue = {};
        this._logFilter = new mqtt_utils_1.LogFilter();
        this._logFilter.changePattern(logSettings);
        this._server = new httpservice_1.HttpServer(listenerPort);
        this._callbacks = new utils_1.Callbacks(['publish']);
        this._qos2PubrelTimeoutInMilliseconds = qos2PubrelTimeoutInSeconds * 1000;
    }
    get port() {
        return this._server.address ? this._server.address.port : undefined;
    }
    get logFilter() {
        return this._logFilter;
    }
    listen() {
        this._server.listen();
    }
    on(event, callback) {
        this._callbacks.on(event, callback);
    }
    deleteOldQos2QueueEntries() {
        const now = new Date().getTime();
        for (const entry in this._qos2Queue) {
            if (this._qos2Queue[entry].time + this._qos2PubrelTimeoutInMilliseconds < now) {
                delete this._qos2Queue[entry];
            }
            else {
                break;
            }
        }
    }
    onPubrel(headers, res) {
        const result = mqtt_utils_1.Interfaces.onPubrel(headers);
        delete this._qos2Queue[result.packetid];
        this.deleteOldQos2QueueEntries();
        res.writeHead(result.statusCode, result.headers);
        res.end(result.payload);
    }
    rememberMessage(topic, packetid) {
        this._qos2Queue[packetid] = { time: new Date().getTime(), topic };
    }
    onPublish(payload, headers, res) {
        const message = payload.message ? payload.message : payload;
        mqtt_utils_1.Message.validate(message);
        const dup = headers.dup === '1' || headers.dup === 'true';
        const packetid = headers.version === '1.0' ? headers.packetid : headers.id;
        this.logFilter.condLogMessage('received', message, dup, false);
        const qos2PacketPublishedBefore = dup && this._qos2Queue[packetid] !== undefined;
        if (!qos2PacketPublishedBefore) {
            if (Number(headers.qos) === 2) {
                this.rememberMessage(message.topic, packetid);
            }
            const cleanMessage = new mqtt_utils_1.Message(message.topic, message.value, message.reason);
            this._callbacks.invokeCallback('publish', cleanMessage, headers.qos, dup);
        }
        const result = mqtt_utils_1.Interfaces.receive(headers);
        res.writeHead(result.statusCode, result.headers);
        res.end(result.payload);
    }
    onLog(payload, res) {
        this._logFilter.changePattern(payload);
        res.writeHead(204, { 'Content-Type': 'application/json' });
        res.end('');
    }
    close() {
        this._server.close();
    }
}
exports.OnPublish = OnPublish;
//# sourceMappingURL=onpublish.js.map