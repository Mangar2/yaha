/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */
import { Message } from '@mangar2/mqtt-utils';
type Configuration = {
    retry?: number;
};
export declare class PublishMessage {
    private topicQueues;
    private client;
    private nextPacketId;
    private retry;
    terminate: boolean;
    /**
     * Creates an instance of PublishMessage.
     * @param {string} host The MQTT host.
     * @param {number} port The MQTT port.
     * @param {Configuration} configuration Configuration for the publisher.
     */
    constructor(host: string, port: number, configuration: Configuration);
    /**
     * Provides the next packet ID for MQTT messages.
     * @returns {number} The next packet ID.
     */
    private providePacketId;
    /**
     * Handles the PUBREL part of QoS 2 message flow.
     * @param {number} packetid The packet ID of the message.
     * @param {string} token Authentication token.
     * @param {string} topic The MQTT topic.
     * @returns {Promise<boolean>} True if PUBREL was successful, false otherwise.
     */
    private pubrel;
    /**
      * Sends a message with appropriate retries.
      * @param {any} sendData Data to be sent.
      * @returns {Promise<boolean>} True if the message was successfully sent, throws otherwise.
      */
    private sendMessage;
    /**
     * Publishes a message to an MQTT topic. For QoS 1 and QoS 2, messages are queued per topic and sent sequentially.
     * QoS 0 messages are sent without confirmation. For QoS 1 and QoS 2, this function manages the message flow,
     * ensuring that messages are sent in order and retried as necessary.
     *
     * @param {string} token Authentication token used for the MQTT connection.
     * @param {Message} message The message object to be published. This includes the topic, payload, and optionally QoS.
     * @param {string} [version='1.0'] The MQTT protocol version to use for the message. Defaults to '1.0'.
     * @returns {Promise<any>} A promise that resolves with the result of the publish operation. For QoS 0, it may resolve
     *                          immediately after sending. For QoS 1 and QoS 2, it resolves after the appropriate
     *                          acknowledgment process is completed.
     */
    publish(token: string, message: Message, version?: string): Promise<any>;
    /**
     * Closes the MQTT client connection.
     * @returns {Promise<void>}
     */
    close(): Promise<void>;
}
export {};
