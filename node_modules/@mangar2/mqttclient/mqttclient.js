/**
 * ---------------------------------------------------------------------------------------------------
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * File:      mqttversion.js
 *
 * Author:      Volker Böhm
 * Copyright:   Volker Böhm
 * ---------------------------------------------------------------------------------------------------
 */

'use strict'

const MqttService = require('@mangar2/mqttservice')
const Connect = require('@mangar2/connect')
const TopicMatch = require('@mangar2/topicmatch')

class MqttClient {
    /**
     * @public
     * Creates a standard mqtt client, connects and subscribes to the broker
     * @param {object} options options to provide for connection
     * @param {string} options.clientId unique id of the client
     * @param {object} options.broker information of the broker to connect to
     * @param {string} options.broker.hostname hostname of the broker
     * @param {number} options.broker.port port of the broker
     * @param {number} options.listener port this client will listen to
     * @param {string} [options.version='1.0'] interface version
     * @param {number} options.retry amount of retries to send messages to the broker
     */
    constructor (options) {
        const { clientId, broker, listener } = options
        this._connect = new Connect(clientId, broker.hostname, broker.port, listener)
        this._server = new MqttService.OnPublish(listener)
        this._recipients = []
        this._client = new MqttService.Publish(broker.hostname, broker.port, options)
        this._version = options.version || '1.0'

        this._server.on('publish', (message, qos, dup) => {
            for (const recipient of this._recipients) {
                if (recipient.topics.getFirstMatch(message.topic)) {
                    const returnMessage = recipient.callback(message)
                    if (returnMessage !== undefined) {
                        this._client.publish(returnMessage.token, returnMessage, qos, false, this._version)
                    }
                }
            }
        })
    }

    run () {
        this._server.listen()
    }

    /**
     * Registeres a recipient
     * @param {object} subscriptions subscription entries of format {topic:qos, topic:qos, ...}
     * @param {function} callback function to send received messages to
     * @param {string} [version='1.0'] Interface version
     * @throws {Error} If subscriptions are not well formatted or callback is not a function
     */
    registerRecipient (subscriptions, callback) {
        if (typeof (callback) !== 'function') {
            throw Error('A callback function must be provided for registerRecipient')
        }
        this._connect.subscribe(subscriptions, this._version)
        this._recipients.push({ topics: new TopicMatch(subscriptions), callback })
    }
}

module.exports = MqttClient
