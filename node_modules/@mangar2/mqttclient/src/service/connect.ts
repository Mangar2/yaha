/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 * @overview Provides functions to connect to the (http based) yaha mqtt broker
 */

import { Interfaces, topics_t } from '@mangar2/mqtt-utils';
import { Callbacks } from '@mangar2/utils';
import { headers_t } from './types';
import os from 'os';

/**
 * @private
 * @description
 * Gets the IP v4 address of the current device
 * @returns {string} IP v4 address
 */
export function getIPv4Address(): string {
    const networkInterfaces = os.networkInterfaces();
    for (const network of Object.values(networkInterfaces)) {
        if (!network) continue;
        for (const info of network) {
            if (info.family === 'IPv4' && !info.internal) {
                return info.address;
            }
        }
    }
    return 'localhost';
}

/**
 * @callback ConnectMessage
 * @param message the message received
 * @param qos the quality of service information
 * @param dup flag signaling duplicates
 */
type ConnectMessage = (path: string, httpMethod: string, payload: string, headers:headers_t) => void;

/**
 * Organises connections to broker
 * This is part of the http based mqtt broker. Use this class to connect/disconnect and subscribe/unsubscribe to the broker
 * All functions are based on async/promises
 */
export class Connect {
    private _isConnected: boolean = false;
    private nextPacketId: number = 1;
    private callbacks: Callbacks = new Callbacks(["send"]);
    private _token?: { send: string, receive: string };

    /**
     * @param {string} clientId id of this client
     * @param {string} brokerHost hostname (or ip) of the broker
     * @param {number} brokerPort port of the broker
     * @param {number} listenerPort port to listen for published messages from broker
     * @example
     * let connect = new Connect("/connect/test", "127.0.0.1", 9001, 9002);
     * result = await connect.connect(CLEAN);
     */
    constructor(private clientId: string, private myAddress: string, private myPort: number) {
    }

    /**
     * True, if the client is connected
     * @type {boolean}
     */
    get isConnected(): boolean { return this._isConnected; }
    set isConnected(isConnected: boolean) { this._isConnected = isConnected; }

    /**
     * Gets/Sets send and receive token
     * @type {{send:string, receive:string}} token
     */
    get token(): { send: string, receive: string } | undefined { return this._token; }
    set token(token: { send: string, receive: string } | undefined) { this._token = token; }

    /**
     * Sets a callback.
     * @param {string} event event name (not case sensitive) for the callback
     * @param {function} callback(parameter)
     * @throws {Error} if the event is not supported
     * @throws {Error} if the callback is not 'function'
     */
    on(event: string, callback: ConnectMessage): void { this.callbacks.on(event, callback); }

    /**
     * @private
     * @description
     * Sends an object via put as application/json message
     * @param {string} path path for the http PUT
     * @param {Object} payload data to be transported via. PUT
     * @returns {Object} received answer
     */
    private async send(path: string, headers: Record<string, any>, payload: any): Promise<any> {
        return this.callbacks.invokeCallbackAsync('send', 'put', path, headers, payload);
    }

    /**
     * @private
     * @description
     * provides a new packet id
     * @returns {number} "nearly unique" packet id (between 0 .. 65536)
     */
    private providePacketId(): number {
        return this.nextPacketId = (this.nextPacketId % 0xFFFF) + 1;
    }

    /**
     * Connects to the broker
     * @param {boolean} clean true, if a disconnect shall clean any connection information
     * @param {string} [version='1.0'] interface version (0.0 or 1.0)
     * @param {number} [keepAlive=600000] time in milliseconds the broker will keep the connection without receiving calls
     * @returns {Object} payload returned from connect request
     */
    async connect(clean: boolean, version: string = '1.0', keepAlive: number = 600 * 1000): Promise<any> {
        const httpObjects = Interfaces.connect(version, {
            clientId: this.clientId, host: this.myAddress, port: this.myPort, clean, keepAlive
        });
        const result = await this.send('/connect', httpObjects.headers, httpObjects.payload);

        if (!httpObjects.resultCheck(result)) {
            throw new Error(`Unable to connect status code: ${result.statusCode} ${JSON.stringify(result.headers)}`);
        }

        this.isConnected = true;
        if (result.headers['content-type'].startsWith('application/json')) {
            result.payload = JSON.parse(result.payload);
        }

        if (version >= '1.0') {
            this.token = result.payload.token;
        }
        return result.payload;
    }

    /**
     * Disconnects from the broker
     * @param {string} [version='1.0'] interface version (0.0 or 1.0)
     * @returns {Object} empty object
     */
    async disconnect(version: string = '1.0'): Promise<any> {
        const httpObjects = Interfaces.disconnect(version, this.clientId);
        const result = await this.send('/disconnect', httpObjects.headers, httpObjects.payload);

        if (!httpObjects.resultCheck(result)) {
            throw new Error(`Unable to disconnect status code: ${result.statusCode}`);
        }

        this._isConnected = false;
        return {};
    }

    /**
     * Subscribe to the broker
     * @param {Object} topics topics to subscribe to {topic1: QoS1, topic2: QoS2, ...}
     * @param {string} [version='1.0'] interface version (0.0 or 1.0)
     * @returns {Object} payload returned from subscribe request
     */
    async subscribe(topics: topics_t, version: string = '1.0'): Promise<any> {
        const httpObjects = Interfaces.subscribe(version, topics, this.clientId, this.providePacketId());

        const result = await this.send('/subscribe', httpObjects.headers, httpObjects.payload);
        const headers = result.headers;

        if (!httpObjects.resultCheck(result)) {
            throw new Error(`Unable to subscribe status code: ${result.statusCode} headers: ${JSON.stringify(headers)}`);
        }

        if (headers['content-type'].startsWith('application/json')) {
            result.payload = JSON.parse(result.payload);
        }
        return result.payload;
    }

    /**
     * Unsubscribes from the broker
     * @param {Array} topics topics to unsubscribe [topic1, topic2, ...]
     * @param {string} [version='1.0'] interface version (0.0 or 1.0)
     * @returns {Object} empty object
     */
    async unsubscribe(topics: topics_t, version: string = '1.0'): Promise<any> {
        const httpObjects = Interfaces.unsubscribe(version, topics, this.clientId, this.providePacketId());
        const result = await this.send('/unsubscribe', httpObjects.headers, httpObjects.payload);

        if (!httpObjects.resultCheck(result)) {
            throw new Error(`Unable to unsubscribe status code: ${result.statusCode}`);
        }

        return {};
    }

    /**
     * Sends a ping request to signal the client is alive
     * @returns {boolean} true on success
     */
    async pingreq(): Promise<boolean> {
        const payload = { token: this.token?.send };
        const headers = { 'content-type': 'application/json; charset=UTF-8' };
        const result = await this.send('/pingreq', headers, payload);
        return result.statusCode === 204 && result.headers.packet === 'pingresp';
    }

    /**
     * First connect, then subscribe
     * @param {boolean} clean true, if a disconnect shall clean any connection information
     * @param {Object} topics topics to subscribe to {topic1: QoS1, topic2: QoS2, ...}
     * @param {string} [version='1.0'] interface version (0.0 or 1.0)
     * @param {number} [keepAlive=600000] time in milliseconds the broker will keep the connection without receiving calls
     * @returns {Object} combined result from connect and subscribe
     */
    async connectAndSubscribe(clean: boolean, topics: topics_t, version: string = '1.0', keepAlive: number = 600 * 1000): Promise<any> {
        let result = await this.connect(clean, version, keepAlive);
        if (this.isConnected) {
            const subscribeResult = await this.subscribe(topics, version);
            result = { ...result, ...subscribeResult };
        }
        return result;
    }

}


