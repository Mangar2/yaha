module.exports =
[
    {
        description: 'Test publishing messages with QoS 0',
        configuration: { retry: 1 },
        tests: [
            {
                description: 'Publish a successful message version 0.0',
                method: 'publish',
                token: 'testToken123',
                message: {
                    topic: 'test/topic1',
                    value: 'Test Message QoS 0',
                    qos: 0
                },
                version: '0.0',
                mockResult: {
                    statusCode: 204
                },
                expected: {
                    result: [
                        [
                            'send (qos 0)'
                        ]
                    ],
                    'history': [
                        {
                            path: '/publish',
                            method: 'put',
                            headers: {
                                'content-type': 'application/json; charset=UTF-8',
                                'accept': 'application/json,text/plain',
                                'accept-charset': 'UTF-8',
                                'qos': '0',
                                'version': '0.0'
                            },
                            payload: {
                                'topic': 'test/topic1',
                                'value': 'Test Message QoS 0',
                                'qos': 0,
                                'retain': false
                            }
                        }
                    ]
                }
            },
            {
                description: 'Publish a successful message version 1.0',
                method: 'publish',
                token: 'testToken123',
                message: {
                    topic: 'test/topic1',
                    value: 'Test Message QoS 0',
                    qos: 0
                },
                version: '1.0',
                mockResult: {
                    statusCode: 204
                },
                expected: {
                    result: [
                        [
                            'send (qos 0)'
                        ]
                    ],
                    'history': [
                        {
                            path: '/publish',
                            method: 'put',
                            headers: {
                                'content-type': 'application/json; charset=UTF-8',
                                'accept': 'application/json,text/plain',
                                'accept-charset': 'UTF-8',
                                'qos': '0',
                                'dup': '0',
                                'retain': '0',
                                'version': '1.0'
                            },
                            payload: {
                                'token': 'testToken123',
                                'message': {
                                    'topic': 'test/topic1',
                                    'value': 'Test Message QoS 0'
                                }
                            }
                        }
                    ]
                }
            },
            {
                description: 'Publish function with missing value in the message',
                method: 'publish',
                token: 'testToken123',
                message: {
                    topic: 'test/topic2',
                    value: undefined, // Value that causes serialization to fail
                    qos: 0
                },
                version: '1.0',
                mockResult: {
                    statusCode: 204 // Server would still respond OK
                },
                expected: {
                    'result': [
                        [
                            'send (qos 0)'
                        ]
                    ],
                    'history': [
                        [
                            '/publish',
                            'put',
                            {
                                'content-type': 'application/json; charset=UTF-8',
                                'accept': 'application/json,text/plain',
                                'accept-charset': 'UTF-8',
                                'qos': '0',
                                'dup': '0',
                                'retain': '0',
                                'version': '1.0'
                            },
                            {
                                'message': {
                                    'value': ''
                                }
                            }
                        ]
                    ]
                }
            },
            {
                description: 'Publish function handling bad status code',
                method: 'publish',
                token: 'testToken123',
                message: {
                    topic: 'test/topic2',
                    value: undefined, // Value that causes serialization to fail
                    qos: 0
                },
                version: '1.0',
                mockResult: {
                    statusCode: 204 // Server would still respond OK
                },
                expected: {
                    'result': [
                        [
                            'send (qos 0)'
                        ]
                    ],
                    'history': [
                        [
                            '/publish',
                            'put',
                            {
                                'content-type': 'application/json; charset=UTF-8',
                                'accept': 'application/json,text/plain',
                                'accept-charset': 'UTF-8',
                                'qos': '0',
                                'dup': '0',
                                'retain': '0',
                                'version': '1.0'
                            },
                            {
                                'token': 'testToken123',
                                'message': {
                                    'topic': 'test/topic2',
                                    'value': ''
                                }
                            }
                        ]
                    ]
                }
            }
        ]
    },
    {
        description: 'Test publishing messages with QoS 1',
        configuration: { retry: 1 },
        tests: [
            {
                description: 'Correct single message',
                method: 'publish',
                token: 'testToken123',
                message: {
                    topic: 'test/topic1',
                    value: 'Test Message QoS 1',
                    qos: 1
                },
                version: '1.0',
                mockResult: {
                    statusCode: 204,
                    headers: { packetid: '1', packet: 'puback' }
                },
                expected: {
                    result: [
                        [
                            'delivered (qos 1)'
                        ]
                    ],
                    'history': [
                        [
                            '/publish',
                            'put',
                            {
                                'content-type': 'application/json; charset=UTF-8',
                                'accept': 'application/json,text/plain',
                                'accept-charset': 'UTF-8',
                                'qos': '1',
                                'dup': '0',
                                'retain': '0',
                                'version': '1.0',
                                'packetid': '1'
                            },
                            {
                                'token': 'testToken123',
                                'message': {
                                    'topic': 'test/topic1',
                                    'value': 'Test Message QoS 1'
                                }
                            }
                        ]
                    ]
                }
            },
            /*
            {
                description: 'Publish a message with QoS 1, version 0.0',
                method: 'publish',
                token: 'testToken123',
                message: {
                    topic: 'test/topic1',
                    value: 'Test Message QoS 1',
                    qos: 1
                },
                version: '0.0',
                expected: {
                    result: [
                        [
                            'delivered (qos 1)'
                        ]
                    ],
                    'messages': [
                        {
                            'topic': 'test/topic1',
                            'value': 'Test Message QoS 1',
                            'qos': 1,
                            'retain': false
                        }
                    ]
                }
            },
            {
                description: 'Publish a message with QoS 0',
                method: 'publish',
                token: 'testToken456',
                message: {
                    topic: 'test/topic2',
                    value: 'Test Message QoS 0',
                    qos: 0
                },
                version: '1.0',
                expected: {
                    result: [
                        [
                            'send (qos 0)'
                        ]
                    ],
                    'messages': [
                        {
                            'topic': 'test/topic2',
                            'value': 'Test Message QoS 0',
                            'qos': 0,
                            'retain': false
                        }
                    ]
                }
            }
        ]
    },
    {
        description: 'Test publishing messages with QoS 2',
        configuration: { retry: 2 },
        tests: [
            {
                description: 'Publish a message with QoS 2 and successful pubrel',
                method: 'publish',
                token: 'tokenQoS2',
                message: {
                    topic: 'test/qos2',
                    value: 'Test Message QoS 2',
                    qos: 2
                },
                version: '1.0',
                expected: {
                    result: [
                        [
                            'delivered (qos 2)'
                        ]
                    ],
                    messages: [
                        {
                            topic: 'test/qos2',
                            value: 'Test Message QoS 2',
                            qos: 2,
                            retain: false
                        }
                    ]
                }
            }
        ]
    },
    {
        description: 'Test message queue handling',
        configuration: { retry: 3 },
        tests: [
            {
                description: 'Publish multiple messages with QoS 1 sequentially',
                method: 'publish',
                token: 'multiToken',
                messages: [
                    { topic: 'multi/topic1', value: 'Message 1', qos: 1 },
                    { topic: 'multi/topic1', value: 'Message 2', qos: 1 },
                    { topic: 'multi/topic1', value: 'Message 3', qos: 1 }
                ],
                version: '1.0',
                expected: {
                    result: [
                        [
                            'delivered (qos 1)',
                            'delivered (qos 1)',
                            'delivered (qos 1)'
                        ],
                        [
                            'queued (qos 1)'
                        ],
                        [
                            'queued (qos 1)'
                        ]
                    ],
                    messages: [
                        { topic: 'multi/topic1', value: 'Message 1', qos: 1, retain: false },
                        { topic: 'multi/topic1', value: 'Message 2', qos: 1, retain: false },
                        { topic: 'multi/topic1', value: 'Message 3', qos: 1, retain: false }
                    ]
                }
            },
            {
                description: 'Publish multiple messages with different QoS sequentially',
                method: 'publish',
                token: 'multiToken',
                messages: [
                    { topic: 'multi/topic1', value: 'Message 1', qos: 1 },
                    { topic: 'multi/topic1', value: 'Message 2', qos: 0 },
                    { topic: 'multi/topic1', value: 'Message 3', qos: 2 }
                ],
                version: '1.0',
                expected: {
                    result: [
                        [
                            'delivered (qos 1)',
                            'delivered (qos 2)'
                        ],
                        [
                            'send (qos 0)'
                        ],
                        [
                            'queued (qos 2)'
                        ]
                    ],
                    messages: [
                        { topic: 'multi/topic1', value: 'Message 1', qos: 1, retain: false },
                        { topic: 'multi/topic1', value: 'Message 2', qos: 0, retain: false },
                        { topic: 'multi/topic1', value: 'Message 3', qos: 2, retain: false }
                    ]
                }
            }
        ]
    },
    {
        description: 'Test closing the publisher',
        configuration: { retry: 3 },
        tests: [
            {
                description: 'Close the publisher',
                method: 'close',
                expected: {
                    messages: []
                }
            }
        ]
    },
    {
        description: 'Test closing the publisher',
        configuration: { retry: 3 },
        tests: [
            {
                description: 'stopping the receiver',
                method: 'stop receiver',
                expected: {
                    messages: []
                }
            },
            {
                description: 'Publish multiple messages with different QoS sequentially',
                method: 'publish',
                token: 'multiToken',
                messages: [
                    { topic: 'multi/topic1', value: 'Message 1', qos: 1 },
                    { topic: 'multi/topic1', value: 'Message 2', qos: 0 },
                    { topic: 'multi/topic1', value: 'Message 3', qos: 2 }
                ],
                version: '1.0',
                expected: {
                    messages: []
                }
                
            }
            */
        ]
    }
]
