/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */

'use strict'

/**
 * @private
 * @description Standard header components for application/json messages
 */
const standardHeaderJSON = {
    'content-type': 'application/json; charset=UTF-8',
    accept: 'application/json,text/plain',
    'accept-charset': 'UTF-8'
}

/**
 * @private
 * @description Creates the objects to connect ot a broker
 * @param {Object} options connect options
 * @param {string} options.clientId unique client identifier
 * @param {string} options.host host name of the client host
 * @param {number} options.port port number of the clien listening port
 * @param {bool} options.clean true, if the connection is cleaned up after disconnect
 * @param {nubmer} options.keepAlive keep alive time in milliseconds
 * @returns {Object} {headers, payload, resultCheck(result)}
 */
const connect = {
    '0.0': (options) => {
        const { clientId, host, port, clean } = options
        const payload = {
            clientId, host, port, clean
        }
        const headers = { ...standardHeaderJSON, version: '0.0' }

        const resultCheck = (result) => {
            return result.statusCode === 200 &&
                result.headers['content-type'].startsWith('text/plain') &&
                result.payload.toLowerCase() === 'connack'
        }

        return { headers, payload, resultCheck }
    },

    '1.0': (options) => {
        const { clientId, host, port, clean, keepAlive } = options
        const payload = {
            clientId, host, port, clean, keepAlive
        }
        const headers = { ...standardHeaderJSON, version: '1.0' }

        const resultCheck = (result) => {
            return result.statusCode === 200 &&
                result.headers['content-type'].startsWith('application/json') &&
                result.headers.packet === 'connack'
        }

        return { headers, payload, resultCheck }
    }
}

/**
 * @private
 * @description Creates the return types for a connect request
 * @param {Object} payload payload to return
 * @returns {Object} {headers, payload, statusCode}
 */
const onConnect = {
    '0.0': (payload) => {
        return {
            headers: { 'content-type': 'text/plain; charset=UTF-8', version: '0.0' },
            payload: 'connack',
            statusCode: 200
        }
    },

    '1.0': (payload) => {
        return {
            headers: { 'content-type': 'application/json; charset=UTF-8', packet: 'connack', version: '1.0' },
            payload: JSON.stringify(payload),
            statusCode: 200
        }
    }
}

module.exports = { connect, onConnect }
