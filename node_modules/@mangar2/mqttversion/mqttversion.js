/**
 * ---------------------------------------------------------------------------------------------------
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * File:      mqttversion.js
 *
 * Author:      Volker Böhm
 * Copyright:   Volker Böhm
 * ---------------------------------------------------------------------------------------------------
 */

'use strict';

var receive = {
    "0.0": 
        /**
         * creates the return types for a receive message
         * @param {object} headers input headers
         */
        headers => {
            let version = '0.0';
            let result =  {
                headers: { "content-type": "text/plain", version},
                payload: "puback",
                httpcode: 200
            }
            if (headers.id !== undefined) {
                result.headers.id = headers.id;
            }
            return result;
        },
    "1.0":
        /**
         * creates the return types for a receive message
         * @param {object} headers input headers
         */
        headers => {
            let version = '1.0';
            let qos = headers.qos;
            let result =  {
                headers: { "content-type": "application/json", version},
                payload: "",
                httpcode: 204
            }
            if (qos == 1) { result.headers.packet = 'puback'; }
            if (qos == 2) { result.headers.packet = 'pubrec'; }
            if (headers.packetid !== undefined) {
                result.headers.packetid = headers.packetid;
            }
            return result;
        } 
}

var subscribe = {
    /**
     * Subscribes to a client
     * @param {object} topics {topic: qos, ...}
     * @param {string} clientId unique client identifier
     * @param {number|undefined} packetid unique id of the package (not used on version 0.0)
     */
    "0.0" : (topics, clientId, packetid) => {
        let subscribe = {QoS: 0, topics:[]}
        for (let topic in topics) {
            subscribe.QoS = topics[topic];
            subscribe.topics.push(topic);
        }
        let payload = {
            clientId, subscribe
        }
        let headers = {'content-type': "appliation/json", version: '0.0'}
        
        let resultCheck = (statusCode, headers, payload) => {
            return statusCode === 200 && headers['content-type'] === 'text/plain' && payload === 'suback';
        }

        return {headers, payload, resultCheck}
    },

    "1.0" : (topics, clientId, packetid) => {
        let payload = {
            clientId, topics
        }
        let headers = {'content-type': "application/json", packetid, version: '1.0'}

        let resultCheck = (statusCode, headers, payload) => {
            return statusCode === 200 && headers['content-type'] === 'application/json' && headers.packet === 'suback' && headers.packetid == packetid;
        }
        return {headers, payload, resultCheck}
    }
}

var connect = {
    /**
     * Connects to a broker
     * @param {string} clientId unique client identifier
     */
    "0.0" : (clientId, host, port, clean) => {
        let payload = {
            clientId, host, port, clean
        }
        let headers = {'content-type': "appliation/json", version: '0.0'}
        
        let resultCheck = (statusCode, headers, payload) => {
            return statusCode === 200 && headers['content-type'] === 'text/plain' && payload === 'connack';
        }

        return {headers, payload, resultCheck}
    },

    "1.0" : (clientId, host, port, clean) => {
        let payload = {
            clientId, host, port, clean
        }
        let headers = {'content-type': "appliation/json", version: '1.0'}
        
        let resultCheck = (statusCode, headers, payload) => {
            return statusCode === 200 && headers['content-type'] === 'application/json' && headers.packet === 'connack';
        }

        return {headers, payload, resultCheck}
    }
}


/**
 * Extracts the version from a headers object
 * @param {object} headers object with member version
 */
function getVersion(headers) {
    let version = headers.version === undefined? "0.0" : headers.version;
    if (receive[version] === undefined) {
        throw "undefined version " + version;
    }
    return version;
}
  
module.exports = {
    receive: (headers) => {
        return receive[getVersion(headers)](headers);
    },
    suscribe: (version, topics, clientId, packetid) => {
        return subscribe[version](topics, clientId, packetid);
    },
    connect: (version, clientId, host, port, clean) => {
        return connect[version](clientId, host, port, clean);
    }

}
