/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */

'use scrict'

const CheckResult = require('./checkresult')
const types = require('@mangar2/types')

/**
 * @private
 * @description Checks an element "deeply" for differences
 * @param {any} a first element to compare
 * @param {any} b second element to compare
 * @param {string} [path=''] path to the element to compare
 * @returns {CheckResult} decision result and error message
 */
function deepEqualRec (a, b, path = '') {
    const result = new CheckResult(true)
    if (typeof (a) !== typeof (b) || types.isArray(a) !== types.isArray(b)) {
        result.invalidate('types are different')
    } else if (types.isArray(a) && types.isArray(b)) {
        if (a.length !== b.length) {
            result.invalidate('arrays have different length')
        }
        for (const index in a) {
            result.addCheck(deepEqualRec(a[index], b[index], path + '/' + index))
        }
    } else if (types.isObject(a) && types.isObject(b)) {
        if (Object.keys(a).length !== Object.keys(b).length) {
            result.invalidate('objects have different amount of properties')
        }
        if (a.constructor.name !== b.constructor.name) {
            result.invalidate('objects have different constructor names: ' + a.constructor.name + ' != ' + b.constructor.name)
        }
        for (const index in a) {
            result.addCheck(deepEqualRec(a[index], b[index], path + '/' + index))
        }
    } else if (a !== b) {
        result.invalidate('elements are different: ' + a + ' !== ' + b)
    }
    return result
}

module.exports = deepEqualRec
