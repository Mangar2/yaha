{
  "file": [
    {
      "license": "This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3 . It is furnished \"as is\" , without any support , and with no warranty , express or implied , as to its usefulness for any purpose .",
      "author": "Volker Böhm",
      "copyright": "Copyright ( c ) 2020 Volker Böhm",
      "overview": "Interface to the opensense map service and App",
      "filename": "opensensemap.js"
    }
  ],
  "typedef": [
    {
      "type": "Object",
      "typedef": "Sensor",
      "property": [
        {
          "name": "name",
          "type": "string",
          "description": "name of the sensor"
        },
        {
          "name": "unit",
          "type": "string",
          "description": "unit of the sensor"
        },
        {
          "name": "topic",
          "type": "string",
          "description": "topic the sensor is matched to"
        },
        {
          "name": "id",
          "type": "string",
          "description": "opensensmap unique id"
        }
      ]
    },
    {
      "type": "Array.<Sensor>",
      "typedef": "Sensors"
    }
  ],
  "function": [
    {
      "private": true,
      "description": "Gets the topic to return",
      "param": [
        {
          "name": "statusCode",
          "type": "number",
          "description": "http status code"
        },
        {
          "name": "messageReason",
          "type": "Reason",
          "description": "reason of the status"
        },
        {
          "name": "resultReason",
          "type": "string",
          "description": "result information from opensensemap"
        }
      ],
      "returns": [
        {
          "type": "Message",
          "description": "result message"
        }
      ],
      "name": "getReturnMessage",
      "function": true
    },
    {
      "description": "Gets the subscriptions for the service",
      "param": [
        {
          "name": "config",
          "type": "Object",
          "description": "configuration ( sensors , . . . )",
          "param": [
            {
              "name": "sensors",
              "type": "Sensors",
              "description": "opensensemap sensor configuration"
            },
            {
              "name": "qos",
              "type": "number",
              "description": "quality of service for message transport"
            }
          ]
        }
      ],
      "returns": [
        {
          "type": "Array.<string>",
          "description": "array of subscriptions"
        }
      ],
      "name": "getSubscriptions",
      "function": true
    },
    {
      "private": true,
      "description": "Searches a sensor-id in the \"sensors\" configuration",
      "param": [
        {
          "name": "sensors",
          "type": "Sensors",
          "description": "array of sensor objects with \"topic\" and \"id\" attributes"
        },
        {
          "name": "topic",
          "type": "string",
          "description": "topic to search for"
        }
      ],
      "returns": [
        {
          "type": "string, undefined",
          "description": "opensensmap unique id of the sensor or undefined if not found"
        }
      ],
      "name": "lookupSensorId",
      "function": true
    },
    {
      "description": "Publishes a value to opensensemap ( you need an account to do this ) Publish data provided as Message to opensensemap . You need an account on opensensemap . org The message topic is mapped to the sensor id provided in the config object . The message value it the value to publish",
      "param": [
        {
          "name": "message",
          "type": "Message",
          "description": "the data to publish on the opensensemap",
          "param": [
            {
              "name": "topic",
              "type": "string",
              "description": "the topic is used to select the sensor id from config"
            },
            {
              "name": "value",
              "type": "number",
              "description": "the value to publish to the sensor"
            }
          ]
        },
        {
          "name": "config",
          "type": "Object",
          "description": "configuration ( sensors , . . . )",
          "param": [
            {
              "name": "station",
              "type": "string",
              "attributes": "optional",
              "description": "name of the station",
              "default": ""
            },
            {
              "name": "id",
              "type": "string",
              "description": "sensebox id ( provided by open sens map )",
              "attributes": "",
              "default": ""
            },
            {
              "name": "host",
              "type": "string",
              "description": "host of open sense map",
              "attributes": "",
              "default": ""
            },
            {
              "name": "port",
              "type": "port",
              "attributes": "optional",
              "default": "443",
              "description": "portnumer of open sense map ( usually 443 )"
            },
            {
              "name": "sensors",
              "type": "Sensors",
              "description": "opensensemap sensor configuration",
              "attributes": "",
              "default": ""
            }
          ]
        }
      ],
      "returns": [
        {
          "type": "Message",
          "description": "message containing the status . Send it back to the broker"
        }
      ],
      "example": "const config =\r\n{\r\n  \"station\" : \"your station name (optional)\",\r\n  \"id\" : \"your station id\",\r\n  \"host\": \"ingress.opensensemap.org\",\r\n  \"port\": 443,\r\n  \"sensors\": [{\r\n          \"name\": \"temperature\",\r\n          \"uint\": \"°C\",\r\n          \"topic\" : \"topic/used/for/the/sensor\",\r\n          \"id\": \"your sensor id\"\r\n   }]\r\n}\r\nlet result = await Opensensemap.publish(\r\n   new Message('topic/used/for/the/sensor', 2.61, 'test value' },\r\n   config\r\n)",
      "async": true,
      "name": "publish",
      "function": true,
      "attributes": "async"
    }
  ]
}