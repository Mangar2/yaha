const Receive = require("@mangar2/receive")
const Publish = require("@mangar2/publish");
const UnitTest = require("@mangar2/unittest");
const Message = require("@mangar2/message");


(async function test() {    
    try {
        const HOST = "127.0.0.1";
        const PORT = 9001;

        let receive = new Receive(PORT);
        let publish = new Publish(HOST, PORT, {retry: 2});
        let value = {"/a/1" :1, "/b/1":1, "/c/1":1, "/d/1":1};
        let amount = 0;

        receive.on("publish", (message, qos) => {
            amount++;
            if (message.topic === "/a/0") {
                unitTest.assertEqual(qos, 0, "qos check");
            } else if (message.topic === "/a/1" || message.topic === "/b/1" || message.topic === "/c/1" || message.topic === "/d/1") {
                unitTest.assertEqual(qos, 1, "qos check");
                unitTest.assertEqual(message.value, value[message.topic], "value check qos 1");
                value[message.topic]++;
            } else {
                unitTest.fail("unexpected topic: " + message.topic);
            }
        })

        receive.listen();
        // connect
        for (let i = 1; i <= 1000; i++) {
            if (i % 10 == 0) console.log(i + " of 1000");
            result = await publish.publish(new Message("/a/0", i, "test"), 0, 0);
            result = await publish.publish(new Message("/a/1", i, "test"), 1, 0);
            result = await publish.publish(new Message("/b/1", i, "test"), 1, 0);
            result = await publish.publish(new Message("/c/1", i, "test"), 1, 0);
            result = await publish.publish(new Message("/d/1", i, "test"), 1, 0);
        }

        unitTest.showResult(9000);
        process.exit(0);
    }
    catch (err) {
        console.error(err);
        console.error("Error: test ends with errors")
        process.exit(1);
    }
})();

