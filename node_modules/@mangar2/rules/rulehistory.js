/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */

'use strict'

const types = require('@mangar2/types')

/**
 * @private
 * @description
 * Creates a class storing a history of topic/value pairs per rule to detect redundant messages
 */
class RuleHistory {
    constructor () {
        this._history = {}
    }

    /**
     * Gets the history entry of a rule to a topic
     * @param {string} name rule name
     * @param {string} topic message topic
     * @returns {string|number|undefined} value of the last message produced by this rule
     */
    _getHistoryEntry (name, topic) {
        let result
        if (this._history[name] !== undefined && this._history[name][topic] !== undefined) {
            result = this._history[name][topic]
        }
        return result
    }

    /**
     * @private
     * @description
     * Checks if a message is redundant. It is redundant, if it produces the same value as before
     * and if a possible timeout (cooldownInSeconds) has not been passed
     * @param {Object} rule rule to check
     * @param {string} rule.name rule name
     * @param {number} rule.cooldownInSeconds time between two updates with the same value. There is never
     * a cooldownd, if this value is undefined - the message with only be sent if it has a different value
     * @param {Date} date current date/time
     * @param {Message} message created by the rule
     * @returns {boolean} true, if the message is redundant
     */
    _isMessageRedundant (rule, date, message) {
        const MILLISECONDS_IN_A_SECOND = 1000
        const historyEntry = this._getHistoryEntry(rule.name, message.topic)
        let isRedundant = (historyEntry !== undefined && historyEntry === message.value)
        if (isRedundant && types.isNumber(rule.cooldownInSeconds)) {
            const cooldown = rule.cooldownInSeconds * MILLISECONDS_IN_A_SECOND
            const needToResend = this._history[name].date.getTime() + cooldown <= date.getTime()
            isRedundant = !needToResend
        }
        return isRedundant
    }

    /**
     * @private
     * @description
     * Updates the history entry for a rule
     * @param {string} name name of the rule
     * @param {Date} curDate current date/time
     * @param {Message} message current message
     */
    _updateHistory (name, curDate, message) {
        const value = message.value
        const date = new Date(curDate.getTime())
        if (this._history[name] === undefined) {
            this._history[name] = {}
        }
        this._history[name][message.topic] = { date, value }
    }

    /**
     * @description
     * Checks the messages produced by a rule and removes messages already sent
     * @param {Object} rule rule currently processing
     * @param {string} rule.name name of the rule
     * @param {Array} messages list of messages providing new information
     */
    extractNewMessages (rule, date, messages) {
        const result = []
        for (const message of messages) {
            if (!this._isMessageRedundant(rule, date, message)) {
                this._updateHistory(rule.name, date, message)
                result.push(message)
            }
        }
        return result
    }
}

module.exports = RuleHistory
