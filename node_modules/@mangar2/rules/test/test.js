/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */
'use strict'

const { Rules, ProcessRule } = require('@mangar2/rules')
const UnitTest = require('@mangar2/unittest')
const unitTest = new UnitTest(false)
const checkRule = require('./checkrule')

const rulesTree =
{
    motion: {
        rules: {
            sleeping: {
                durationWithoutMovementInMinutes: 15,
                requireAll: [
                    'ground/motion'
                ],
                allow: [
                    'first/motion'
                ],
                topic: 'system/presence',
                value: 'sleeping'
            },
            awake: {
                durationWithoutMovementInMinutes: 0,
                deny: [
                    'ground/motion'
                ],
                topic: 'system/presence',
                value: 'awake'
            },
            absent: {
                type: 'motion',
                durationWithoutMovementInMinutes: 15,
                requireAll: [
                    'ground/motion'
                ],
                allow: [
                    'first/motion'
                ],
                topic: 'system/presence',
                value: 'absent'
            }
        }
    }
}

/**
 * Runs a list of testcases
 * @param {Object[]} testcases array of tests
 */
function runTest (testcases) {
    for (const testcase of testcases) {
        for (const test of testcase.tests) {
            const checkTime = new Date()
            if (test.time !== undefined) {
                const chunks = test.time.split(':')
                checkTime.setHours(chunks[0], chunks[1])
            }
            const process = new ProcessRule(test.variables, checkTime)
            const result = process.check(testcase.rule, test.events)
            unitTest.assertEqual(result.messages.length, test.messages, test.name)
            if (result.messages.length !== test.messages) {
                process.check(testcase.rule, test.events)
            }
            if (result.messages.length > 0) {
                if (test.topic !== undefined) {
                    unitTest.assertEqual(result.messages[0].topic, test.topic, test.name)
                }
                if (test.value !== undefined) {
                    unitTest.assertEqual(result.messages[0].value, test.value, test.name)
                }
                if (test.QoS !== undefined) {
                    unitTest.assertEqual(result.messages[0].QoS, test.QoS, test.name)
                }
            }
        }
    }
}

const rules = new Rules(rulesTree, checkRule)
unitTest.assertEqual(rules.rules.length, 2, 'two legal rules')
unitTest.assertEqual(rules.invalidRules.length, 1, 'one invalid rule')
unitTest.assertEqual(rules.invalidRules[0].messages.type, 'unknown property, misspelled?', 'one invalid rule')

rules.invalidateRule('/motion/sleeping', 'syntax error')
unitTest.assertEqual(rules.rules.length, 1, 'one legal rule')
unitTest.assertEqual(rules.invalidRules.length, 2, 'two invalid rules')
unitTest.assertEqual(rules.invalidRules[1].messages, 'syntax error', 'two invalid rules')

const files = [
    'time',
    'value',
    'variables',
    'require',
    'allow',
    'deny'
]
for (const file of files) {
    runTest(require('./' + file + '.json'))
}

unitTest.showResult(71)
