/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */
'use strict'

const { Rules } = require('../rules')
const UnitTest = require('@mangar2/unittest')
const unitTest = new UnitTest(false)

const CheckInput = require('@mangar2/checkinput')
const checkRule = new CheckInput({
    type: 'object',
    properties: {
        name: { type: 'string' },
        durationWithoutMovementInMinutes: { type: 'number' },
        require: {
            type: 'array',
            minItems: 1,
            items: { type: 'string' }
        },
        allow: {
            type: 'array',
            minItems: 1,
            items: { type: 'string' }
        },
        deny: {
            type: 'array',
            minItems: 1,
            items: { type: 'string' }
        },
        topic: {
            type: ['string', 'array'],
            minItems: 1,
            items: { type: 'string' }
        },
        check: {
            type: ['number', 'string', 'array'],
            minItems: 2,
            maxItems: 3,
            anyOf: [
                {
                    items: [
                        {
                            enum: [
                                'and', 'or',
                                '=', 'equal', 'equals',
                                '!=', 'not equal', 'not equals',
                                '<', 'below', 'less',
                                '>', 'above', 'greater',
                                '<=', 'below or equal', 'less or equal',
                                '>=', 'above or equal', 'greater or equal'
                            ]
                        }
                    ],
                    additionalItems: { $ref: '#/properties/check' }
                },
                {
                    items: [
                        {
                            enum: ['switch']
                        },
                        {
                            $ref: '#/properties/check'
                        },
                        {
                            type: 'object',
                            additionalProperties: { type: ['string', 'number', 'boolean'] }
                        }
                    ]
                },
                {
                    items: [
                        {
                            enum: ['call']
                        },
                        {
                            type: 'string'
                        }
                    ]
                }
            ]
        },
        value: {
            oneOf: [
                {
                    type: ['string', 'number']
                },
                {
                    $ref: '#/check'
                }
            ]
        },
        time: {
            oneOf: [
                {
                    type: 'string'
                },
                {
                    $ref: '#/check'
                }
            ]
        },
        duration: { type: ['number', 'string'] }
    },
    required: ['topic', 'value'],
    additionalProperties: false

})

const rulesTree =
{
    motion: {
        rules: {
            sleeping: {
                durationWithoutMovementInMinutes: 15,
                require: [
                    'ground/motion'
                ],
                allow: [
                    'first/motion'
                ],
                topic: 'system/presence',
                value: 'sleeping'
            },
            awake: {
                durationWithoutMovementInMinutes: 0,
                deny: [
                    'ground/motion'
                ],
                topic: 'system/presence',
                value: 'awake'
            },
            absent: {
                type: 'motion',
                durationWithoutMovementInMinutes: 15,
                require: [
                    'ground/motion'
                ],
                allow: [
                    'first/motion'
                ],
                topic: 'system/presence',
                value: 'absent'
            }
        }
    }
}

const rules = new Rules(rulesTree, checkRule)
unitTest.assertEqual(rules.rules.length, 2, 'two legal rules')
unitTest.assertEqual(rules.invalidRules.length, 1, 'one invalid rule')
unitTest.assertEqual(rules.invalidRules[0].messages.type, 'unknown property, misspelled?', 'one invalid rule')

rules.invalidateRule('/motion/sleeping', 'syntax error')
unitTest.assertEqual(rules.rules.length, 1, 'one legal rule')
unitTest.assertEqual(rules.invalidRules.length, 2, 'two invalid rules')
unitTest.assertEqual(rules.invalidRules[1].messages, 'syntax error', 'two invalid rules')

unitTest.showResult(6)
