/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */
'use strict'

const Rules = require('../rules')
const UnitTest = require('@mangar2/unittest')
const unitTest = new UnitTest(false)

const CheckInput = require('@mangar2/checkinput')
const checkRule = new CheckInput({
    type: 'object',
    properties: {
        name: { type: 'string' },
        current: { type: 'string' },
        durationWithoutMovementInMinutes: { type: 'number' },
        require: {
            type: 'array',
            items: { type: 'string' }
        },
        allow: {
            type: 'array',
            items: { type: 'string' }
        },
        deny: {
            type: 'array',
            items: { type: 'string' }
        },
        topic: {
            anyOf: [
                { type: 'string' },
                {
                    type: 'array',
                    items: { type: 'string' }
                }
            ]
        },
        value: {
            anyOf: [
                { type: 'string' },
                { type: 'number' }
            ]
        },
        time: { type: 'string' },
        duration: { type: 'number' }
    },
    required: ['current', 'durationWithoutMovementInMinutes', 'topic', 'value'],
    strict: true

})

const rulesTree =
{
    motion: {
        rules: {
            sleeping: {
                current: 'awake',
                durationWithoutMovementInMinutes: 15,
                require: [
                    'ground'
                ],
                allow: [
                    'first'
                ],
                topic: 'system/presence',
                value: 'sleeping'
            },
            awake: {
                current: 'sleeping',
                durationWithoutMovementInMinutes: 0,
                deny: [
                    'ground'
                ],
                topic: 'system/presence',
                value: 'awake'
            },
            absent: {
                type: 'motion',
                current: 'awake',
                durationWithoutMovementInMinutes: 15,
                require: [
                    'ground'
                ],
                allow: [
                    'first'
                ],
                topic: 'system/presence',
                value: 'absent'
            }
        }
    }
}

const rules = new Rules(rulesTree, checkRule)
unitTest.assertEqual(rules.rules.length, 2, 'two legal rules')
unitTest.assertEqual(rules.invalidRules.length, 1, 'one invalid rule')
unitTest.assertEqual(rules.invalidRules[0].messages.type, 'unknown property, misspelled?', 'one invalid rule')

rules.invalidateRule('/motion/sleeping', 'syntax error')
unitTest.assertEqual(rules.rules.length, 1, 'one legal rule')
unitTest.assertEqual(rules.invalidRules.length, 2, 'two invalid rules')
unitTest.assertEqual(rules.invalidRules[1].messages, 'syntax error', 'two invalid rules')

unitTest.showResult(6)
