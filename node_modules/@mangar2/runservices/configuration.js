/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */

'use strict'

const types = require('@mangar2/types')
const readConfiguration = require('@mangar2/config').readConfiguration
const sanitize = require('@mangar2/configuration')
const errorLog = require('@mangar2/errorlog')
const CheckInput = require('@mangar2/checkinput')

const checkConfiguration = new CheckInput(
    {
        properties: {
            clientId: { type: 'string' },
            version: { enum: ['0.0', '1.0'] },
            clean: { type: 'boolean' },
            broker: { $ref: '#broker' },
            listener: { type: ['string', 'number'] },
            keepAliveInSeconds: { type: 'number' },
            log: { $ref: '#log' },
            services: {
                type: 'array',
                items: { type: 'string' }
            },
            required: ['clientId', 'version', 'clean', 'broker', 'listener', 'keepAliveInSeconds', 'services'],
            additionalProperties: false
        },
        definitions: {
            broker: {
                $id: '#broker',
                type: 'object',
                properties: {
                    port: { type: ['string', 'number'] },
                    host: { type: 'string' }
                },
                required: ['port', 'host'],
                additionalProperties: false
            },
            log: {
                $id: '#log',
                type: 'array',
                items: {
                    type: 'object',
                    properties: {
                        module: { enum: ['all', 'send', 'receive'] },
                        topic: { type: '#' },
                        level: { type: 'integer' }
                    },
                    required: ['module', 'topic'],
                    additionalProperties: false
                }
            }
        }
    }
)

const defaultConfiguration = {
    clientId: 'yaha/internal',
    version: '1.0',
    clean: true,
    broker: {
        port: 8183,
        host: '127.0.0.1'
    },
    listener: 8204,
    keepAliveInSeconds: 600,
    log: [
        {
            module: 'send',
            topic: '#',
            level: 1
        },
        {
            module: 'all',
            topic: '$SYS/#',
            level: 0
        }
    ]
}

/**
 * @private
 * Gets the configuration, fills default values and sanitizes it
 * @param {string} filename name of the configuration file
 * @returns {Object} configuration
 */
function getConfiguration (filename) {
    // path to your configuration file
    const config = readConfiguration(filename)
    if (!types.isObject(config.runservices)) {
        errorLog('The active configuration does not contain a "runservice" section, program stopped')
        process.exit(1)
    }
    config.runservices = sanitize(config.runservices, defaultConfiguration, checkConfiguration)
    return config
}

module.exports = getConfiguration
