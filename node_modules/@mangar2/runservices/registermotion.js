/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */

'use strict'

const types = require('@mangar2/types')
const fs = require('fs')
const errorLog = require('@mangar2/errorlog')

/**
 * @private
 * Registers the automation service, if the configuration demands it
 * @param {MqttClient} mqttClient client providing mqtt services
 * @param {Object} config configuration data
 * @param {Object} config.motion configuration for the motion service
 * @param {Array} config.runservices.services configured services to install
 */
function registerMotion (mqttClient, config) {
    if (config.motion && config.runservices.services.includes('motion')) {
        try {
            const Motion = require('@mangar2/motion')
            let rules = config.motion.rules
            if (types.isString(rules)) {
                rules = JSON.parse(fs.readFileSync(rules))
            }
            const motion = new Motion(config.motion, rules)
            console.log('checking motion rules ...')
            const subscriptions = motion.getSubscriptions()

            mqttClient.registerRecipient(subscriptions, (message) => {
                const setResponse = motion.processMessage(message)
                const result = motion.processRules()
                const messages = [...result.messages, ...setResponse]
                return messages
            })
            mqttClient.registerSender(config.motion.intervalInSeconds * 1000, async () => {
                const result = motion.processRules()
                return result.messages
            })

            console.log('started motion service')
        } catch (err) {
            errorLog(err, false)
        }
    }
}

module.exports = registerMotion
