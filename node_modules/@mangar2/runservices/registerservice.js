/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */

'use strict'

const { errorLog, types } = require('@mangar2/utils')
const DEBUG = false

/**
 * Connects the background task functionality of a registered object with the
 * mqttClient handlers
 * @param {MQTTClient} mqttClient mqtt client object managing the services
 * @param {Object} registeredObject object in registration
 */
function _registerBackgroundTasks (mqttClient, registeredObject) {
    if (types.isAnyFunction(registeredObject.on)) {
        registeredObject.on('publish', (message) => mqttClient.publish(message))
    }

    if (types.isAnyFunction(registeredObject.close)) {
        mqttClient.registerCloseFunction(async () => { registeredObject.close() })
    }

    if (types.isAnyFunction(registeredObject.run)) {
        registeredObject.run()
    }
}

/**
 * Registers subscriptions
 * @param {MqttClient} mqttClient client providing mqtt services
 * @param {Object} registeredObject registered service object
 * @param {Object} curConfig configuration data of the service
 * @param {string} serviceName name of the service to start
 * @param {function} prepare function to call on update message
 */
function _registerSubscriptions (mqttClient, registeredObject, curConfig, serviceName, prepare) {
    const updateString = '$SYS/' + serviceName + '/update'
    const subscriptions = registeredObject.getSubscriptions ? registeredObject.getSubscriptions() : {}
    subscriptions[updateString] = 1

    mqttClient.registerRecipient(subscriptions, (message) => {
        if (message.topic === updateString) {
            prepare(curConfig, registeredObject)
            /* const newSubscriptions = */ registeredObject.getSubscriptions()
        } else {
            return registeredObject.handleMessage(message)
        }
    })
}

/**
 * @private
 * @description Registers the automation service, if the configuration demands it
 * @param {MqttClient} mqttClient client providing mqtt services
 * @param {string[]} services names of services to start
 * @param {Object} config configuration data
 * @param {string[]} config.runservices.services configured services to install
 * @param {Object} curConfig configuration data of the service
 * @param {string} serviceName name of the service to start
 * @param {string} serviceImplementation name of the service to require
 */
function registerService (mqttClient, config, curConfig, serviceName, serviceImplementation) {
    if (curConfig && config.runservices.services.includes(serviceName)) {
        try {
            const { prepare } = require(serviceImplementation)
            // watchRules()
            const registeredObject = prepare(curConfig)

            _registerSubscriptions(mqttClient, registeredObject, curConfig, serviceName, prepare)

            if (curConfig.intervalInSeconds) {
                mqttClient.registerSender(curConfig.intervalInSeconds * 1000, async () => {
                    const result = registeredObject.processTasks()
                    return result.messages
                })
            }

            _registerBackgroundTasks(mqttClient, registeredObject)

            console.log('started ' + serviceName + ' service')
        } catch (err) {
            errorLog(err, DEBUG)
        }
    }
}

module.exports = { registerService }
