var childProcess = require('child_process')
const retryCalls = new (require('retry'))()
const DELAY_BEFORE_SWITCH_OFF_IN_MILLISECONDS = 2 * 60 * 1000

function hibernate (pathAndFileName) {
    childProcess.exec(pathAndFileName, function (error, stdout, stderr) {
        console.log('hibernating')
    })
}

function hibernateAndSwitchOff (topic, pathAndFileName, callback) {
    const retryAmount = 3
    retryCalls.topicRetry(topic, retryAmount, DELAY_BEFORE_SWITCH_OFF_IN_MILLISECONDS, (loop) => {
        if (loop < 2) {
            hibernate(pathAndFileName)
        } else if (loop === 2) {
            if (typeof (callback) === 'function') {
                callback('off')
            }
        }
    })
}

function switchOn (topic, callback) {
    const retryAmount = 1
    retryCalls.topicRetry(topic, retryAmount, 0, () => {
        if (typeof (callback) === 'function') {
            callback('on')
        }
    })
}

/**
 * Switches a device on or off. If switched off, hibernate is called several minutes before.
 * @param {string} topic topic (id) of the device
 * @param {string} value either "on" or "off"
 * @param {string} pathAndFileName path and filename to the batch file calling the hibernate
 * @param {function} callback callback to switch the device on or off
 */
module.exports = (topic, value, pathAndFileName, callback) => {
    if (value === 'on') {
        switchOn(topic, callback)
    } else if (value === 'off') {
        hibernateAndSwitchOff(topic, pathAndFileName, callback)
    }
}
