/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */

'use strict'

const TestRun = require('@mangar2/testrun')
const ArdunioDNS = require('../../serialtomqtt')

const VERBOSE = true
const testrunToMqtt = new TestRun(VERBOSE)

const options = {
    settings: {
        L: 'brightness sensor/brightness',
        M: 'motion sensor/detection state',
        R: 'temperature and humidity sensor/read error code',
        H: 'temperature and humidity sensor/humidity in percent',
        T: 'temperature and humidity sensor/temperature in celsius',
        K: 'light/light on time in seconds',
        B: 'light/light activation brightness',
        D: 'temperature and humidity sensor/pin',
        E: 'system/error level',
        I: 'light/target intensity',
        O: 'light/light start voltage',
        P: 'light/dimming delay in milliseconds',
        S: 'Arduino base settings/I2C server address',
        A: 'Arduino base settings/I2C client address',
        l: 'light/light on time',
        WardrobeTempSys: '/status/temperature',
        Version: '/status/version'
    },
    status: {
        a: 'Arduino Status Information/internal communication state',
        b: 'Brightness Sensor/brightness in percent',
        c: 'Arduino clock/time of day in minutes',
        d: 'Arduino Status Information/debug information',
        e: 'Arduino Status Information/received error',
        h: 'Temperature and Humidity Sensor/humidity in percent',
        l: 'Light/light on time',
        m: 'Motion Sensor/detection state',
        n: 'Motion Sensor/detection state',
        o: 'window/detection state',
        p: 'Air pressure/air pressure in millibar',
        r: 'Temperature and Humidity Sensor/read error code',
        s: 'Arduino Status Information/internal temperature in celsius',
        t: 'Temperature and Humidity Sensor/temperature in celsius',
        v: 'Light/light voltage',
        w: 'Water leakage/detection state',
        y: 'Arduino Status Information/move controller state',
        z: 'Arduino Status Information/memory left in bytes'
    },
    topics: {
        'level0/room1/device1/switch/one': {
            command: 'switch',
            value: 1,
            address: 'main'
        },
        'level1/room1/device2/switch/two': {
            command: 'switch',
            value: 2,
            address: 'main'
        },
        'level1/room1/device2/switch/three': {
            command: 'switch',
            value: 4,
            address: 'main'
        },
        'level1/room1/device2/switch/four': {
            command: 'switch',
            value: 8,
            address: 'main'
        },
        'level1/room1/device2/switch/five': {
            command: 'switch',
            value: 16,
            address: 'main'
        },
        'level1/room1/device2/switch/six': {
            command: 'switch',
            value: 32,
            address: 'main'
        },
        'level1/room1/device2/switch/seven': {
            command: 'switch',
            value: 64,
            address: 'main'
        },
        'level1/room1/device2/switch/eight': {
            command: 'switch',
            value: 128,
            address: 'main'
        }
    },
    interfaces: {
        LightOnOff: {
            description: 'Switches light on/off by setting the light on time in seconds',
            usedby: ['V'],
            map: {
                on: 3600,
                off: 0
            }
        }
    },
    values: {
        V: [
            {
                value: 'on',
                serialValue: 3600
            },
            {
                value: 'off',
                serialValue: 0
            }
        ]
    },
    addresses: {
        'level0/room1/device1/': 3,
        'level1/room1/device1/': 4,
        'level1/room1/device2/': 5
    },
    interfaceVersion: 1
}

testrunToMqtt.on('prepare', testcase => {
    const arduinoDNS = new ArdunioDNS(options)
    return arduinoDNS
})

const runTestToMQTT = (test, arduinoDNS) => {
    const result = arduinoDNS.toMqttMessages(test.serial)
    return result
}

testrunToMqtt.on('run', runTestToMQTT)

testrunToMqtt.on('break', (test, arduinoDNS) => {
    runTestToMQTT(test, arduinoDNS)
})

testrunToMqtt.on('validate', (test, messages, path) => {
    let validate = true
    for (const index in test.expected) {
        const expectedMessage = test.expected[index]
        const mqttMessage = messages[index]
        if (mqttMessage !== undefined) {
            for (const property in expectedMessage) {
                const expectedValue = expectedMessage[property]
                if (!testrunToMqtt.unitTest.assertEqual(expectedValue, mqttMessage[property], path + '/' + property)) {
                    validate = false
                }
            }
        } else {
            validate = false
        }
    }
    if (!validate) {
        console.log(messages)
        testrunToMqtt.runAgain()
    }
})

testrunToMqtt.asyncRun(
    [
        'tomqtt'
    ],
    __dirname,
    2
)
