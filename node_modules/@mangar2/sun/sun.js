/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */

'use strict'

/**
 * @private
 */
const ONE_MINUTE = 60 * 1000
const ONE_HOUR = 60 * ONE_MINUTE
const HOURS_IN_A_DAY = 24
const ONE_DAY = HOURS_IN_A_DAY * ONE_HOUR
const SUN_LONGITUDE_PER_HOUR = 15
const DEGREE_TO_RADIAN = Math.PI / 180
const RADIAN_TO_DEGREE = 180 / Math.PI

/**
 * Default Zenith
 * @type {number}
 */
const ZENITH = 90.83333333333333

/**
 * @private
 * Calculates sinus providing an angle
 * @param {number} degree
 */
function sinDegree (degree) {
    return Math.sin(degree * DEGREE_TO_RADIAN)
}

/**
 * @private
 * Calculates cosinus providing an angle
 * @param {number} degree
 */
function cosDegree (degree) {
    return Math.cos(degree * DEGREE_TO_RADIAN)
}

/**
 * @private
 * Calculates tangens providing an angle
 * @param {number} degree
 */
function tanDegree (degree) {
    return Math.tan(degree * DEGREE_TO_RADIAN)
}

/**
 * @private
 * Calculates arcus tangens providing an angle
 * @param {number} degree
 */

function atanDegree (degree) {
    return RADIAN_TO_DEGREE * Math.atan(degree)
}

/**
 * @private
 * Calculates arcus cosinus providing an angle
 * @param {number} degree
 */
function acosDegree (degree) {
    return RADIAN_TO_DEGREE * Math.acos(degree)
}

/**
 * @private
 * Calculates the day of the year
 * @param {Date} date date
 */
function calcDayOfYear (date) {
    const yearBegin = new Date(date.getFullYear(), 0, 0)
    let timeDiffInMilliseconds = date - yearBegin
    const daylightSavingCompensationInMilliseconds = (date.getTimezoneOffset() - yearBegin.getTimezoneOffset()) * ONE_MINUTE
    timeDiffInMilliseconds += daylightSavingCompensationInMilliseconds
    const dayOfYear = Math.floor(timeDiffInMilliseconds / ONE_DAY)
    return dayOfYear
}

/**
 * @private
 * Calculates sunset or sunrise
 * @param {Date} date date for sunrise/sunset
 * @param {number} longitude longitude of position to calculate
 * @param {number} latitude longitude of position to calculate
 * @param {number} zenith (official: 90°50', civil: 96, nautical: 102, astronomical: 108)
 * @param {boolean} sunrise (true for sunrise, false for sunset)
 * @returns {Object} with properties 'time' and 'info' (if any info is available)
 */
function calcSun (date, longitude, latitude, zenith, sunrise) {
    const result = {}

    const dayOfYear = calcDayOfYear(date)
    const longitudePerHour = longitude / SUN_LONGITUDE_PER_HOUR
    const meanTime = sunrise ? 6 : 18
    const approximateTime = dayOfYear + (meanTime - longitudePerHour) / HOURS_IN_A_DAY

    const sunMeanAnomaly = (0.9856 * approximateTime) - 3.289

    let sunTrueLongitude = sunMeanAnomaly +
        (1.916 * sinDegree(sunMeanAnomaly)) +
        (0.020 * sinDegree(2 * sunMeanAnomaly)) + 282.634
    if (sunTrueLongitude > 360) {
        sunTrueLongitude -= 360
    }
    if (sunTrueLongitude < 0) {
        sunTrueLongitude = 0
    }

    let sunRightAscension = atanDegree(0.91764 * tanDegree(sunTrueLongitude))
    if (sunRightAscension > 360) {
        sunRightAscension = sunRightAscension - 360
    } else if (sunRightAscension < 0) {
        sunRightAscension = sunRightAscension + 360
    };

    const longitudeQuadrant = Math.floor(sunTrueLongitude / 90) * 90
    const rightAscensionQuadrant = Math.floor(sunRightAscension / 90) * 90
    sunRightAscension += (longitudeQuadrant - rightAscensionQuadrant)
    sunRightAscension /= SUN_LONGITUDE_PER_HOUR

    const sunDeclinationSin = 0.39782 * sinDegree(sunTrueLongitude)
    const sunDeclinationCos = Math.cos(Math.asin(sunDeclinationSin))
    const cosSunLocalHourAngle =
        (cosDegree(zenith) - (sunDeclinationSin * sinDegree(latitude))) /
        (sunDeclinationCos * cosDegree(latitude))
    if (cosSunLocalHourAngle > 1) {
        result.info = 'Sun never rises'
    }
    if (cosSunLocalHourAngle < -1) {
        result.info = 'Sun never sets'
    }

    let sunLocalHourAngle = acosDegree(cosSunLocalHourAngle)
    if (sunrise) {
        sunLocalHourAngle = 360 - sunLocalHourAngle
    }

    sunLocalHourAngle /= SUN_LONGITUDE_PER_HOUR

    const localMeanTime = sunLocalHourAngle + sunRightAscension - (0.06571 * approximateTime) - 6.622
    let UTCTime = localMeanTime - longitudePerHour
    if (UTCTime > 24) {
        UTCTime = UTCTime - 24
    } else if (UTCTime < 0) {
        UTCTime = UTCTime + 24
    }

    const timeOfDay = new Date(UTCTime * ONE_HOUR)
    result.time = date
    result.time.setHours(timeOfDay.getHours(), timeOfDay.getMinutes(), timeOfDay.getSeconds())

    return result
}

/**
 * Calculates sunset
 * @param {number} longitude longitude of position to calculate
 * @param {number} latitude longitude of position to calculate
 * @param {Date} [date=today] date for sunrise/sunset
 * @param {number} [zenith=90°50] (official: 90°50', civil: 96, nautical: 102, astronomical: 108)
 * @returns {Date} date/time of sunset
 */
function sunset (longitude, latitude, date = new Date(), zenith = ZENITH) {
    const result = calcSun(date, longitude, latitude, zenith, false)
    return result.time
}

/**
 * Calculates sunrise
 * @param {number} longitude longitude of position to calculate
 * @param {number} latitude longitude of position to calculate
 * @param {Date} [date=today] date for sunrise/sunset
 * @param {number} [zenith=90°50] (official: 90°50', civil: 96, nautical: 102, astronomical: 108)
 * @returns {Date} date/time of sunrise
 */
function sunrise (longitude, latitude, date = new Date(), zenith = ZENITH) {
    const result = calcSun(date, longitude, latitude, zenith, true)
    return result.time
}

module.exports = { sunrise, sunset }
