/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */

'use strict'

//@ts-ignore
import { types } from '@mangar2/utils'

/**
 * Converts a time string in format HH:MM or HH:MM:SS or MMM to seconds
 * @param {string} timeString delta time
 * @throws {Error} on false date format
 * @returns {number} time string in seconds
 */
export function stringToSeconds (timeString: string): number {
    let minus = 1
    let result = 0
    if (timeString.length > 0 && timeString.charAt(0) === '-') {
        minus = -1
        timeString = timeString.substring(1)
    }
    const sourceChunks = timeString.trim().split(':')
    const resultChunks: number[] = []

    for (let index = 0; index < sourceChunks.length; index++) {
        const chunkAsNumber: number = parseInt(sourceChunks[index])
        if (!types.isInteger(chunkAsNumber)) {
            throw Error('Illegal time format: ' + timeString)
        }
        resultChunks.push(chunkAsNumber)
    }

    if (resultChunks.length === 1) {
        result = resultChunks[0] * 60
    } else if (resultChunks.length >= 2) {
        result = resultChunks[0] * 60 * 60
        result += resultChunks[1] * 60
        if (resultChunks.length === 3) {
            result += resultChunks[2]
        }
    }
    result *= minus
    return result
}

/**
 * Checks, if a string is a time of day string (HH:MM or HH:MM:SS)
 * @param {string} timeString delta time
 * @returns {boolean} true, if the string is a time of day string
 */
export function isTimeOfDayString (timeString: string): boolean {
    let result = false
    if (types.isString(timeString)) {
        const timeChunks = timeString.trim().split(':')
        result = timeChunks.length > 1 && timeChunks.length <= 3
        let maxInt = 23
        for (let chunk of timeChunks) {
            const chunkAsNumber = parseInt(chunk)
            if (!types.isInteger(chunkAsNumber) || chunkAsNumber < 0 || chunkAsNumber > maxInt) {
                result = false
                break
            }
            maxInt = 59
        }
    }
    return result
}

/**
 * Converts a time string in format HH:MM or HH:MM:SS or MMM to a date (today, same time of day)
 * @param {string} timeString time of day
 * @throws {Error} on false time format
 * @returns {Date} today, hours, minutes, seconds set to the time of day string
 */
export function timeOfDayStringToDate (timeString: string): Date {
    const result = new Date()
    const seconds = timeString === undefined ? 0 : stringToSeconds(timeString)
    result.setHours(0, 0, seconds, 0)
    return result
}

/**
 * Gets the seconds since midnight of a date.
 * @param {Date} date date to concider
 * @returns {number} amount of seconds passed since midnight
 */
export function dateToTimeOfDayInSeconds (date: Date): Number {
    const midnight = new Date(date.getTime())
    midnight.setHours(0, 0, 0)
    const result: Number = (date.getTime() - midnight.getTime()) / 1000
    return result
}


