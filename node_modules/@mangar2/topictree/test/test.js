/**
 * ---------------------------------------------------------------------------------------------------
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * File:      test.js
 *
 * Author:      Volker Böhm
 * Copyright:   Volker Böhm
 * ---------------------------------------------------------------------------------------------------
 */


'use strict'

const TopicTree = require("@mangar2/topictree");
const UnitTest = require("@mangar2/unittest");
const HISTORY_LENGTH = 120;
const HISTORY_HYSTERESE = 20;

var topicTree = new TopicTree({maxHistoryLength: HISTORY_LENGTH, historyHysterese: HISTORY_HYSTERESE});
var unitTest = new UnitTest(true);

topicTree.addData("/a/b",  {value: "off"}, {reason: "hello a/b"});
topicTree.addData("/a/b", {value: "on"}, {reason: "hello a/b"});
topicTree.addData("/a/b/a", {value: "on"}, {reason: "hello a/b/a"});
topicTree.addData("/a/c", {value: "off"}, {reason: "hello a/c"});

// Check node /a/b
let node = topicTree.getNode("/a/b");
unitTest.assertEqual(node.data.value, "on", "/a/b 1");
unitTest.assertEqual(node.description.reason, "hello a/b", "/a/b 2");
// Check history
unitTest.assertEqual(node.history.length, 1, "/a/b 3");
unitTest.assertEqual(node.history[0].data.value, "off", "/a/b 4");

// Check node /a/c
node = topicTree.getNode("/a/c");
unitTest.assertEqual(node.data.value, "off", "/a/c 1");
unitTest.assertEqual(node.description.reason, "hello a/c", "/a/c 2");

// Check a leaf with childs
node = topicTree.getNode("/a/b/a");
unitTest.assertEqual(node.description.reason, "hello a/b/a", "a/b/a");

// Check long amount of history entries
let amount = HISTORY_LENGTH - HISTORY_HYSTERESE;
for (let i = 0; i <= amount; i++) {
    topicTree.addData("/b/a", {value: i}, {reason: i});
}
// Check that a random node is not modified
node = topicTree.getNode("/a/b");
unitTest.assertEqual(node.data.value, "on", "/b/a 1");
node = topicTree.getNode("b/a");
unitTest.assertEqual(node.data.value, amount, "/b/a 2");
unitTest.assertEqual(node.history.length, amount, "/b/a 3");
unitTest.assertEqual(node.history[0].data.value, amount - 1, "/b/a 4");
unitTest.assertEqual(node.history[amount - 1].data.value, 0, "/b/a 5");

// Check long amount of history entries
amount = 100 * (HISTORY_HYSTERESE) + HISTORY_LENGTH + 2;
for (let i = 0; i <= amount; i++) {
    topicTree.addData("/b/b", {value: i}, {reason: i});
}
// Check that a random node is not modified
node = topicTree.getNode("b/b");
unitTest.assertEqual(node.data.value, amount, "/b/b 1");
unitTest.assertEqual(node.history.length, HISTORY_LENGTH - HISTORY_HYSTERESE + 2, "/b/b 2");
unitTest.assertEqual(node.history[0].data.value, amount - 1, "/b/b 3");
unitTest.assertEqual(node.history[HISTORY_LENGTH - HISTORY_HYSTERESE - 2].data.value, amount - HISTORY_LENGTH + HISTORY_HYSTERESE + 1, "/b/b 4");
//console.log(JSON.stringify(node.history));

// Add lots of topics
function addStringsRec(depth, path) {
    if (depth === 0) {
        topicTree.addData(path, {value: depth}, {reason: path});
    } else {
        let string = "a";
        let charCode = string.charCodeAt(0);
        for (let letters = 0; letters < 6; letters++) {
            addStringsRec(depth - 1, path + "/" + String.fromCharCode(charCode + letters))
        }
    }
}

addStringsRec(3, "/c");
node = topicTree.getNode("/c/d/e/f");
unitTest.assertEqual(node.description.reason, "/c/d/e/f", "addStringsRec 1");

let section = topicTree.getSection("/c/a/a", 1);
console.log(JSON.stringify(section, null, 2));