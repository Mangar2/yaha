/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */

'use strict'

const UnitTest = require('@mangar2/unittest')
const Types = require('@mangar2/types')

const unitTest = new UnitTest(true, false)
const testCases = [[], {}, null, undefined, 1, 1.1, 'hello world', () => console.log('hello world'), 'string', '1', '1.1', 'false', 'true', false, true]

/**
 * Runs a list of test cases
 * @param {function} callback function to call for test
 * @param {string} hint hint to print on verbose unit tests
 * @param {boolean[]} expectedResults result for each test
 */
function testFunction (callback, hint, expectedResults) {
    console.log('test ' + hint)
    for (const index in testCases) {
        const testCase = testCases[index]
        const expected = expectedResults[index]
        const info = hint + '(' + testCase + ')'
        const result = callback(testCase)
        unitTest.assertEqual(result, expected, info)
    }
    console.log('')
}

testFunction(test => Types.isFunction(test), 'isFunction', [false, false, false, false, false, false, false, true, false, false, false, false, false, false, false])
testFunction(test => Types.isArray(test), 'isArray', [true, false, false, false, false, false, false, false, false, false, false, false, false, false, false])
testFunction(test => Types.isObject(test), 'isObject', [false, true, false, false, false, false, false, false, false, false, false, false, false, false, false])
testFunction(test => Types.isNull(test), 'isNull', [false, false, true, false, false, false, false, false, false, false, false, false, false, false, false])
testFunction(test => Types.isUndefined(test), 'isUndefined', [false, false, false, true, false, false, false, false, false, false, false, false, false, false, false])
testFunction(test => Types.isBoolean(test), 'isBoolean', [false, false, false, false, false, false, false, false, false, false, false, false, false, true, true])
testFunction(test => Types.isNumber(test), 'isNumber', [false, false, false, false, true, true, false, false, false, false, false, false, false, false, false])
testFunction(test => Types.isString(test), 'isString', [false, false, false, false, false, false, true, false, true, true, true, true, true, false, false])
unitTest.assertTrue(Types.isDate(new Date()), 'date')
unitTest.assertFalse(Types.isDate('8:00'), 'no date')
unitTest.showResult(122)
