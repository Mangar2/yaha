/**
 * ---------------------------------------------------------------------------------------------------
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * File:        test.js
 *
 * Author:      Volker Böhm
 * Copyright:   Volker Böhm
 * ---------------------------------------------------------------------------------------------------
 */

'use strict'

const UnitTest = require('@mangar2/unittest')

const unitTest = new UnitTest(true, true)

const validateRec = (toValidate, expected, path, exact=false, different=false) => {
    try {
        unitTest.validateRec(toValidate, expected, path, exact)
        if (different) {
            unitTest.fail('not different')
        } else {
            unitTest.success('ok')
        }
    } catch (err) {
        if (different) {
            unitTest.success(err)
        } else {
            unitTest.fail(err)
        }
    }
}

unitTest.assertEqual('1', '1', 'equal')
unitTest.assertTrue(true, 'true')
unitTest.assertFalse(false, 'false')
unitTest.success('success')
unitTest.log('just a log')
unitTest.assertDeepEqual({ a: 'b' }, { a: 'b' })
unitTest.expectException(() => { throw new Error('Hello World') }, 'Error', 'message')
validateRec({a: 1, b: 2}, {a: 1, b: 2}, 1)
validateRec({a: 3, b: 2}, {a: 1, b: 2}, 2, false, true)
validateRec([1, 2], [1, 2], 3)
validateRec([1, 3], [1, 2], 4, false, true)
validateRec({ c: { a: 'a', b: 'b' }, d: ['d', 'e'] }, { c: { a: 'a', b: 'b' }, d: ['d', 'e'] }, 5)
validateRec({ c: { a: 'a', b: 'c' }, d: ['d', 'e'] }, { c: { a: 'a', b: 'b' }, d: ['d', 'e'] }, 6, false, true)
validateRec({ c: { a: 'a', b: 'b' }, d: ['d', 'e'] }, { c: { a: 'a', b: 'b' }, d: ['d', 'e'] }, 7)
validateRec({ c: { a: 'a', b: 'b' }, d: ['d', 'e'] }, { c: { a: 'a', b: 'b' }, d: ['d', 'f'] }, 8, false, true)
validateRec({a: 1, b: 2}, { a: 1 }, 9)
validateRec({a: 1, b: 2}, { b: 2 }, 10)
validateRec({a: 1, b: 2}, { b: 2 }, 11, true, true)
validateRec({a: 1, b: 2}, { a: 1, b: 2 }, 12, true, false)

unitTest.showResult(18)
