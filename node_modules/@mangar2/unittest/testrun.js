/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */

'use strict'

const UnitTest = require('./unittest')
const { types, Callbacks } = require('@mangar2/utils')
const CheckInput = require('@mangar2/checkinput')
const schema = require('./testschema.js')

/**
 * Called to prepare the environment for a testcase
 * @callback {prepare}
 * @param {Object} testcase testcase definition
 * @param {string} testcasePath path to the testcase
 */

/**
 * Called to run a test
 * @callback {run}
 * @param {Object} test test definition
 * @returns {Any} result of the test run
 * @throws {Error} unexpected exeptions coming from the test
 */

/**
 * Called to validate a test result
 * @callback {validate}
 * @param {Object} test test definition
 * @param {Any} result result of the test run
 * @param {string} testPath path to the test
 */

/**
  * Called to break execution
  * @callback {break}
  */

/**
 * @description Runs a test based on JSON files
 * @param {boolean} verbose true, if you need to debug the tests
 */
class Testrun {
    constructor (verbose = false, parallel = false) {
        this._verbose = verbose
        this._callbacks = new Callbacks(['prepare', 'run', 'validate', 'break', 'cleanup'])
        this._unitTest = new UnitTest(this._verbose, this._verbose)
        this._fileContent = null
        this._testNo = 0
        this._parallel = parallel
        this.on('prepare', () => {})
    }

    /**
     * @description Sets a callback.
     * @param {string} event event name (not case sensitive) for the callback
     * -'prepare' called once per testcase to prepare data
     * -'run' called once per test to run the test
     * -'validate' called once per test to validate the test
     * -'break' called to break execution and starts debugging at the right test case
     * @param {prepare|run|validate} callback(parameter)
     * @throws {Error} if the event is not supported
     * @throws {Error} if the callback is not 'function'
     */
    on (event, callback) {
        this._callbacks.on(event, callback)
    }

    /**
     * Unit test Object
     * @type {UnitTest}
     */
    get unitTest () { return this._unitTest }

    /**
     * Gets the current number of test
     * @type {integer}
     */
    get testNo () { return this._testNo }

    /**
     * Standard validate method
     * @param {object} test test case
     * @param {object} result test result
     * @param {string} testPath current test path
     * @param {boolean} exact true, for exact validation
     */
    async asyncValidate(test, result, testPath, exact=false) {
        const expected = test.expected
        try {
            this.unitTest.validateRec(result, expected, testPath, exact)
            this.unitTest.success(testPath)
        } catch (err) {
            this.unitTest.fail(err)
            console.log('expected')
            console.log(JSON.stringify(expected, null, 2))
            console.log('result')
            console.log(JSON.stringify(result, null, 2))
            await this.asyncRunAgain()
        }
    }

    /**
     * Standard validate method
     * @param {object} test test case
     * @param {object} result test result
     * @param {string} testPath current test path
     * @param {boolean} exact true, for exact validation
     */
    validate(test, result, testPath, exact=false) {
        const expected = test.expected
        try {
            this.unitTest.validateRec(result, expected, testPath, exact)
            this.unitTest.success(testPath)
        } catch (err) {
            this.unitTest.fail(err)
            console.log('expected')
            console.log(JSON.stringify(expected, null, 2))
            console.log('result')
            console.log(JSON.stringify(result, null, 2))
            this.runAgain()
        }
    }

    /**
     * @private
     * @description Runs a single test
     * @param {Object} test test definition
     * @param {string} testPath path to the test filename/testcase-description/test-description
     * @param {Any} testObject prepared object to test
     * @param {boolean} validate true, if validation shall be called
     * @param {boolean} callBreak true, if the break function shall be called
     */
    async _asyncRunTest (test, testPath, testObject, validate, callBreak) {
        try {
            if (callBreak) {
                await this._callbacks.invokeCallbackAsync('break', test, testObject)
            } else {
                const result = await this._callbacks.invokeCallbackAsync('run', test, testObject)
                if (validate) {
                    if (this._callbacks.hasCallback('validate')) {
                        await this._callbacks.invokeCallbackAsync('validate', test, result, testPath)
                    } else {
                        await this.asyncValidate(test, result, testPath)
                    }
                }
            }
        } catch (err) {
            if (test.expected instanceof Error) {
                this._unitTest.success(testPath)
            } else {
                try {
                    await this._callbacks.invokeCallbackAsync('break', test, testObject)
                } catch (breakErr) {
                    // do nothing
                }
                this._unitTest.fail(testPath + ' run test exception')
                this._unitTest.logError(err)
            }
        }
    }

    /**
     * @private
     * @description Runs a single test
     * @param {Object} test test definition
     * @param {string} testPath path to the test filename/testcase-description/test-description
     * @param {Any} testObject prepared object to test
     * @param {boolean} validate true, if validation shall be called
     * @param {boolean} callBreak true, if the break function shall be called
     */
    _runTest (test, testPath, testObject, validate, callBreak) {
        try {
            if (callBreak) {
                this._callbacks.invokeCallback('break', test, testObject)
            } else {
                const result = this._callbacks.invokeCallback('run', test, testObject)
                if (validate) {
                    if (this._callbacks.hasCallback('validate')) {
                        this._callbacks.invokeCallback('validate', test, result, testPath)
                    } else {
                        this.validate(test, result, testPath)
                    }
                }
            }
        } catch (err) {
            if (test.expected instanceof Error) {
                this._unitTest.success(testPath)
            } else {
                try {
                    this._callbacks.invokeCallback('break', test, testObject)
                } catch (breakErr) {
                    // do nothing
                }
                this._unitTest.fail(testPath + ' run test exception')
                this._unitTest.logError(err)
            }
        }
    }

    /**
     * @private
     * @description Runs all tests of a testcase
     * @param {Object} testcase testcase definition
     * @param {Object[]} testcase.tests test definitions
     * @param {string} testcasePath path to the testcase file/testcase
     */
    async _asyncRunTestcase (testcase, testcasePath, testNo) {
        const testObject = await this._callbacks.invokeCallbackAsync('prepare', testcase, testcasePath)
        for (const test of testcase.tests) {
            this._testNo++
            const testPath = testcasePath + '/' + test.description + ' (' + this._testNo + ') '
            const validate = testNo === null
            const doBreak = this._testNo === testNo
            await this._asyncRunTest(test, testPath, testObject, validate, doBreak)

            if (doBreak) {
                break
            }
        }
        await this._callbacks.invokeCallbackAsync('cleanup', testObject)
    }

    /**
     * @private
     * @description Runs all tests of a testcase
     * @param {Object} testcase testcase definition
     * @param {Object[]} testcase.tests test definitions
     * @param {string} testcasePath path to the testcase file/testcase
     */
    _runTestcase (testcase, testcasePath, testNo) {
        const testObject = this._callbacks.invokeCallback('prepare', testcase, testcasePath)
        for (const test of testcase.tests) {
            this._testNo++
            const testPath = testcasePath + '/' + test.description + ' (' + this._testNo + ') '
            const validate = testNo === null
            const doBreak = this._testNo === testNo
            this._runTest(test, testPath, testObject, validate, doBreak)

            if (doBreak) {
                break
            }
        }
        this._callbacks.invokeCallback('cleanup', testObject)
    }

    /**
     * @private
     * @description Runs all tests defined in a file
     * @param {Object[]} testFileContent content of the test file
     * @param {string} fileName name of the current file processed
     * @param {number} [testNo=null] break if test number reached, default do not break
     */
    async _asyncRunFile (fileName, testNo = null) {
        (new CheckInput(schema)).throwOnValidationError(this._fileContent, 'Error in: ' + fileName)
        for (const testcase of this._fileContent) {
            const testcasePath = fileName + '/' + testcase.description
            await this._asyncRunTestcase(testcase, testcasePath, testNo)
            if (testNo !== null && this._testNo >= testNo) {
                break
            }
        }
    }

    /**
     * @private
     * @description Runs all tests defined in a file
     * @param {Object[]} testFileContent content of the test file
     * @param {string} fileName name of the current file processed
     * @param {number} [testNo=null] break if test number reached, default do not break
     */
    _runFile (fileName, testNo = null) {
        (new CheckInput(schema)).throwOnValidationError(this._fileContent, 'Error in: ' + fileName)
        for (const testcase of this._fileContent) {
            const testcasePath = fileName + '/' + testcase.description
            this._runTestcase(testcase, testcasePath, testNo)
            if (testNo !== null && this._testNo >= testNo) {
                break
            }
        }
    }

    /**
     * @description Runs last testcase again - usually for debugging
     */
    async asyncRunAgain () {
        const testNo = this._testNo
        this._testNo = 0
        await this._asyncRunFile('rerun', testNo)
    }

    /**
     * @description Runs last testcase again - usually for debugging
     */
    runAgain () {
        const testNo = this._testNo
        this._testNo = 0
        this._runFile('rerun', testNo)
    }

    /**
     * @description Runs a test based on JSON files
     * @param {Array|string} files files providing the test cases
     * @param {string} directory directory of the files
     * @param {number} expectedAmount amount of expected success cases
     * @param {string} [extension='json'] file extension of the files
     */
    async asyncRun (files, directory, expectedAmount, extension = 'json') {
        const start = new Date().getTime()
        new CheckInput({ type: ['string', 'array'], items: { type: 'string' } })
            .throwOnValidationError(files, 'testrun, illegal parameter')
        if (!types.isArray(files)) {
            files = [files]
        }
        const promises = []
        for (const fileName of files) {
            let fullFileName = directory + '/' + fileName
            if (extension !== '' && extension !== null) {
                fullFileName += '.' + extension
            }
            this._testNo = 0
            this._unitTest.log('Processing ' + fileName)
            this._fileContent = require(fullFileName)
            this._unitTest.log('Test data loaded ')
            if (this._parallel) {
                promises.push(this._asyncRunFile(fileName))
            } else {
                await this._asyncRunFile(fileName)
            }
        }
        await Promise.all(promises)
        const runtime = new Date().getTime() - start
        console.log('runtime: %s seconds', runtime / 1000)
        return this.unitTest.getResultFunctions()
    }

    /**
     * @description Runs a test based on JSON files
     * @param {Array|string} files files providing the test cases
     * @param {string} directory directory of the files
     * @param {number} [expectedAmount] amount of expected success cases
     * @param {string} [extension='json'] file extension of the files
     */
    run (files, directory, expectedAmount, extension = 'json') {
        new CheckInput({ type: ['string', 'array'], items: { type: 'string' } })
            .throwOnValidationError(files, 'testrun, illegal parameter')
        if (!types.isArray(files)) {
            files = [files]
        }
        for (const fileName of files) {
            let fullFileName = directory + '/' + fileName
            if (extension !== '' && extension !== null) {
                fullFileName += '.' + extension
            }
            this._testNo = 0
            this._unitTest.log('Processing ' + fileName)
            this._fileContent = require(fullFileName)
            this._unitTest.log('Test data loaded ')
            this._runFile(fileName)
        }
        return this.unitTest.getResultFunctions()
    }
}

module.exports = Testrun
