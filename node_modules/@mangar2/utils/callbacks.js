/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 * @overview This module provides a class to manage callbacks. Use it in Classes to support setting
 * callbacks.
 */

'use strict'

const Types = require('./types')

/**
 * A class for managing callback functions for events.
 * @class Callbacks
 * @param {string[]} supportedEvents An array of event names that the Callbacks instance should support.
 * @example
 * callbacks = new Callbacks(['publish'])
 * // register a callback
 * callbacks.on('publish', (param) => { console.log('called publish with ' + param) })
 * // invoke a callback
 * callbacks.invokeCallback('publish', 'a parameter')
 */
class Callbacks {
    constructor (supportedEvents) {
        this._supportedEvents = supportedEvents
        this._callbacks = {}
    }

    /**
     * Registers a callback function for an event.
     * 
     * @param {string} event - The name of the event.
     * @param {function} callback - The callback function.
     * @throws {Error} - Throws an error if the event is not supported or if the callback is not a function.
     */
    on (event, callback) {
        const eventLowerCase = event.toLowerCase()
        if (Array.isArray(this._supportedEvents) && !this._supportedEvents.includes(event)) {
            throw Error('event not supported: ' + event)
        }
        if (!Types.isAnyFunction(callback)) {
            throw Error('tried to register a callback that is not a function: ' + event)
        }    
        this._callbacks[eventLowerCase] = callback
    }

    /**
     * Checks if a callback is registered
     * @param {string|any} name - The name of the callback to look for, not case sensitive
     * @returns {boolean} - True, if the callback is registered
     */
    hasCallback(name) {
        if (typeof name === 'string') {
            return Object.prototype.hasOwnProperty.call(this._callbacks, name.toLowerCase())
        } else {
            return false
        }
    }

    /**
     * Invokes a callback function for an event.
     * 
     * @param {string} event - The event name (not case sensitive) for the callback.
     * @param {any} [params] - Any parameters to pass to the callback function.
     * @returns {any} - Returns the result of the callback function.
     * @throws {Error} - Throws an error if the event is not supported or if the callback is not a function.
     */
    invokeCallback (event, ...params) {
        const eventLowerCase = event.toLowerCase()
        if (Array.isArray(this._supportedEvents) && !this._supportedEvents.includes(event)) {
            throw Error('event not supported: ' + event)
        }
        const callback = this._callbacks[eventLowerCase]
        if (callback !== undefined && !Types.isAnyFunction(callback)) {
            throw Error('no callback registered for event: ' + event)
        }
        
        return callback ? callback(...params) : null
    }

    /**
     * Calls a callback stored to an event, if registered. It is the async version.
     * @param {string} event - The event name (not case sensitive) for the callback.
     * @param  {...any} params - Any parameters to pass to the callback function.
     * @returns {Promise<any>} - A Promise that resolves to the result of the callback or null, if the callback is not defined.
     * @throws {Error} - If the event is not supported or if no callback is registered for the event.
     */
    async invokeCallbackAsync (event, ...params) {
        const eventLowerCase = event.toLowerCase()
        if (Array.isArray(this._supportedEvents) && !this._supportedEvents.includes(event)) {
            throw Error('event not supported: ' + event)
        }
        const callback = this._callbacks[eventLowerCase]
        if (callback !== undefined && !Types.isAnyFunction(callback)) {
            throw Error('no callback registered for event: ' + event)
        }
        
        return callback ? callback(...params) : null
    }
}

module.exports = Callbacks
