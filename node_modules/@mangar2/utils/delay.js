/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */

'use strict'

    
/**
 * Delays the execution for a specified amount of time by creating a Promise that will be resolved
 * after the specified delay. This function can be used to wait for an asynchronous operation to
 * complete before continuing with the execution.
 * 
 * @param {number} timeInMilliseconds - The time to delay the execution, in milliseconds.
 * @param {boolean} [verbose=false] - An optional flag to print a message to the console when waiting.
 * @returns {Promise} - A Promise that resolves after the specified delay.
 */ 
module.exports = (timeInMilliseconds, verbose = false) => {
    const shouldLog = verbose && timeInMilliseconds > 0
    
    if (shouldLog) {
        console.log(`Waiting for ${timeInMilliseconds / 1000} seconds...`)
    }
    
    return new Promise((resolve) => {
        setTimeout(resolve, timeInMilliseconds)
    })
}
