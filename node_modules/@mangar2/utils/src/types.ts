/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 * @overview
 * provides safe type checking functions: isFunction, isArray, isObject, isNull, isUndefined, isBoolean, isNumber, isString, isDate
 */

'use strict'

/**
 * A collection of utility functions for checking the types of values.
 * 
 * @class Types
 * @example
 * Types.isFunction(text => console.log(text)) // returns true
 * Types.isBoolean('true') // returns false
 */
export const Types = {
    getType: (anything: any): string => { return {}.toString.call(anything).slice(8, -1) },
    isFunction: (anything: any): boolean => { return Types.getType(anything) === 'Function' },
    isAsyncFunction: (anything: any): boolean => { return Types.getType(anything) === 'AsyncFunction' },
    isAnyFunction: (anything: any): boolean => { return Types.isFunction(anything) || Types.isAsyncFunction(anything) },
    isArray: (anything: any): boolean => { return Array.isArray(anything) },
    isObject: (anything: any): boolean => { return Types.getType(anything) === 'Object' },
    isNull: (anything: any): boolean => { return Types.getType(anything) === 'Null' },
    isUndefined: (anything: any): boolean => { return Types.getType(anything) === 'Undefined' },
    isBoolean: (anything: any): boolean => { return Types.getType(anything) === 'Boolean' },
    isNumber: (anything: any): boolean => { return Types.getType(anything) === 'Number' },
    isInteger: (anything: any): boolean => { return Number.isInteger(anything) },
    isString: (anything: any): boolean => { return Types.getType(anything) === 'String' },
    isDate: (anything: any): boolean => { return Types.getType(anything) === 'Date' && !isNaN(anything.getTime()) },
    isRegExp: (anything: any): boolean => { return Types.getType(anything) === 'RegExp'},
    isMap: (anything: any): boolean => { return Types.getType(anything) === 'Map'},
    isSet: (anything: any): boolean => { return Types.getType(anything) === 'Set'},
}

