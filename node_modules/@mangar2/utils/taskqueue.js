/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */

'use strict'

const Callbacks = require('./callbacks')
const delay = require('./delay')
const Types = require('./types')

/**
 * Callback to publish messages to the mqtt broker
 * @callback Task
 * @param {Any} parameter parameter for the task
 */

/**
 * Creates a queue to manage one task after another with a guaranteed delay.
 * 
 * @param {number} delayInMilliseconds - The delay, in milliseconds, between two tasks.
 */
class TaskQueue {
    constructor(delayInMilliseconds) {
        if (!Types.isNumber(delayInMilliseconds) || delayInMilliseconds < 0) {
            throw new TypeError(`Invalid argument: delayInMilliseconds must be a positive number. Received ${Types.getType(delayInMilliseconds)}.`)
        }
        this._delayInMilliseconds = delayInMilliseconds
        this._taskQueue = []
        this._callbacks = new Callbacks(['task'])
        this._running = false
    }

    /**
     * Sets a callback for a specific event.
     * 
     * @param {string} event - The name of the event (not case sensitive) for the callback. Supported events: 'task'.
     * @param {function} callback - The function to be called when the event occurs.
     * @throws {Error} If the event is not supported.
     * @throws {Error} If the callback is not a function.
     */
    on(event, callback) {
        this._callbacks.on(event, callback)
    }

    /**
     * Runs the next task in the queue, with a delay between tasks.
     * 
     * @param {any} parameter - The parameter to be passed to the task function.
     * @private
     */
    async _runTasks() {
        if (this._running) {
            return
        }
        this._running = true
        while (this._taskQueue.length !== 0) {

            const parameter = this._taskQueue.shift()
            await this._callbacks.invokeCallbackAsync('task', parameter)
            await delay(this._delayInMilliseconds)
        }

        this._running = false
    }

    /**
     * Adds a new task to the queue and starts processing it.
     * 
     * @param {any} taskParameter - The parameter to be passed to the task function.
     */
    addTask(taskParameter) {
        this._taskQueue.push(taskParameter)
        this._runTasks()
    }
}

module.exports = TaskQueue
