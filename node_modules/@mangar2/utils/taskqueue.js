/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */

'use strict'

const delay = require('./delay')
const Callbacks = require('@mangar2/callbacks')

const WAITING = 'waiting'
const RUNNING = 'running'

/**
 * Callback to publish messages to the mqtt broker
 * @callback Task
 * @param {Any} parameter parameter for the task
 */

/**
 * Creates a queue to manage one task after another with a guaranteed delay
 * @param {number} delayInMilliseconds amount of miliseconds between two tasks
 */
class TaskQueue {
    constructor ( delayInMilliseconds ) {
        this._delayInMilliseconds = delayInMilliseconds
        this._taskQueue = []
        this._lastTask = new Date()
        this._callbacks = new Callbacks(['task'])
        this._state = WAITING
    }

    /**
     * Sets a callback.
     * @param {string} event event name (not case sensitive) for the callback (supported: 'task')
     * @param {Taks} callback function(...parameter)
     * @throws {Error} if the event is not supported
     * @throws {Error} if the callback is not 'function'
     */
    on (event, callback) {
        this._callbacks.on(event, callback)
    }

    /**
     * Runs the next task
     * @param {Any} parameter task parameter
     * @private
     */
    async _runTasks() {
        this._state = RUNNING
        while (this._taskQueue.length !== 0) {
            const parameter = this._taskQueue.pop()
            this._callbacks.invokeCallback('task', parameter)
            await delay(this._delayInMilliseconds)
        }
        this._state = WAITING
    }

    /**
     * Adds a task to the queue
     * @param {Any} taksParameter parameter handed over to the task
     */
    addTask ( taksParameter ) {
        this._taskQueue.push(taksParameter)
        if (this._state === WAITING) {
            this._runTasks()
        }
    }

}

module.exports = TaskQueue