/**
 * ---------------------------------------------------------------------------------------------------
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * File:      zwave.js
 *
 * Author:      Volker Böhm
 * Copyright:   Volker Böhm
 * ---------------------------------------------------------------------------------------------------
 */

'use strict'

// path to your configuration file
const sanitizeConfiguration = require('./configuration')
const ZwaveController = require('./zwaveController.js')
const Callbacks = require('@mangar2/callbacks')

/**
 * Creates a remote service
 * @param {Object} [options={}] remote server parameter
 * @param {Service[]} options.services list of supported services
 */
 class ZwaveService {
    constructor (options = {}) {
        this._options = sanitizeConfiguration(options)
        this._callbacks = new Callbacks(['publish'])
        this._controller = new ZwaveController(options.usb, options)
        this.on('publish', (message) => {
            // const matchedMessage = matchMessages.matchAndUpdateReplyMessage(message)
            // matchedMessage.qos = config.service.qos
            // matchedMessage.retain = config.service.retain
            message.qos = this._options.qos
            console.log(message)
            this._callbacks.invokeCallback('publish', message)
        })
    }

    /**
     * Sets a callback.
     * @param {string} event event name (not case sensitive) for the callback
     * @param {function} callback function(...parameter)
     * @throws {Error} if the event is not supported
     * @throws {Error} if the callback is not 'function'
     */
    on (event, callback) {
        this._callbacks.on(event, callback)
    }

    /**
     * Publishes a command based on a service definition
     * @param {string} deviceId identifier of the device
     * @param {string|number} value value to publish
     * @param {Service} service service definition
     * @private
     */
    _publish (message) {
        this._callbacks.invokeCallback('publish', message)
    }

    /**
     * Closes the broker, stops listening
     */
    async close () {
        this._controller.close()
    }
}

module.exports = ZwaveService




