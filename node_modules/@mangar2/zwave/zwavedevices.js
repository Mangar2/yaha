/**
 * ---------------------------------------------------------------------------------------------------
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * File:      zwave.js
 *
 * Author:      Volker Böhm
 * Copyright:   Volker Böhm
 * ---------------------------------------------------------------------------------------------------
 */

 'use strict'

const Devices = require('@mangar2/devices')
const { types, errorLog } = require('@mangar2/utils')

/**
 * @typedef {Object} ZwaveValue
 * @property {number} node_id id of the zwave node
 * @property {number} class_id id of the zwave parameter class
 * @property {number} [instance = 1] index of device instance for a multi instance zwave device
 * @property {number} [index = 0] index of the feature for a multi-feature device class
 * @property {number} level log level for the pattern
 */

class ZwaveDevices {
    /**
     * Constructs a new zwave controller and binds it to an input device
     * @param {object} config zwave controller configuration
     * @param {object|array} config.devices device definition structure
     */
    constructor (config) {
        this._devices = new Devices(config)
    }

    /**
     * Recursively searches for an object in the zwave node tree
     * @param {object} object object to search for the right zwave object
     * @param {string} label label of the zwave object to search for
     * @param {number} instance instance number of the zwave object to search for
     */
    _getObjectByLabelRec (object, label, instance) {
        let result
        if (typeof (object) === 'object') {
            if (object.class_id) {
                if (object.label === label && object.instance === instance) {
                    result = object
                }
            } else {
                for (const element in object) {
                    const subObject = object[element]
                    result = getObjectByLabelRec(subObject, label, instance)
                    if (result) {
                        break
                    }
                }
            }
        }
        return result
    }

    /**
     * Gets a zwave controllable element by label
     * @param {object[]} nodes zwave nodes structure
     * @param {string} label label of the setting
     * @param {number} nodeId id of the node
     * @param {number} [instanceId=1] id of the instance
     */
    _getObjectByLabel (nodes, label, nodeId, instanceId = 1) {
        const classes = nodes[nodeId].classes
        const result = getObjectByLabelRec(classes, label, instanceId)
        return result
    }

   /**
     * Gets the right topic for a value object
     * @param {ZwaveValue} value new value information structure of the device class
     * @returns {string|undefined} topic, if found
     */
    valueToTopic (value) {
        let result
        const { node_id, instance } = value
        const devices = this._devices.attributeToDevices('node_id', node_id)
        if (types.isArray(devices)) {
            for (const device of devices) {
                if (device.instance === undefined || device.instance === instance) {
                    result = device.topic
                    break        
                }
            }
        }
        return result
    }
    

    /**
     * Gets zwave parameters based on a device setting
     * @param {object[]} nodes zwave nodes structure
     * @param {string} label label of the setting
     * @param {object} device device information structure
     * @param {string} device.topic topic which indentifies the device
     * @param {number} device.node_id id of the zwave node 
     * @param {number} [device.instance = 1] id of the zwave node instance
     * @param {number} [device.class_id] id of the zwave class (identifying the parameter)
     * @param {number} [device.index = 0] index of the parameter
     * @param {string} [device.type = 'bool'] type of the parameter (e.g. 'bool')
     * @returns {{ node_id, instance, class_id, type }}
     */
    getZwaveParameters(nodes, label, device) {
        const { topic, node_id } = device
        let { class_id, instance, index, type } = device
        if (node_id === undefined) {
            throw Error('device is not a zwave node (missing node_id property in configuration) ' + topic)
        }
        if (instance === undefined) {
            instance = 1
        }
        if (index == undefined) {
            index = 0
        }
        if (type === undefined) {
            type = 'bool'
        }
        if (class_id === undefined && label === undefined) {
            throw Error('Neither label nor class_id specified, (configuration error) topic: ' + topic)
        }
        if (class_id === undefined) {
            const zwaveObject = getObjectByLabel(nodes, label, node_id, instance, index)
            console.log(zwaveObject)
            class_id = zwaveObject.class_id
            index = zwaveObject.index
            type = zwaveObject.type
        }
        return { node_id, instance, class_id, index, type }
    }
}

module.exports = ZwaveDevices