/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */

'use strict'

const UnitTest = require('@mangar2/unittest')
const sanitize = require('@mangar2/configuration')
const CheckInput = require('@mangar2/checkinput')

const unitTest = new UnitTest(true)

const config = {
    fileName: 'broker',
    maxRetryCount: 1,
    maxQueueSize: 100,
    subObject: { individual: 'hello' }
}

const checkConfig = new CheckInput({
    type: 'object',
    properties: {
        fileName: { type: 'string' },
        directory: { type: 'string' },
        inFlightWindow: { type: 'number' },
        replyTimeoutInMilliseconds: { type: 'number' },
        pubrelTimeoutInMilliseconds: { type: 'number' },
        maxRetryCount: { type: 'number' },
        maxQueueSize: { type: 'number' },
        subObject: {
            type: 'object',
            properties: {
                individual: { type: 'string' },
                default: { type: 'string' }
            }
        },
        array: {
            type: 'array',
            items: 'string'
        }
    },
    required: ['fileName', 'directory', 'inFlightWindow', 'replyTimeoutInMilliseconds', 'pubrelTimeoutInMilliseconds', 'maxRetryCount', 'maxQueueSize']
})

const defaultValues = {
    directory: '.',
    inFlightWindow: 1,
    replyTimeoutInMilliseconds: 0,
    pubrelTimeoutInMilliseconds: 24 * 3600 * 1000,
    maxRetryCount: 5,
    maxQueueSize: 100,
    subObject: { default: 'world' },
    array: [1]
}

unitTest.expectException(() => sanitize(config, {}, checkConfig), 'Error', 'Assertion')

const result = sanitize(config, defaultValues, checkConfig)
unitTest.assertEqual(result.fileName, 'broker', 'fileName')
unitTest.assertEqual(result.directory, '.', 'directory')
unitTest.assertEqual(result.inFlightWindow, 1, 'inFlightWindow')
unitTest.assertEqual(result.replyTimeoutInMilliseconds, 0, 'replyTimeoutInMilliseconds')
unitTest.assertEqual(result.pubrelTimeoutInMilliseconds, 24 * 3600 * 1000, 'pubrelTimeoutInMilliseconds')
unitTest.assertEqual(result.maxRetryCount, 1, 'maxRetryCount')
unitTest.assertEqual(result.maxQueueSize, 100, 'maxQueueSize')
unitTest.assertEqual(result.subObject.individual, 'hello', 'individual')
unitTest.assertEqual(result.subObject.default, 'world', 'standard')
unitTest.assertEqual(result.array[0], 1, 'array')

unitTest.showResult(11)
