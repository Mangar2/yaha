/**
 * @brief server echoing to post requests for tests
 * @copyright (C) by Aareon All rights reserved
 */

const shutdown = require('@mangar2/shutdown')
const HttpServer = require('./httpserver')

class EchoServer {
   
    constructor (port) {
        this._server = new HttpServer(port)
        this._running = false
        this.inputs = []
    }

    get port() {
        return this._server.address.port
    }

    /**
     * Handles a post request
     * @param {string} method method name
     * @param {object} header header of the sender
     * @param {string} payload object payload
     * @param {string} path path of the request
     * @param {object} res result object
     */
    async echo(method, payload, headers, path, res) {
        let input = {
            method,
            path,
            headers
        }
        if (method === 'GET') {
            input.param = payload
        } else {
            input.payload = payload
        }
        this.inputs.push(input)
        const result = {
            statusCode: 200,
            body: JSON.stringify( input)
        }
        res.writeHead(result.statusCode, {
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Headers': '*'
        })
        res.end(result.body)
    }


    /**
     * Starts the server
     */
    run() {
        this._running = true
        shutdown(async () => {
            await this._server.close()
            process.exit(0)
        })
        this._server.on('POST', async (payload, headers, path, res) => { this.echo('POST', payload, headers, path, res) })
        this._server.on('GET', async (urlSearchParam, headers, path, res) => { this.echo('GET', urlSearchParam.toString(), headers, path, res) })
        this._server.on('PUT', async (payload, headers, path, res) => { this.echo('PUT', payload, headers, path, res) })
        this._server.on('PATCH', async (payload, headers, path, res) => { this.echo('PATCH', payload, headers, path, res) })
        this._server.on('DELETE', async (payload, headers, path, res) => { this.echo('DELETE', payload, headers, path, res) })
        this._server.on('listen', () => {
            console.log('listening')
        })
        this._server.on('closed', () => {
            console.log('server closed')            
        })
        this._server.listen()
    }

    async stop() {
        this._running = false
        await this._server.close()
    }
}

module.exports = EchoServer
