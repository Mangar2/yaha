/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */

'use strict'

const http = require('http')
const Server = require('@mangar2/httpservice/server')

/**
 * Creates a http server listening to a certain port for
 * simplifying access to the node http service
 * Register your callbacks according to the http functions you need.
 * @param {number} port port to listen to
 * @example
 * const server = new HTTPServer(10000)
 * server.on('GET', (URLSearchParam, headers, path, res) => console.log(path))
 * server.listen()
 * server.close()
 */
class HTTPServer {
    constructor(port) {
        this._server = new Server(port)
    }

    /**
     * Gets the address of the server, once listen has been called
     * If listen has not been called yet, undefined is returned
     * @returns { {address: string, family: string, port: number} | null } ip address, family an port
     */
    get address() {
        return this._server.server ? this._server.server.address() : undefined
    }

    /**
     * Sets a callback
     * @param {string} event RESTful http verb (POST, GET, PUT, PATCH, DELETE, OPTIONS) and 
     * 'listen' (called once listening) and 'closed' (called once closed)
     * @param {HTTPGetCallback|HTTPCallback} callback(payload, headers, path, res)
     * where payload is the http payload, headers the http headers, res the result structure and path is
     * is the http path as string
     */
    on(event, callback) {
        this._server.on(event, callback)
    }

    /**
     * Creates a http server listening
     */
    listen() {
        this._server.listen(http)
    }

    /**
     * Stops the server from accepting new connections and closes existing connections.
     * Calls the callback "close", once the server is closed.
     * @returns {promise} resolved, once the connection is closed
     */
    close() {
        return this._server.close()
    }
}

module.exports = HTTPServer
