/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */

'use strict'

/**
 * @private
 * @description Standard header components for application/json messages
 */
const standardHeaderJSON = {
    'content-type': 'application/json; charset=UTF-8',
    accept: 'application/json,text/plain',
    'accept-charset': 'UTF-8'
}

/**
 * @private
 * @description Standard header components for text/plain messages
 */
const standardHeaderText = {
    'content-type': 'text/plain; charset=UTF-8',
    accept: 'application/json,text/plain',
    'accept-charset': 'UTF-8'
}

/**
 * @private
 * @description Subscribes to a client
 * @param {Array} topics array of topic strings
 * @param {string} clientId unique client identifier
 * @param {number|undefined} packetid unique id of the package (not used on version 0.0)
 * @returns {Object} {headers, payload, resultCheck(result)}
 */
const unsubscribe = {
    '0.0': (topics, clientId, packetid) => {
        const payload = { topics, clientId }
        const headers = { ...standardHeaderText, version: '0.0' }

        const resultCheck = (result) => {
            return result.statusCode === 200 &&
                result.headers['content-type'].startsWith('text/plain') &&
                result.payload.toLowerCase() === 'unsuback'
        }

        return { headers, payload, resultCheck }
    },

    '1.0': (topics, clientId, packetid) => {
        const payload = { topics, clientId }
        const headers = { ...standardHeaderJSON, packetid, version: '1.0' }

        const resultCheck = (result) => {
            return result.statusCode === 204 &&
                result.headers['content-type'].startsWith('application/json') &&
                result.headers.packet === 'unsuback' &&
                Number(result.headers.packetid) === packetid
        }
        return { headers, payload, resultCheck }
    }
}

/**
 * @private
 * @description Creates the return types for a unsubscribe request
 * @param {Object} headers input headers
 * @returns {Object} {headers, payload, statusCode, packetid}
 */
const onUnsubscribe = {
    '0.0': (headers) => {
        return {
            headers: { 'content-type': 'text/plain; charset=UTF-8', version: '0.0' },
            payload: 'unsuback',
            statusCode: 200,
            packetid: headers.id
        }
    },

    '1.0': (headers) => {
        const packetid = headers.packetid === undefined ? 0 : headers.packetid
        return {
            headers: { 'content-type': 'application/json; charset=UTF-8', packet: 'unsuback', version: '1.0', packetid },
            payload: '',
            statusCode: 204,
            packetid: headers.packetid
        }
    }
}

module.exports = { unsubscribe, onUnsubscribe }
