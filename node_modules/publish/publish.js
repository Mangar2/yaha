/**
 * @license
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 3. It is furnished
 * "as is", without any support, and with no warranty, express or implied, as to its usefulness for
 * any purpose.
 *
 * @author Volker Böhm
 * @copyright Copyright (c) 2020 Volker Böhm
 */

'use strict'

const fs = require('fs')
const { spawnSync } = require('child_process')

class Publish {
    /**
     * @private
     * Reads a directory and sorts it
     * @param {string} directory directory to read and sort files
     * @returns {promise} sorted list of files
     */
    async readDir (directory = '.') {
        return new Promise((resolve, reject) => {
            fs.readdir(directory, (err, files) => {
                if (err) {
                    reject(err)
                } else {
                    files.sort()
                    resolve(files)
                }
            })
        })
    }

    /**
     * @private
     * writes a file
     * @param {string} fileAndPathName filename (including path)
     * @param {string} data data to be saved
     * @returns {promise}
     */
    static async writeFile (fileAndPathName, data) {
        return new Promise((resolve, reject) => {
            fs.writeFile(fileAndPathName, data, (err) => {
                if (err) {
                    reject(err)
                } else {
                    resolve()
                }
            })
        })
    }

    /**
     * @private
     * reads a file
     * @param {string} fileAndPathName filename (including path)
     * @param {string} data data to be saved
     * @returns {promise}
     */
    async readFile (fileAndPathName) {
        return new Promise((resolve, reject) => {
            fs.readFile(fileAndPathName, (err, data) => {
                if (err) {
                    reject(err)
                } else {
                    resolve(data)
                }
            })
        })
    }

    async readPackage (path) {
        let result
        try {
            const buffer = await this.readFile(path + '/package.json')
            result = JSON.parse(buffer)
        } catch (err) {
        }
        return result
    }

    getInfo (path) {
        const ls = spawnSync('npm', ['info', '--prefix', './' + path])
        // const ls = spawnSync('cmd', ['dir', '.'])
        console.log(ls.stdout.toString())
        return ls.stdout.toString()
    }
}

async function publish () {
    const helper = new Publish()
    const directories = await helper.readDir()
    for (const dir of directories) {
        const packageInfo = await helper.readPackage(dir)
        if (packageInfo !== undefined) {
            const npmInfo = helper.getInfo()
            const version = packageInfo.version
            console.log(npmInfo)
            console.log('%s: %s', dir, version)
            break
        }
    }
}

publish()
